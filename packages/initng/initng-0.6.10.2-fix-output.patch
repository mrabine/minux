diff -rupN /tmp/initng-0.6.10.2/devtool/empty_plugin/initng_empty.c ./devtool/empty_plugin/initng_empty.c
--- /tmp/initng-0.6.10.2/devtool/empty_plugin/initng_empty.c	2006-05-18 12:24:55.000000000 +0200
+++ ./devtool/empty_plugin/initng_empty.c	2016-07-13 12:08:47.749159761 +0200
@@ -41,25 +41,25 @@
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
 	/* add hokks and malloc data here */
 
-	D_("empty.so loaded!\n");
+	D_("empty.so loaded!\r\n");
 	return (TRUE);
 }
 
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	/* remove hooks and free data here */
 
-	D_("empty.so unloaded!\n");
+	D_("empty.so unloaded!\r\n");
 }
diff -rupN /tmp/initng-0.6.10.2/devtool/test_parser.c ./devtool/test_parser.c
--- /tmp/initng-0.6.10.2/devtool/test_parser.c	2007-02-02 13:22:29.000000000 +0100
+++ ./devtool/test_parser.c	2016-07-13 12:08:47.749159761 +0200
@@ -100,7 +100,7 @@ int main(int argc, char *argv[], char *e
 
 	if (!initng_load_module_load_all(INITNG_PLUGIN_DIR))
 	{
-		printf("could not load all modules\n");
+		printf("could not load all modules\r\n");
 		goto exit;
 	}
 
@@ -135,7 +135,7 @@ int main(int argc, char *argv[], char *e
 		{
 			if (strcmp(opt, "help") == 0)
 			{
-				printf("test_parser --help --verbose --all --no_sumary --check_circular --print_each --print_dep_err\n");
+				printf("test_parser --help --verbose --all --no_sumary --check_circular --print_each --print_dep_err\r\n");
 				exit(1);
 			}
 
@@ -203,22 +203,22 @@ int main(int argc, char *argv[], char *e
 		{
 			if (result == NOT_OK)
 			{
-				printf("Service %s is failed because:\n", srv_name);
+				printf("Service %s is failed because:\r\n", srv_name);
 				while_service_cache(current)
 				{
 					switch (get_int(&STATUS, current))
 					{
 						case PARSE_ERR:
-							printf("%s has parsing errors or service file was not found\n", current->name);
+							printf("%s has parsing errors or service file was not found\r\n", current->name);
 							break;
 						case CIRCULAR_ERR:
-							printf("%s has circular dependency with %s\n",
+							printf("%s has circular dependency with %s\r\n",
 								   current->name,
 								   get_string(&CIRCULAR, current));
 							break;
 						case DEPEND_ERR:
 							if (print_dep_err == 1)
-								printf("%s has one of its depends failed\n",
+								printf("%s has one of its depends failed\r\n",
 									   current->name);
 							break;
 						default:
@@ -227,7 +227,7 @@ int main(int argc, char *argv[], char *e
 				}
 			}
 			else
-				printf("Service %s is ok.\n", srv_name);
+				printf("Service %s is ok.\r\n", srv_name);
 		}
 
 	}
@@ -236,7 +236,7 @@ int main(int argc, char *argv[], char *e
 	{
 		char *all = service_db_print_all(NULL);
 
-		printf("%s\n", all);
+		printf("%s\r\n", all);
 	}
 #endif
 
@@ -303,7 +303,7 @@ static int load_service(const char *name
 	if (verbose == 1)
 	{
 		SPACE;
-		printf("Probeparsing: %s\n", name);
+		printf("Probeparsing: %s\r\n", name);
 	}
 
 	service = initng_common_parse_service(name);
@@ -317,7 +317,7 @@ static int load_service(const char *name
 		if (verbose == 1)
 		{
 			SPACE;
-			printf("%s - failed\n", name);
+			printf("%s - failed\r\n", name);
 		}
 		service = initng_service_cache_new(name,
 										   initng_service_type_get_by_name
@@ -334,7 +334,7 @@ static int load_service(const char *name
 	{
 		char *string = service_db_print_all(service->name);
 
-		printf("%s\n", string);
+		printf("%s\r\n", string);
 		free(string);
 	}
 
@@ -357,9 +357,9 @@ static int load_service(const char *name
 	{
 		SPACE;
 		if (result == NOT_OK)
-			printf("%s - failed\n", name);
+			printf("%s - failed\r\n", name);
 		else
-			printf("%s - ok\n", name);
+			printf("%s - ok\r\n", name);
 	}
 
 	set_int(&STATUS, service, (result == NOT_OK) ? DEPEND_ERR : OK);
@@ -380,7 +380,7 @@ static int check_deps(const char **dep_l
 	if (verbose == 1)
 	{
 		SPACE;
-		printf("Checking: %s\n", dep);
+		printf("Checking: %s\r\n", dep);
 	}
 
 	if (!service)
@@ -414,7 +414,7 @@ static int check_deps(const char **dep_l
 					if (verbose == 1)
 					{
 						SPACE;
-						printf("Service %s has circular dependency with %s\n",
+						printf("Service %s has circular dependency with %s\r\n",
 							   dep, string);
 					}
 					tmp_result = NOT_OK;
@@ -438,9 +438,9 @@ static int check_deps(const char **dep_l
 	{
 		SPACE;
 		if (result == NOT_OK)
-			printf("%s - failed\n", dep);
+			printf("%s - failed\r\n", dep);
 		else
-			printf("%s - ok\n", dep);
+			printf("%s - ok\r\n", dep);
 	}
 
 	status = (result ==
diff -rupN /tmp/initng-0.6.10.2/extras/initng-usplash/initng-usplash.c ./extras/initng-usplash/initng-usplash.c
--- /tmp/initng-0.6.10.2/extras/initng-usplash/initng-usplash.c	2006-05-19 12:44:56.000000000 +0200
+++ ./extras/initng-usplash/initng-usplash.c	2016-07-13 12:08:47.753159761 +0200
@@ -70,7 +70,7 @@ static int usplash(const char *format, .
 	char *p = NULL;
 	int add_len = 0;			/* This mutch more strings are we gonna alloc for */
 
-	/*printf("\n\nmprintf(%s);\n", format); */
+	/*printf("\r\n\r\nmprintf(%s);\r\n", format); */
 
 
 	/*
@@ -86,7 +86,7 @@ static int usplash(const char *format, .
 	 * have room.
 	 * Also have a check that it succeds.
 	 */
-	/*printf("Changing size to %i\n", add_len); */
+	/*printf("Changing size to %i\r\n", add_len); */
 	p = malloc(add_len * sizeof(char));
 	if (!p)
 		return (FALSE);
@@ -120,11 +120,11 @@ static int usplash(const char *format, .
 			close(pipe_fd);
 			return (TRUE);
 		}
-		/*printf("BAD: done : %i, len: %i\n", done, add_len); */
+		/*printf("BAD: done : %i, len: %i\r\n", done, add_len); */
 
 		/* try increase it a bit. */
 		add_len = (done < 0 ? add_len * 2 : done + 1);
-		/*printf("Changing size to %i\n", add_len); */
+		/*printf("Changing size to %i\r\n", add_len); */
 		if (!(p = realloc(p, ((add_len) * sizeof(char)))))
 			return (-1);
 
@@ -193,13 +193,13 @@ static void service_change(char *service
 
 static void service_output(char *service, char *process, char *output)
 {
-	/*usplash( "TEXT Service \"%s\" process \"%s\" outputed:\n%s\n", service,
+	/*usplash( "TEXT Service \"%s\" process \"%s\" outputed:\r\n%s\r\n", service,
 	   process, output); */
 }
 
 static void err_msg(e_mt mt, char *file, char *func, int line, char *message)
 {
-	/*usplash( "TEXT Message mt: %i, file: %s, func: %s, line %i.\n%s\n",
+	/*usplash( "TEXT Message mt: %i, file: %s, func: %s, line %i.\r\n%s\r\n",
 	   mt, file, func, line, message); */
 }
 
@@ -279,7 +279,7 @@ int main(int argc, char *argv[])
 	/* open up for usplash */
 	if (chdir("/dev/.initramfs") != 0)
 	{
-		printf("Error chdir \"/dev/.initramfs\"\n");
+		printf("Error chdir \"/dev/.initramfs\"\r\n");
 		exit(1);
 	}
 
@@ -317,14 +317,14 @@ int main(int argc, char *argv[])
 	if (ngeclient_error)
 	{
 		usplash("QUIT");
-		fprintf(stderr, "NGECLIENT ERROR: %s\n", ngeclient_error);
+		fprintf(stderr, "NGECLIENT ERROR: %s\r\n", ngeclient_error);
 		exit(1);
 	}
 	assert(c);
 
 	while ((e = get_next_event(c, 200000)))
 	{
-		/*printf("Got an event: %i!\n", e->state_type); */
+		/*printf("Got an event: %i!\r\n", e->state_type); */
 		handle_event(e);
 
 		ngeclient_event_free(e);
@@ -337,7 +337,7 @@ int main(int argc, char *argv[])
 	if (ngeclient_error)
 	{
 		usplash("QUIT");
-		fprintf(stderr, "NGECLIENT ERROR: %s\n", ngeclient_error);
+		fprintf(stderr, "NGECLIENT ERROR: %s\r\n", ngeclient_error);
 		exit(1);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/extras/initng-usplash/initng-usplash-shutdown.c ./extras/initng-usplash/initng-usplash-shutdown.c
--- /tmp/initng-0.6.10.2/extras/initng-usplash/initng-usplash-shutdown.c	2006-05-19 12:44:56.000000000 +0200
+++ ./extras/initng-usplash/initng-usplash-shutdown.c	2016-07-13 12:08:47.753159761 +0200
@@ -70,7 +70,7 @@ static int usplash(const char *format, .
 	char *p = NULL;
 	int add_len = 0;			/* This mutch more strings are we gonna alloc for */
 
-	/*printf("\n\nmprintf(%s);\n", format); */
+	/*printf("\r\n\r\nmprintf(%s);\r\n", format); */
 
 
 	/*
@@ -86,7 +86,7 @@ static int usplash(const char *format, .
 	 * have room.
 	 * Also have a check that it succeds.
 	 */
-	/*printf("Changing size to %i\n", add_len); */
+	/*printf("Changing size to %i\r\n", add_len); */
 	p = malloc(add_len * sizeof(char));
 	if (!p)
 		return (FALSE);
@@ -120,11 +120,11 @@ static int usplash(const char *format, .
 			close(pipe_fd);
 			return (TRUE);
 		}
-		/*printf("BAD: done : %i, len: %i\n", done, add_len); */
+		/*printf("BAD: done : %i, len: %i\r\n", done, add_len); */
 
 		/* try increase it a bit. */
 		add_len = (done < 0 ? add_len * 2 : done + 1);
-		/*printf("Changing size to %i\n", add_len); */
+		/*printf("Changing size to %i\r\n", add_len); */
 		if (!(p = realloc(p, ((add_len) * sizeof(char)))))
 			return (-1);
 
@@ -196,13 +196,13 @@ static void service_change(char *service
 
 static void service_output(char *service, char *process, char *output)
 {
-	/*usplash( "TEXT Service \"%s\" process \"%s\" outputed:\n%s\n", service,
+	/*usplash( "TEXT Service \"%s\" process \"%s\" outputed:\r\n%s\r\n", service,
 	   process, output); */
 }
 
 static void err_msg(e_mt mt, char *file, char *func, int line, char *message)
 {
-	/*usplash( "TEXT Message mt: %i, file: %s, func: %s, line %i.\n%s\n",
+	/*usplash( "TEXT Message mt: %i, file: %s, func: %s, line %i.\r\n%s\r\n",
 	   mt, file, func, line, message); */
 }
 
@@ -282,7 +282,7 @@ int main(int argc, char *argv[])
 	/* open up for usplash */
 	if (chdir("/dev/.initramfs") != 0)
 	{
-		printf("Error chdir \"/dev/.initramfs\"\n");
+		printf("Error chdir \"/dev/.initramfs\"\r\n");
 		exit(0);
 	}
 
@@ -328,14 +328,14 @@ int main(int argc, char *argv[])
 	if (ngeclient_error)
 	{
 		usplash("QUIT");
-		fprintf(stderr, "NGECLIENT ERROR: %s\n", ngeclient_error);
+		fprintf(stderr, "NGECLIENT ERROR: %s\r\n", ngeclient_error);
 		exit(0);
 	}
 	assert(c);
 
 	while ((e = get_next_event(c, 200000)))
 	{
-		/*printf("Got an event: %i!\n", e->state_type); */
+		/*printf("Got an event: %i!\r\n", e->state_type); */
 		handle_event(e);
 
 		ngeclient_event_free(e);
@@ -348,7 +348,7 @@ int main(int argc, char *argv[])
 	if (ngeclient_error)
 	{
 		usplash("QUIT");
-		fprintf(stderr, "NGECLIENT ERROR: %s\n", ngeclient_error);
+		fprintf(stderr, "NGECLIENT ERROR: %s\r\n", ngeclient_error);
 		exit(0);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/also/initng_also.c ./plugins/also/initng_also.c
--- /tmp/initng-0.6.10.2/plugins/also/initng_also.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/also/initng_also.c	2016-07-13 12:08:47.753159761 +0200
@@ -71,18 +71,18 @@ static int service_state(s_event * event
 			{
 				if (!initng_handler_start_service(current))
 				{
-					F_("Failed to also_start %s.\n", fixed);
+					F_("Failed to also_start %s.\r\n", fixed);
 					free(fixed);
 					continue;
 				}
-				D_("Service also_start %s already running.\n", fixed);
+				D_("Service also_start %s already running.\r\n", fixed);
 				fix_free(fixed, tmp);
 				continue;
 			}
 
 			if (!initng_handler_start_new_service_named(fixed))
 			{
-				F_("%s also_start %s could not start!\n", service->name,
+				F_("%s also_start %s could not start!\r\n", service->name,
 				   fixed);
 				initng_handler_stop_service(service);
 				fix_free(fixed, tmp);
@@ -108,11 +108,11 @@ static int service_state(s_event * event
 			if ((current = initng_active_db_find_by_name(fixed)))
 			{
 				/* Tell this verbose */
-				D_("service %s also stops %s\n", service->name, fixed);
+				D_("service %s also stops %s\r\n", service->name, fixed);
 
 				if (!initng_handler_stop_service(current))
 				{
-					F_("Could not stop also_stop service %s\n",
+					F_("Could not stop also_stop service %s\r\n",
 					   current->name);
 				}
 			}
@@ -127,10 +127,10 @@ static int service_state(s_event * event
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -142,7 +142,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&ALSO_START);
 	initng_service_data_type_unregister(&ALSO_STOP);
 	initng_event_hook_unregister(&EVENT_IS_CHANGE, &service_state);
diff -rupN /tmp/initng-0.6.10.2/plugins/bash_launcher/initng_bash_launcher.c ./plugins/bash_launcher/initng_bash_launcher.c
--- /tmp/initng-0.6.10.2/plugins/bash_launcher/initng_bash_launcher.c	2007-03-04 04:53:22.000000000 +0100
+++ ./plugins/bash_launcher/initng_bash_launcher.c	2016-07-13 12:08:47.753159761 +0200
@@ -87,7 +87,7 @@ static int initng_bash(s_event * event)
 	/* get the arguments if any */
 	args = get_string_var(&SCRIPT_OPT, data->exec_name, data->service);
 
-	/*D_("initng_bash(%s, %s, %s);\n", data->service->name, e, args); */
+	/*D_("initng_bash(%s, %s, %s);\r\n", data->service->name, e, args); */
 	if (bash_exec(data->process, data->service, e, args))
 		return (HANDLED);
 	else
@@ -101,7 +101,7 @@ static void bash_this(const char *bash_c
 	/* temporary argv */
 	char **argtmp;
 
-	D_("bash_this(%s);\n", s->name);
+	D_("bash_this(%s);\r\n", s->name);
 
 	/* Todo : move bash_this into initng_bash_launcher and parse args properly\n" */
 
@@ -143,7 +143,7 @@ static void bash_this(const char *bash_c
 
 	/* put an error message up */
 
-	F_("bash_this(): child died!\n ERROR!\n");
+	F_("bash_this(): child died!\r\n ERROR!\r\n");
 
 	/* system free */
 	initng_global_free();
@@ -179,22 +179,22 @@ static int bash_exec(process_h * process
 	}
 
 	/* save pid of fork */
-	D_("FROM_FORK Forkstarted pid %i.\n", pid_fork);
+	D_("FROM_FORK Forkstarted pid %i.\r\n", pid_fork);
 
 	if (pid_fork > 1)
 		return (TRUE);
 
-	F_("bash_exec, did not get a pid!\n");
+	F_("bash_exec, did not get a pid!\r\n");
 	process_to_exec->pid = 0;
 	return (FALSE);
 
 }
 int module_init(int api_version)
 {
-	D_("initng_simple_plugin: module_init();\n");
+	D_("initng_simple_plugin: module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -210,6 +210,6 @@ void module_unload(void)
 	initng_service_data_type_unregister(&SCRIPT);
 	initng_service_data_type_unregister(&SCRIPT_OPT);
 
-	D_("initng_simple_plugin: module_unload();\n");
+	D_("initng_simple_plugin: module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_LAUNCH, &initng_bash);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/chdir/initng_chdir.c ./plugins/chdir/initng_chdir.c
--- /tmp/initng-0.6.10.2/plugins/chdir/initng_chdir.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/chdir/initng_chdir.c	2016-07-13 12:08:47.753159761 +0200
@@ -53,20 +53,20 @@ static int do_chdir(s_event * event)
 	assert(data->service->name);
 	assert(data->process);
 
-	D_("do_chdir!\n");
+	D_("do_chdir!\r\n");
 
 	if (!(tmp = get_string(&CHDIR, data->service)))
 	{
-		D_("CHDIR not set!\n");
+		D_("CHDIR not set!\r\n");
 		return (TRUE);
 	}
 
 	tmp_fixed = fix_variables(tmp, data->service);
-	D_("CHDIR TO %s\n", tmp_fixed);
+	D_("CHDIR TO %s\r\n", tmp_fixed);
 
 	if (chdir(tmp_fixed) == -1)
 	{
-		F_("Chdir failed with %s\n", strerror(errno));
+		F_("Chdir failed with %s\r\n", strerror(errno));
 		fix_free(tmp_fixed, tmp);
 		return (FAIL);
 	}
@@ -78,10 +78,10 @@ static int do_chdir(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init(CHDIR);\n");
+	D_("module_init(CHDIR);\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -91,7 +91,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload(CHDIR);\n");
+	D_("module_unload(CHDIR);\r\n");
 	initng_service_data_type_unregister(&CHDIR);
 	initng_event_hook_unregister(&EVENT_AFTER_FORK, &do_chdir);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/chroot/initng_chroot.c ./plugins/chroot/initng_chroot.c
--- /tmp/initng-0.6.10.2/plugins/chroot/initng_chroot.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/chroot/initng_chroot.c	2016-07-13 12:08:47.753159761 +0200
@@ -54,10 +54,10 @@ static int do_chroot(s_event * event)
 	assert(data->service->name);
 	assert(data->process);
 
-	D_("do_suid!\n");
+	D_("do_suid!\r\n");
 	if (!(tmp = get_string(&CHROOT, data->service)))
 	{
-		D_("SUID not set!\n");
+		D_("SUID not set!\r\n");
 		return (TRUE);
 	}
 
@@ -66,13 +66,13 @@ static int do_chroot(s_event * event)
 
 	if (chdir(tmp_fixed) == -1)
 	{
-		F_("Chdir %s failed with %s\n", tmp_fixed, strerror(errno));
+		F_("Chdir %s failed with %s\r\n", tmp_fixed, strerror(errno));
 		fix_free(tmp_fixed, tmp);
 		return (FAIL);
 	}
 	if (chroot(tmp_fixed) == -1)
 	{
-		F_("Chroot %s failed with %s\n", tmp_fixed, strerror(errno));
+		F_("Chroot %s failed with %s\r\n", tmp_fixed, strerror(errno));
 		fix_free(tmp_fixed, tmp);
 		return (FAIL);
 	}
@@ -82,10 +82,10 @@ static int do_chroot(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -95,7 +95,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&CHROOT);
 	initng_event_hook_unregister(&EVENT_AFTER_FORK, &do_chroot);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/conflict/initng_conflict.c ./plugins/conflict/initng_conflict.c
--- /tmp/initng-0.6.10.2/plugins/conflict/initng_conflict.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/conflict/initng_conflict.c	2016-07-13 12:08:47.753159761 +0200
@@ -63,7 +63,7 @@ static int check_conflict(s_event * even
 	{
 		active_db_h *s = NULL;
 
-		/*D_("Making sure that %s is not running.\n", conflict_entry); */
+		/*D_("Making sure that %s is not running.\r\n", conflict_entry); */
 		char *fixed = fix_variables(conflict_entry, service);
 
 		s = initng_active_db_find_by_name(fixed);
@@ -72,14 +72,14 @@ static int check_conflict(s_event * even
 		/* this is actually good */
 		if (!s)
 		{
-			/*D_("Conflict not found!\n"); */
+			/*D_("Conflict not found!\r\n"); */
 			continue;
 		}
 
 		if (IS_UP(s) || IS_STARTING(s))
 		{
 			initng_common_mark_service(service, &CONFLICTING);
-			F_("Service \"%s\" is conflicting with service \"%s\"!\n",
+			F_("Service \"%s\" is conflicting with service \"%s\"!\r\n",
 			   service->name, s->name);
 			return (FALSE);
 		}
@@ -89,10 +89,10 @@ static int check_conflict(s_event * even
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/cpout/initng_colorprint_out.c ./plugins/cpout/initng_colorprint_out.c
--- /tmp/initng-0.6.10.2/plugins/cpout/initng_colorprint_out.c	2007-11-05 07:41:57.000000000 +0100
+++ ./plugins/cpout/initng_colorprint_out.c	2016-07-13 18:53:13.666973513 +0200
@@ -41,11 +41,6 @@
 
 INITNG_PLUGIN_MACRO;
 
-#define CPE C_RED " %3i%% " C_OFF C_BLUE "%s" C_OFF MOVE_TO_R
-#define CP C_RED "      " C_OFF C_BLUE "%s" C_OFF MOVE_TO_R
-#define PE " %3i%% %s"
-#define P "      %s"
-
 active_db_h *lastservice;
 ptype_h *last_ptype;
 
@@ -60,7 +55,7 @@ int quiet_when_up = FALSE;
 static void clear_lastserv(void)
 {
 	if (lastservice)
-		cprintf("\n");
+		cprintf("\r\n");
 	lastservice = NULL;
 	last_ptype = NULL;
 }
@@ -81,20 +76,17 @@ static void out_service_done(active_db_h
 		if (g.sys_state == STATE_STARTING)
 		{
 			if (color)
-				cprintf(CPE "\t[" C_GREEN "done" C_OFF
-						"]  \t( done in %ims )\n",
+				cprintf(C_RED " %3i%% " C_OFF "[" C_GREEN "done" C_OFF "]" C_BLUE "     %s " C_OFF MOVE_TO_R "( done in %ims )\r\n",
 						initng_active_db_percent_started(), s->name, t);
 			else
-				cprintf(PE "\t[done]  \t( done in %ims )\n",
-						initng_active_db_percent_started(), s->name, t);
+				cprintf(" %3i%% [done]     %s ( done in %ims )\r\n", initng_active_db_percent_started(), s->name, t);
 		}
 		else
 		{
 			if (color)
-				cprintf(CP "\t[" C_GREEN "done" C_OFF
-						"]  \t( done in %ims )\n", s->name, t);
+				cprintf("      [" C_GREEN "done" C_OFF "]" C_BLUE "     %s " C_OFF MOVE_TO_R "( done in %ims )\r\n", s->name, t);
 			else
-				cprintf(P "\t[done]  \t( done in %ims )\n", s->name, t);
+				cprintf("      [done]     %s ( done in %ims )\r\n", s->name, t);
 		}
 	}
 	else
@@ -102,18 +94,17 @@ static void out_service_done(active_db_h
 		if (g.sys_state == STATE_STARTING)
 		{
 			if (color)
-				cprintf(CPE "\t[" C_GREEN "done" C_OFF "]\n",
+				cprintf(C_RED " %3i%% " C_OFF "[" C_GREEN "done" C_OFF "]" C_BLUE "     %s" C_OFF "\r\n",
 						initng_active_db_percent_started(), s->name);
 			else
-				cprintf(PE "\t[done]\n",
-						initng_active_db_percent_started(), s->name);
+				cprintf(" %3i%% [done]     %s\r\n", initng_active_db_percent_started(), s->name);
 		}
 		else
 		{
 			if (color)
-				cprintf(CP "\t[" C_GREEN "done" C_OFF "]\n", s->name);
+				cprintf("      [" C_GREEN "done" C_OFF "]" C_BLUE "     %s" C_OFF "\r\n", s->name);
 			else
-				cprintf(P "\t[done]\n", s->name);
+				cprintf("      [done]     %s\r\n", s->name);
 		}
 	}
 
@@ -121,7 +112,7 @@ static void out_service_done(active_db_h
 	fflush(output);
 }
 
-static void opt_service_stop_p(active_db_h * s, const char *is)
+static void opt_service_stop_p(active_db_h * s)
 {
 	int t;
 
@@ -136,23 +127,18 @@ static void opt_service_stop_p(active_db
 		if (g.sys_state == STATE_STOPPING)
 		{
 			if (color)
-				cprintf(CPE "\t[" C_GREEN "%s" C_OFF
-						"]\t( %s in %ims )\n",
-						initng_active_db_percent_stopped(), s->name, is, is,
-						t);
+				cprintf(C_RED " %3i%% " C_OFF "[" C_GREEN "stopped" C_OFF "]" C_BLUE "  %s " C_OFF MOVE_TO_R "( stopped in %ims )\r\n",
+						initng_active_db_percent_stopped(), s->name, t);
 			else
-				cprintf(PE "\t[%s]\t( %s in %ims )\n",
-						initng_active_db_percent_stopped(), s->name, is, is,
-						t);
+				cprintf(" %3i%% [stopped]  %s ( stopped in %ims )\r\n", initng_active_db_percent_stopped(), s->name, t);
 
 		}
 		else
 		{
 			if (color)
-				cprintf(CP "\t[" C_GREEN "%s" C_OFF
-						"]\t( %s in %ims )\n", s->name, is, is, t);
+				cprintf("      [" C_GREEN "stopped" C_OFF "]" C_BLUE "  %s " C_OFF MOVE_TO_R "( stopped in %ims )\r\n", s->name, t);
 			else
-				cprintf(P "\t[%s]\t( %s in %ims )\n", s->name, is, is, t);
+				cprintf("      [stopped]  %s ( stopped in %ims )\r\n", s->name, t);
 		}
 	}
 	else
@@ -160,18 +146,17 @@ static void opt_service_stop_p(active_db
 		if (g.sys_state == STATE_STOPPING)
 		{
 			if (color)
-				cprintf(CPE "\t[" C_GREEN "%s" C_OFF "]\n",
-						initng_active_db_percent_stopped(), s->name, is);
+				cprintf(C_RED " %3i%% " C_OFF "[" C_GREEN "stopped" C_OFF "]" C_BLUE "  %s" C_OFF "\r\n",
+						initng_active_db_percent_stopped(), s->name);
 			else
-				cprintf(PE "\t[%s]\n",
-						initng_active_db_percent_stopped(), s->name, is);
+				cprintf(" %3i%% [stopped]  %s\r\n", initng_active_db_percent_stopped(), s->name);
 		}
 		else
 		{
 			if (color)
-				cprintf(CP "\t[" C_GREEN "%s" C_OFF "]\n", s->name, is);
+				cprintf("      [" C_GREEN "stopped" C_OFF "]" C_BLUE "  %s" C_OFF "\r\n", s->name);
 			else
-				cprintf(P "\t[%s]\n", s->name, is);
+				cprintf("      [stopped]  %s\r\n", s->name);
 		}
 	}
 
@@ -201,7 +186,7 @@ static int print_output(s_event * event)
 
 	if (IS_DOWN(service))
 	{
-		opt_service_stop_p(service, "stopped");
+		opt_service_stop_p(service);
 		return (TRUE);
 	}
 
@@ -212,9 +197,10 @@ static int print_output(s_event * event)
 		 	return (TRUE); */
 		clear_lastserv();
 		if (color)
-			cprintf(CP "\t[" C_GREEN "starting" C_OFF "]\n", service->name);
+			cprintf("      [" C_GREEN "starting" C_OFF "]" C_BLUE " %s" C_OFF "\r\n", service->name);
 		else
-			cprintf(P "\t[starting]\n", service->name);
+			cprintf("      [starting] %s\r\n", service->name);
+
 		fflush(output);
 		return (TRUE);
 	}
@@ -235,20 +221,18 @@ static int print_output(s_event * event)
 		if (t > 1 && g.sys_state == STATE_STARTING)
 		{
 			if (color)
-				cprintf(CPE "\t[" C_GREEN "started" C_OFF "]\t( pid: %i )\n",
+				cprintf(C_RED " %3i%% " C_OFF "[" C_GREEN "started" C_OFF "]" C_BLUE "  %s " C_OFF MOVE_TO_R "( pid: %i )\r\n",
 						t, service->name, process->pid);
 			else
-				cprintf(PE "\t[started]\t( pid: %i )\n",
-						t, service->name, process->pid);
+				cprintf(" %3i%% [started]  %s ( pid: %i )\r\n", t, service->name, process->pid);
 		}
 		else
 		{
 			if (color)
-				cprintf(CP "\t[" C_GREEN "started" C_OFF "]\t( pid: %i )\n",
+				cprintf("      [" C_GREEN "started" C_OFF "]" C_BLUE "  %s " C_OFF MOVE_TO_R "( pid: %i )\r\n",
 						service->name, process->pid);
 			else
-				cprintf(P "\t[started]\t( pid: %i )\n",
-						service->name, process->pid);
+				cprintf("      [started]  %s ( pid: %i )\r\n", service->name, process->pid);
 		}
 		fflush(output);
 		return (TRUE);
@@ -265,9 +249,10 @@ static int print_output(s_event * event)
 
 		clear_lastserv();
 		if (color)
-			cprintf(CP "\t[" C_GREEN "stopping" C_OFF "]\n", service->name);
+			cprintf("      [" C_GREEN "stopping" C_OFF "]" C_BLUE " %s" C_OFF "\r\n", service->name);
 		else
-			cprintf(P "\t[stopping]\n", service->name);
+			cprintf("      [stopping] %s\r\n", service->name);
+
 		fflush(output);
 		return (TRUE);
 	}
@@ -277,11 +262,11 @@ static int print_output(s_event * event)
 	{
 		clear_lastserv();
 		if (color)
-			cprintf(CP "\t[" C_RED "%s" C_OFF "]\n", service->name,
-					service->current_state->state_name);
+			cprintf("      [" C_RED "%s" C_OFF "]" C_BLUE " %s" C_OFF "\r\n", service->current_state->state_name,
+					service->name);
 		else
-			cprintf(P "\t[%s]\n", service->name,
-					service->current_state->state_name);
+			cprintf("      [%s] %s\r\n", service->current_state->state_name,
+					service->name);
 	}
 
 	fflush(output);
@@ -301,35 +286,35 @@ static int print_system_state(s_event *
 	{
 		case STATE_STARTING:
 			clear_lastserv();
-			cprintf("\tSystem is starting up!\n\n");
+			cprintf("    System is starting up!\r\n\r\n");
 			break;
 		case STATE_STOPPING:
 			clear_lastserv();
-			cprintf("\tSystem is going down!\n\n");
+			cprintf("    System is going down!\r\n\r\n");
 			break;
 		case STATE_ASE:
 			clear_lastserv();
-			cprintf("\tLast process exited!\n\n");
+			cprintf("    Last process exited!\r\n\r\n");
 			break;
 		case STATE_EXIT:
 			clear_lastserv();
-			cprintf("\tInitng exiting!\n\n");
+			cprintf("    Initng exiting!\r\n\r\n");
 			break;
 		case STATE_RESTART:
 			clear_lastserv();
-			cprintf("\tInitng restarting!\n\n");
+			cprintf("    Initng restarting!\r\n\r\n");
 			break;
 		case STATE_REBOOT:
 			clear_lastserv();
-			cprintf("\n\tYour system will now REBOOT!\n");
+			cprintf("\r\n    Your system will now REBOOT!\r\n");
 			break;
 		case STATE_HALT:
 			clear_lastserv();
-			cprintf("\n\tYour system will now HALT!\n");
+			cprintf("\r\n    Your system will now HALT!\r\n");
 			break;
 		case STATE_POWEROFF:
 			clear_lastserv();
-			cprintf("\n\tYour system will now POWER_OFF!\n");
+			cprintf("\r\n    Your system will now POWER_OFF!\r\n");
 			break;
 		case STATE_UP:
 			{
@@ -345,14 +330,14 @@ static int print_system_state(s_event *
 				/* this is not critical, its youst fr runlevel up in info */
 				if (!runl)
 				{
-					D_("Runlevel %s not found.\n", g.runlevel);
+					D_("Runlevel %s not found.\r\n", g.runlevel);
 					return (FALSE);
 				}
 
 				gettimeofday(&now, NULL);
 
 				clear_lastserv();
-				cprintf("\n\n\trunlevel \"%s\" up in, %ims.\n\n",
+				cprintf("\r\n\r\n    runlevel \"%s\" up in, %ims.\r\n\r\n",
 						g.runlevel, MS_DIFF(now, runl->last_rought_time));
 
 
@@ -376,7 +361,7 @@ static int print_system_state(s_event *
 						}
 					}
 					if(f==1)
-						cprintf("\n\n");
+						cprintf("\r\n\r\n");
 				}
 
 				break;
@@ -386,7 +371,7 @@ static int print_system_state(s_event *
 	}
 
 	fflush(output);
-	D_("print_system_state(): new system state: %i\n", state);
+	D_("print_system_state(): new system state: %i\r\n", *state);
 
 	return (TRUE);
 }
@@ -417,11 +402,11 @@ static int print_program_output(s_event
 	if (quiet_when_up && g.sys_state == STATE_UP)
 		return (TRUE);
 
-	D_(" from service \"%s\"\n", data->service->name);
+	D_(" from service \"%s\"\r\n", data->service->name);
 	/*
-	   cprintf("buffer_pos: %i\n", data->buffer_pos);
-	   cprintf("datalen: %i\n", datalen);
-	   cprintf("Buffer: \n################\n%s\n##########\n\n",data->process->buffer);
+	   cprintf("buffer_pos: %i\r\n", data->buffer_pos);
+	   cprintf("datalen: %i\r\n", datalen);
+	   cprintf("Buffer: \r\n################\r\n%s\r\n##########\r\n\r\n",data->process->buffer);
 	 */
 	/* a first while loop that sorts out crap */
 	while (data->buffer_pos[i] != '\0')
@@ -435,8 +420,7 @@ static int print_program_output(s_event
 		}
 
 		/* if there are stupid tokens, go to next char, and run while again. */
-		if (data->buffer_pos[i] == ' ' || data->buffer_pos[i] == '\n'
-			|| data->buffer_pos[i] == '\t')
+		if (data->buffer_pos[i] == '\n')
 		{
 			i++;
 			continue;
@@ -457,19 +441,19 @@ static int print_program_output(s_event
 	{
 		clear_lastserv();
 		if (color)
-			cprintf("\n" C_CYAN " %s %s:" C_OFF, data->service->name, data->process->pt->name);
+			cprintf("\r\n" C_CYAN " %s %s:" C_OFF, data->service->name, data->process->pt->name);
 		else
-			cprintf("\n %s %s:", data->service->name, data->process->pt->name);
+			cprintf("\r\n %s %s:", data->service->name, data->process->pt->name);
+
 		/* print our special indented newline */
-		putc('\n', output);
-		putc(' ', output);
-		putc(' ', output);
+		fprintf(output, "\r\n  ");
+
 		lastservice = data->service;
 		last_ptype = data->process->pt;
 	}
 	else
 	{
-		D_("Lastservice == service, won't print header.\n");
+		D_("Lastservice == service, won't print header.\r\n");
 	}
 
 
@@ -488,14 +472,8 @@ static int print_program_output(s_event
 		if (data->buffer_pos[i] == '\n')
 		{
 			/* print our special indented newline instead */
-			putc('\n', output);
-			putc(' ', output);
-			putc(' ', output);
+			fprintf(output, "\n  ");
 			i++;
-			/* skip spaces, on newline. */
-			while (data->buffer_pos[i]
-				   && (data->buffer_pos[i] == ' ' || data->buffer_pos[i] == '\t'))
-				i++;
 			continue;
 		}
 
@@ -530,10 +508,10 @@ static int cp_print_error(s_event * even
 			t = time(0);
 			ts = localtime(&t);
 #ifdef DEBUG
-			fprintf(output, "\n\n ** \"%s\", %s()  line:%i:\n", data->file, data->func,
+			fprintf(output, "\r\n\r\n ** \"%s\", %s()  line:%i:\r\n", data->file, data->func,
 					data->line);
 #endif
-			fprintf(output, " %.2i:%.2i:%.2i -- %s:\t", ts->tm_hour,
+			fprintf(output, " %.2i:%.2i:%.2i -- %s:    ", ts->tm_hour,
 					ts->tm_min, ts->tm_sec, data->mt == MSG_FAIL ? "FAIL" : "WARN");
 			vfprintf(output, data->format, va);
 			break;
@@ -554,7 +532,7 @@ int module_init(int api_version)
 
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -575,7 +553,7 @@ int module_init(int api_version)
 			(strstr(g.Argv[i], "cpout_console=")
 			 || strstr(g.Argv[i], "cpout_console:")))
 		{
-			printf("cpout_console=%s\n", &g.Argv[i][14]);
+			printf("cpout_console=%s\r\n", &g.Argv[i][14]);
 			output = fopen(&g.Argv[i][14], "w");
 
 			initng_fd_set_cloexec(fileno(output));
@@ -603,19 +581,18 @@ int module_init(int api_version)
 
 	if (color)
 	{
-		cprintf("\n" C_BLUE "\tNext Generation Init version ( %s )" C_OFF,
-				INITNG_VERSION);
-		cprintf("\n" C_GREEN "\thttp://www.initng.org\n" C_OFF);
+		cprintf("\r\n" C_BLUE "    Next Generation Init version ( %s )" C_OFF, INITNG_VERSION);
+		cprintf("\r\n" C_GREEN "    http://www.initng.org\r\n" C_OFF);
 	}
 	else
 	{
-		cprintf("\n\tNext Generation Init version ( %s )", INITNG_VERSION);
-		cprintf("\n\thttp://www.initng.org\n");
+		cprintf("\r\n    Next Generation Init version ( %s )", INITNG_VERSION);
+		cprintf("\r\n    http://www.initng.org\r\n");
 	}
-	cprintf("\tAuthor: Jimmy Wennlund <jimmy.wennlund@gmail.com>\n");
-	cprintf("\tIf you find initng useful, please consider a small donation.\n\n");
+	cprintf("    Author: Jimmy Wennlund <jimmy.wennlund@gmail.com>\r\n");
+	cprintf("    If you find initng useful, please consider a small donation.\r\n\r\n");
 	fflush(output);
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	lastservice = NULL;
 	initng_event_hook_register(&EVENT_ERROR_MESSAGE, &cp_print_error);
 	initng_event_hook_register(&EVENT_IS_CHANGE, &print_output);
@@ -626,7 +603,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("color_out: module_unload();\n");
+	D_("color_out: module_unload();\r\n");
 	if (g.i_am != I_AM_INIT && g.i_am != I_AM_FAKE_INIT)
 		return;
 
@@ -635,7 +612,7 @@ void module_unload(void)
 	initng_event_hook_unregister(&EVENT_SYSTEM_CHANGE, &print_system_state);
 	initng_event_hook_unregister(&EVENT_BUFFER_WATCHER, &print_program_output);
 	initng_event_hook_unregister(&EVENT_ERROR_MESSAGE, &cp_print_error);
-	cprintf("  Goodbye\n");
+	cprintf("  Goodbye\r\n");
 	fflush(output);
 
 	/* close output fifo */
diff -rupN /tmp/initng-0.6.10.2/plugins/cpout/initng_colorprint_out.h ./plugins/cpout/initng_colorprint_out.h
--- /tmp/initng-0.6.10.2/plugins/cpout/initng_colorprint_out.h	2006-05-18 12:11:04.000000000 +0200
+++ ./plugins/cpout/initng_colorprint_out.h	2016-07-13 12:08:47.753159761 +0200
@@ -25,7 +25,7 @@
 #define C_RED "\033[01;31m"
 #define C_GREEN "\033[32;01m"
 #define C_CYAN "\033[36;01m"
-#define MOVE_TO_R "\033[36G"
+#define MOVE_TO_R "\033[50G"
 #define MOVE_TO_P "\033[A\033[90G"
 
 #endif
diff -rupN /tmp/initng-0.6.10.2/plugins/critical/initng_critical.c ./plugins/critical/initng_critical.c
--- /tmp/initng-0.6.10.2/plugins/critical/initng_critical.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/critical/initng_critical.c	2016-07-13 12:08:47.753159761 +0200
@@ -61,7 +61,7 @@ static int check_critical(s_event * even
 	if (!is(&CRITICAL, service))
 		return (TRUE);
 
-	F_("Service %s failed, this is critical, going su_login!!\n",
+	F_("Service %s failed, this is critical, going su_login!!\r\n",
 	   service->name);
 
 	initng_main_su_login();
@@ -85,17 +85,17 @@ static int check_critical(s_event * even
 	/* Make sure full runlevel starting fine */
 	if (!initng_active_db_find_by_exact_name(g.runlevel))
 		if (!initng_handler_start_new_service_named(g.runlevel))
-			F_("runlevel \"%s\" could not be executed!\n", g.runlevel);
+			F_("runlevel \"%s\" could not be executed!\r\n", g.runlevel);
 
 	return (FALSE);
 }
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -106,7 +106,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&CRITICAL);
 	initng_event_hook_unregister(&EVENT_IS_CHANGE, &check_critical);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/ctrlaltdel/initng_ctrlaltdel.c ./plugins/ctrlaltdel/initng_ctrlaltdel.c
--- /tmp/initng-0.6.10.2/plugins/ctrlaltdel/initng_ctrlaltdel.c	2007-05-19 22:32:58.000000000 +0200
+++ ./plugins/ctrlaltdel/initng_ctrlaltdel.c	2016-07-13 12:08:47.753159761 +0200
@@ -65,10 +65,10 @@ static int ctrlaltdel(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -78,6 +78,6 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_SIGNAL, &ctrlaltdel);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/daemon/initng_daemon.c ./plugins/daemon/initng_daemon.c
--- /tmp/initng-0.6.10.2/plugins/daemon/initng_daemon.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/daemon/initng_daemon.c	2016-07-13 12:08:47.753159761 +0200
@@ -353,7 +353,7 @@ a_state_h DAEMON_RESPAWN_RATE_EXCEEDED =
 /* This are run, when initng wants to start a daemon */
 static int start_DAEMON(active_db_h * daemon_to_start)
 {
-	D_("Starting daemon %s.\n", daemon_to_start->name);
+	D_("Starting daemon %s.\r\n", daemon_to_start->name);
 
 	/* if its waiting for deps to stop, we can reset it running again */
 	if (IS_MARK(daemon_to_start, &DAEMON_WAITING_FOR_STOP_DEP))
@@ -365,7 +365,7 @@ static int start_DAEMON(active_db_h * da
 	/* mark it WAITING_FOR_START_DEP and wait */
 	if (!initng_common_mark_service(daemon_to_start, &DAEMON_START_MARKED))
 	{
-		W_("mark_daemon DAEMON_START_MARKED failed for daemon %s\n",
+		W_("mark_daemon DAEMON_START_MARKED failed for daemon %s\r\n",
 		   daemon_to_start->name);
 		return (FALSE);
 	}
@@ -389,7 +389,7 @@ static int stop_DAEMON(active_db_h * dae
 	/* set stopping */
 	if (!initng_common_mark_service(daemon, &DAEMON_STOP_MARKED))
 	{
-		W_("mark_service DAEMON_STOP_MARKED failed for daemon %s.\n",
+		W_("mark_service DAEMON_STOP_MARKED failed for daemon %s.\r\n",
 		   daemon->name);
 		return (FALSE);
 	}
@@ -407,10 +407,10 @@ static int stop_DAEMON(active_db_h * dae
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -469,7 +469,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	/* Remove all added states */
 	initng_active_state_unregister(&DAEMON_START_MARKED);
@@ -580,7 +580,7 @@ static void handle_DAEMON_WAITING_FOR_ST
 	/* if system is shutting down, Don't start anything. */
 	if (g.sys_state != STATE_STARTING && g.sys_state != STATE_UP)
 	{
-		F_("Can't start daemon, when system status is: %i !\n", g.sys_state);
+		F_("Can't start daemon, when system status is: %i !\r\n", g.sys_state);
 		initng_common_mark_service(daemon, &DAEMON_STOPPED);
 		return;
 	}
@@ -619,10 +619,10 @@ static void init_DAEMON_START_DEPS_MET(a
 	{
 		pid_t pid = 0;
 
-		D_("getting pid by PIDOF!\n");
+		D_("getting pid by PIDOF!\r\n");
 		/* get pid by process name */
 		pid = get_pidof(daemon);
-		D_("result : %d\n", pid);
+		D_("result : %d\r\n", pid);
 
 		/* if the pid really exist on the system */
 		if (pid > 1 && kill(pid, 0) == 0)
@@ -632,7 +632,7 @@ static void init_DAEMON_START_DEPS_MET(a
 
 			if (existing_process)
 			{
-				W_("Daemon for service %s was already running, adding it to service daemon process list instead of starting a new one.\n", daemon->name);
+				W_("Daemon for service %s was already running, adding it to service daemon process list instead of starting a new one.\r\n", daemon->name);
 
 				/* set process status */
 				existing_process->pid = pid;
@@ -651,12 +651,12 @@ static void init_DAEMON_START_DEPS_MET(a
 	switch (initng_execute_launch(daemon, &T_DAEMON, NULL))
 	{
 		case FALSE:
-			F_("Did not find a service->\"daemon\" entry to run!\n",
+			F_("Did not find a service->\"daemon\" entry to run!\r\n",
 			   daemon->name);
 			initng_common_mark_service(daemon, &DAEMON_FAIL_START_LAUNCH);
 			return;
 		case FAIL:
-			F_("Service %s, could not launch service->\"daemon\"\n",
+			F_("Service %s, could not launch service->\"daemon\"\r\n",
 			   daemon->name);
 			initng_common_mark_service(daemon, &DAEMON_FAIL_START_NONEXIST);
 			return;
@@ -675,11 +675,11 @@ static void init_DAEMON_START_DEPS_MET(a
 	/* If daemon is a forking one, let it stay DAEMON_LAUNCH */
 	if (is(&FORKS, daemon))
 	{
-		D_("FORKS is set, will wait for return.\n");
+		D_("FORKS is set, will wait for return.\r\n");
 		return;
 	}
 
-	D_("FORKS not set, setting to DAEMON_RUNNING directly.\n");
+	D_("FORKS not set, setting to DAEMON_RUNNING directly.\r\n");
 
 	/* check with up_check */
 	if (initng_depend_up_check(daemon) != TRUE)
@@ -699,21 +699,21 @@ static void init_DAEMON_STOP_DEPS_MET(ac
 	/* find the daemon, and check so it still exits */
 	if (!(process = initng_process_db_get(&T_DAEMON, service)))
 	{
-		F_("Could not find process to kill!\n");
+		F_("Could not find process to kill!\r\n");
 		return;
 	}
 
 	/* Check so process have a valid pid */
 	if (process->pid <= 0)
 	{
-		D_("Pid is unvalid, marked as DAEMON_STOPPED\n");
+		D_("Pid is unvalid, marked as DAEMON_STOPPED\r\n");
 		initng_common_mark_service(service, &DAEMON_STOPPED);
 		return;
 	}
 
 	if (kill(process->pid, 0) && errno == ESRCH)
 	{
-		D_("Dont exist a process with pid %i, mark as DAEMON_STOPPED\n",
+		D_("Dont exist a process with pid %i, mark as DAEMON_STOPPED\r\n",
 		   process->pid);
 		initng_common_mark_service(service, &DAEMON_STOPPED);
 		return;
@@ -724,7 +724,7 @@ static void init_DAEMON_STOP_DEPS_MET(ac
 	switch (initng_execute_launch(service, &T_KILL, NULL))
 	{
 		case FAIL:
-			F_("  --  (%s): fail launch stop!\n", service->name);
+			F_("  --  (%s): fail launch stop!\r\n", service->name);
 			initng_common_mark_service(service, &DAEMON_FAIL_STOPPING);
 			return;
 		case FALSE:
@@ -768,7 +768,7 @@ static void timeout_DAEMON_WAIT_FOR_PID_
 	{
 		process_h *process = NULL;
 
-		F_("Service \"%s\" wait for pidfile timed out! Will kill daemon now.\n", s->name);
+		F_("Service \"%s\" wait for pidfile timed out! Will kill daemon now.\r\n", s->name);
 
 		initng_common_mark_service(s, &DAEMON_FAIL_START_TIMEOUT_PIDFILE);
 		kill_daemon(s, SIGKILL);
@@ -807,7 +807,7 @@ static void init_DAEMON_WAIT_RESP_TOUT(a
 		respawn_pause = get_int(&RESPAWN_PAUSE, service);
 	}
 
-	D_("Will sleep %i seconds before respawning!\n", respawn_pause);
+	D_("Will sleep %i seconds before respawning!\r\n", respawn_pause);
 	initng_handler_set_alarm(service, respawn_pause);
 }
 
@@ -840,7 +840,7 @@ static void init_DAEMON_TERM(active_db_h
 /* when DAEMON_TERM timeout, kill it instead */
 static void timeout_DAEMON_TERM(active_db_h * daemon)
 {
-	F_("Service %s TERM_TIMEOUT reached!, sending KILL signal.\n",
+	F_("Service %s TERM_TIMEOUT reached!, sending KILL signal.\r\n",
 	   daemon->name);
 	kill_daemon(daemon, SIGKILL);
 
@@ -857,7 +857,7 @@ static void init_DAEMON_KILL(active_db_h
 /* set SIGKILL on every timeout */
 static void timeout_DAEMON_KILL(active_db_h * daemon)
 {
-	F_("Service %s KILL_TIMEOUT of %i seconds reached! (%i seconds passed), sending another KILL signal.\n", daemon->name, DEFAULT_KILL_TIMEOUT, g.now.tv_sec - daemon->time_current_state.tv_sec);
+	F_("Service %s KILL_TIMEOUT of %i seconds reached! (%i seconds passed), sending another KILL signal.\r\n", daemon->name, DEFAULT_KILL_TIMEOUT, g.now.tv_sec - daemon->time_current_state.tv_sec);
 	kill_daemon(daemon, SIGKILL);
 
 	/* Dont be afraid to kill again */
@@ -879,7 +879,7 @@ static void handle_killed_daemon(active_
 	assert(process);
 	int rcode;
 
-	D_("handle_killed_start(%s): initial status: \"%s\".\n",
+	D_("handle_killed_start(%s): initial status: \"%s\".\r\n",
 	   daemon->name, daemon->current_state->state_name);
 
 	/*
@@ -961,14 +961,14 @@ static void kill_daemon(active_db_h * se
 	/* make sure we got a process */
 	if (!(process = initng_process_db_get(&T_DAEMON, service)))
 	{
-		F_("Service doesn't have any processes, don't know how to kill then.\n");
+		F_("Service doesn't have any processes, don't know how to kill then.\r\n");
 		return;
 	}
 
 	/* check so that pid is good */
 	if (process->pid <= 0)
 	{
-		F_("Bad PID %d in database!\n", process->pid);
+		F_("Bad PID %d in database!\r\n", process->pid);
 		initng_process_db_free(process);
 		return;
 	}
@@ -976,7 +976,7 @@ static void kill_daemon(active_db_h * se
 	/* check so there exits an process with this pid */
 	if (kill(process->pid, 0) && errno == ESRCH)
 	{
-		F_("Trying to kill a service (%s) with a pid (%d), but there exists no process with this pid!\n", service->name, process->pid);
+		F_("Trying to kill a service (%s) with a pid (%d), but there exists no process with this pid!\r\n", service->name, process->pid);
 		initng_process_db_free(process);
 		return;
 	}
@@ -984,7 +984,7 @@ static void kill_daemon(active_db_h * se
 	/* if system is not stopping, generate a warning */
 	/*if (g.sys_state != STATE_STOPPING)
 	   {
-	   W_(" Sending the process %i of %s, the SIGTERM signal!\n",
+	   W_(" Sending the process %i of %s, the SIGTERM signal!\r\n",
 	   process->pid, service->name);
 	   } */
 
@@ -1007,7 +1007,7 @@ static pid_t pid_of(const char *name)
 	/* maximum possible length for string "/proc/12232/stat" can be */
 #define BUFF_SIZE 512
 
-	D_("Will fetch pid of \"%s\"\n", name);
+	D_("Will fetch pid of \"%s\"\r\n", name);
 
 	/* Open /proc or fail */
 	if (!(dir = opendir("/proc")))
@@ -1027,12 +1027,12 @@ static pid_t pid_of(const char *name)
 
 		/* Fix a string, that matches the full path of the stat file */
 		snprintf(buf, BUFF_SIZE, "/proc/%d/stat", pid);
-		D_("To open: %s\n", buf);
+		D_("To open: %s\r\n", buf);
 
 		/* Read SID & statname from it or fail */
 		if (!(fp = fopen(buf, "r")))
 		{
-			W_("Could not open %s.\n", buf);
+			W_("Could not open %s.\r\n", buf);
 			continue;
 		}
 
@@ -1072,7 +1072,7 @@ static pid_t pid_of(const char *name)
 		/* compare the name in the '(' ')' chars with the process name we are looking for */
 		if (strncmp(s, name, len) == 0)
 		{
-			D_("Found %s with pid %d\n", name, pid);
+			D_("Found %s with pid %d\r\n", name, pid);
 
 			/* make sure the dir (/proc) is closed. */
 			if (dir)
@@ -1087,7 +1087,7 @@ static pid_t pid_of(const char *name)
 	if (dir)
 		closedir(dir);
 
-	D_("Did not find a process with name \"%s\"\n", name);
+	D_("Did not find a process with name \"%s\"\r\n", name);
 	return (-1);
 }
 
@@ -1119,7 +1119,7 @@ static pid_t pid_from_file(const char *n
 	close(fd);
 	if (len < 1)
 	{
-		F_("Read 0 chars from %s, It's empty.\n", name);
+		F_("Read 0 chars from %s, It's empty.\r\n", name);
 		return (-1);
 	}
 
@@ -1179,7 +1179,7 @@ static pid_t get_pidfile(active_db_h * s
 		/* make sure the first char is a '/' so its a full path */
 		if (pidfile_fixed[0] != '/')
 		{
-			F_("%s has pid_file with relative path \"%s\"\n", s->name,
+			F_("%s has pid_file with relative path \"%s\"\r\n", s->name,
 			   pidfile_fixed);
 			/* check_valid_pidfile_path() can detect certain dangerous
 			   typos, but it can't prevent loading. Stop to be safe */
@@ -1218,13 +1218,13 @@ static void clear_pidfile(active_db_h *
 			if (pidfile_fixed[0] == '/')
 			{
 				if (unlink(pidfile_fixed) != 0 && errno != ENOENT)
-					F_("Could not remove stale pidfile \"%s\"\n",
+					F_("Could not remove stale pidfile \"%s\"\r\n",
 					   pidfile_fixed);
 				break;
 			}
 			else
 			{
-				F_("%s has pid_file with relative path \"%s\"\n", s->name,
+				F_("%s has pid_file with relative path \"%s\"\r\n", s->name,
 				   pidfile_fixed);
 				/* check_valid_pidfile_path() can detect certain dangerous
 				   typos, but it can't prevent loading. Stop to be safe */
@@ -1256,7 +1256,7 @@ static int check_valid_pidfile_path(s_ev
 	{
 		if (pidfile && pidfile[0] != '/' && pidfile[0] != '$')
 		{
-			F_("%s has pid_file with relative path \"%s\"\n", s->name,
+			F_("%s has pid_file with relative path \"%s\"\r\n", s->name,
 			   pidfile);
 			return (FAIL);
 		}
@@ -1290,14 +1290,14 @@ static int check_respawn(active_db_h * s
 	/* check if the service have respawn enabled */
 	if (!is(&RESPAWN, service))
 	{
-		D_("Service %s doesn't have RESPAWN flag set, won't respawn!\n");
+		D_("Service %s doesn't have RESPAWN flag set, won't respawn!\r\n");
 		return (FALSE);
 	}
 
 	/* get times */
 	if (is(&INTERNAL_LAST_RESPAWN, service))
 		last = (time_t) get_int(&INTERNAL_LAST_RESPAWN, service);
-	D_("Now: %i , Last: %i\n", g.now.tv_sec, last);
+	D_("Now: %i , Last: %i\r\n", g.now.tv_sec, last);
 
 	/* get respawn_rate if set */
 	if (is(&RESPAWN_RATE, service))
@@ -1311,7 +1311,7 @@ static int check_respawn(active_db_h * s
 		/* if times pased is less then respawn_rate */
 		if ((g.now.tv_sec - last) < respawn_rate)
 		{
-			W_("Won't respawn service %s, it was respawned %i seconds ago.\n",
+			W_("Won't respawn service %s, it was respawned %i seconds ago.\r\n",
 			   service->name, g.now.tv_sec - last);
 
 			initng_common_mark_service(service,
@@ -1335,33 +1335,33 @@ static int try_get_pid(active_db_h * s)
 {
 	pid_t pid = -1;
 
-	D_("Trying to get pid of %s\n", s->name);
+	D_("Trying to get pid of %s\r\n", s->name);
 
 	/* Try get the pid from PIDOF is set */
 	if (is(&PIDOF, s))
 	{
-		D_("getting pid by PIDOF!\n");
+		D_("getting pid by PIDOF!\r\n");
 		/* get pid by process name */
 		pid = get_pidof(s);
-		D_("result : %d\n", pid);
+		D_("result : %d\r\n", pid);
 	}
 	/* Try get the pid from PIDFILE if set */
 	else if (is(&PIDFILE, s))
 	{
-		D_("getting pid by PIDFILE!\n");
+		D_("getting pid by PIDFILE!\r\n");
 		pid = get_pidfile(s);
-		D_("result : %d\n", pid);
+		D_("result : %d\r\n", pid);
 	}
 	else
 	{
-		F_("No one of PIDOF or PIDFILE are set, but initng is waiting for a pid.\n");
+		F_("No one of PIDOF or PIDFILE are set, but initng is waiting for a pid.\r\n");
 		return (FALSE);
 	}
 
 	/* check if a process with that pid exits in the system */
 	if (pid > 0 && kill(pid, 0) < 0 && (errno == ESRCH))
 	{
-		F_("Got a non-existent pid %i for daemon \"%s\", maybe there is a stale pidfile around.", pid, s->name);
+		F_("Got a non-existent pid %i for daemon \"%s\", maybe there is a stale pidfile around.\r\n", pid, s->name);
 		pid = -1;							/* reset */
 	}
 	else if (pid > 0)
@@ -1371,7 +1371,7 @@ static int try_get_pid(active_db_h * s)
 		/* get the process to handle */
 		if (!(p = initng_process_db_get(&T_DAEMON, s)))
 		{
-			F_("Did not find a daemon process on this service!\n");
+			F_("Did not find a daemon process on this service!\r\n");
 			initng_common_mark_service(s, &DAEMON_UP_CHECK_FAILED);
 			return (FALSE);
 		}
diff -rupN /tmp/initng-0.6.10.2/plugins/daemon/test/test_pidfile.c ./plugins/daemon/test/test_pidfile.c
--- /tmp/initng-0.6.10.2/plugins/daemon/test/test_pidfile.c	2006-04-05 23:11:19.000000000 +0200
+++ ./plugins/daemon/test/test_pidfile.c	2016-07-13 12:08:47.753159761 +0200
@@ -11,7 +11,7 @@ static void set_pid_file(void)
 	fd = fopen(PIDFILE, "w+");
 	if (!fd)
 	{
-		printf("Could not open " PIDFILE " for writing!\n");
+		printf("Could not open " PIDFILE " for writing!\r\n");
 		return;
 	}
 	fprintf(fd, "%i", getpid());
@@ -23,21 +23,21 @@ int main(int argc, char **argv)
 	(void) argc;
 	(void) argv;
 	printf("This is a testing daemon pid %i, that will fork and leave pid in "
-		   PIDFILE ". \n", getpid());
+		   PIDFILE ". \r\n", getpid());
 
 
 	if (fork() == 0)
 	{
-		printf("This is fork, pid %i\n", getpid());
-		printf("Setting pid now!\n");
+		printf("This is fork, pid %i\r\n", getpid());
+		printf("Setting pid now!\r\n");
 		set_pid_file();
 		sleep(20);
-		printf("Child will now die!\n");
+		printf("Child will now die!\r\n");
 		unlink(PIDFILE);
 		_exit(1);
 	}
 
 	sleep(1);
-	printf("Fork launched!\n");
+	printf("Fork launched!\r\n");
 	return (0);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/daemon_clean/initng_daemon_clean.c ./plugins/daemon_clean/initng_daemon_clean.c
--- /tmp/initng-0.6.10.2/plugins/daemon_clean/initng_daemon_clean.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/daemon_clean/initng_daemon_clean.c	2016-07-13 12:08:47.753159761 +0200
@@ -61,7 +61,7 @@ static int on_kill(s_event * event)
 		return (FALSE);
 
 	/* start the T_DAEMON_CLEAN */
-	W_("%s %s has been killed!, executing DAEMON_CLEAN!\n", data->process->pt->name,
+	W_("%s %s has been killed!, executing DAEMON_CLEAN!\r\n", data->process->pt->name,
 	   data->service->name);
 	initng_execute_launch(data->service, &T_DAEMON_CLEAN, NULL);
 
@@ -74,10 +74,10 @@ static int on_kill(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -88,7 +88,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_HANDLE_KILLED, &on_kill);
 	initng_process_db_ptype_unregister(&T_DAEMON_CLEAN);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/dbus_event/dbus_nge.c ./plugins/dbus_event/dbus_nge.c
--- /tmp/initng-0.6.10.2/plugins/dbus_event/dbus_nge.c	2006-04-05 23:11:19.000000000 +0200
+++ ./plugins/dbus_event/dbus_nge.c	2016-07-13 12:08:47.753159761 +0200
@@ -17,7 +17,7 @@ int main(int argc, char **argv)
 	DBusError err;
 	int ret;
 
-	printf("Listening for initng-events\n");
+	printf("Listening for initng-events\r\n");
 
 	/* initialise the errors */
 	dbus_error_init(&err);
@@ -26,7 +26,7 @@ int main(int argc, char **argv)
 	conn = dbus_bus_get(DBUS_BUS_SYSTEM, &err);
 	if (dbus_error_is_set(&err))
 	{
-		fprintf(stderr, "Connection Error (%s)\n", err.message);
+		fprintf(stderr, "Connection Error (%s)\r\n", err.message);
 		dbus_error_free(&err);
 	}
 	if (NULL == conn)
@@ -39,7 +39,7 @@ int main(int argc, char **argv)
 								DBUS_NAME_FLAG_REPLACE_EXISTING, &err);
 	if (dbus_error_is_set(&err))
 	{
-		fprintf(stderr, "Name Error (%s)\n", err.message);
+		fprintf(stderr, "Name Error (%s)\r\n", err.message);
 		dbus_error_free(&err);
 	}
 	if (DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER != ret)
@@ -52,7 +52,7 @@ int main(int argc, char **argv)
 	dbus_connection_flush(conn);
 	if (dbus_error_is_set(&err))
 	{
-		fprintf(stderr, "Match Error (%s)\n", err.message);
+		fprintf(stderr, "Match Error (%s)\r\n", err.message);
 		exit(1);
 	}
 
@@ -80,7 +80,7 @@ int main(int argc, char **argv)
 
 			/* read the parameters */
 			if (!dbus_message_iter_init(msg, &args))
-				fprintf(stderr, "Message Has No Parameters\n");
+				fprintf(stderr, "Message Has No Parameters\r\n");
 
 			/* First interator is a string with service name */
 			if (dbus_message_iter_get_arg_type(&args) != DBUS_TYPE_STRING)
@@ -109,7 +109,7 @@ int main(int argc, char **argv)
 			dbus_message_iter_get_basic(&args, &state);
 
 
-			printf(" astatus_change service: \"%s\" is: \"%i\" state: \"%s\"\n", service, is, state);
+			printf(" astatus_change service: \"%s\" is: \"%i\" state: \"%s\"\r\n", service, is, state);
 		}
 
 		if (dbus_message_is_signal(msg, INTERFACE, "system_state_change"))
@@ -118,14 +118,14 @@ int main(int argc, char **argv)
 
 			/* read the parameters */
 			if (!dbus_message_iter_init(msg, &args))
-				fprintf(stderr, "Message Has No Parameters\n");
+				fprintf(stderr, "Message Has No Parameters\r\n");
 
 			/* Second value is an int */
 			if (dbus_message_iter_get_arg_type(&args) != DBUS_TYPE_INT32)
 				exit(1);
 
 
-			printf(" system_state_change state: %i\n", sys_state);
+			printf(" system_state_change state: %i\r\n", sys_state);
 		}
 
 		if (dbus_message_is_signal(msg, INTERFACE, "system_output"))
@@ -136,7 +136,7 @@ int main(int argc, char **argv)
 
 			/* read the parameters */
 			if (!dbus_message_iter_init(msg, &args))
-				fprintf(stderr, "Message Has No Parameters\n");
+				fprintf(stderr, "Message Has No Parameters\r\n");
 
 			/* First interator is a string with service name */
 			if (dbus_message_iter_get_arg_type(&args) != DBUS_TYPE_STRING)
@@ -163,7 +163,7 @@ int main(int argc, char **argv)
 			dbus_message_iter_get_basic(&args, &output);
 
 
-			printf(" system_output service: %s process: %s \n%s\n", service,
+			printf(" system_output service: %s process: %s \r\n%s\r\n", service,
 				   process, output);
 		}
 
@@ -177,7 +177,7 @@ int main(int argc, char **argv)
 
 			/* read the parameters */
 			if (!dbus_message_iter_init(msg, &args))
-				fprintf(stderr, "Message Has No Parameters\n");
+				fprintf(stderr, "Message Has No Parameters\r\n");
 
 			if (dbus_message_iter_get_arg_type(&args) != DBUS_TYPE_INT32)
 				exit(1);
@@ -220,7 +220,7 @@ int main(int argc, char **argv)
 
 			dbus_message_iter_get_basic(&args, &message);
 
-			printf(" system_output service: mt: %i file: %s func: %s line: %i\n%s\n", mt, file, func, line, message);
+			printf(" system_output service: mt: %i file: %s func: %s line: %i\r\n%s\r\n", mt, file, func, line, message);
 		}
 
 
diff -rupN /tmp/initng-0.6.10.2/plugins/dbus_event/initng_dbusevent.c ./plugins/dbus_event/initng_dbusevent.c
--- /tmp/initng-0.6.10.2/plugins/dbus_event/initng_dbusevent.c	2007-11-05 07:41:57.000000000 +0100
+++ ./plugins/dbus_event/initng_dbusevent.c	2016-07-13 12:08:47.757159761 +0200
@@ -118,7 +118,7 @@ static int w_handler(s_event * event)
 				/* This is a expensive test, but better safe then sorry */
 				if (!STILL_OPEN(current->fdw.fds))
 				{
-					D_("%i is not open anymore.\n", current->fdw.fds);
+					D_("%i is not open anymore.\r\n", current->fdw.fds);
 					current->fdw.fds = -1;
 					break;
 				}
@@ -140,7 +140,7 @@ static int w_handler(s_event * event)
 
 			case FDW_ACTION_DEBUG:
 				if (!data->debug_find_what || strstr(__FILE__, data->debug_find_what))
-					mprintf(data->debug_out, " %i: Used by plugin: %s\n",
+					mprintf(data->debug_out, " %i: Used by plugin: %s\r\n",
 						current->fdw.fds, __FILE__);
 				break;
 		}
@@ -161,7 +161,7 @@ static dbus_bool_t add_dbus_watch(DBusWa
 
 	if (w == NULL)
 	{
-		printf("Memory allocation failed\n");
+		printf("Memory allocation failed\r\n");
 		return (FALSE);
 	}
 
@@ -254,7 +254,7 @@ static int astatus_change(s_event * even
 	if (conn == NULL)
 		return (TRUE);
 
-	D_("Sending signal with value \"%.10s\" %i \"%.10s\"\n", service_name, is,
+	D_("Sending signal with value \"%.10s\" %i \"%.10s\"\r\n", service_name, is,
 	   state_name);
 
 	/* create a signal & check for errors */
@@ -263,7 +263,7 @@ static int astatus_change(s_event * even
 								  "astatus_change");	/* name of the signal */
 	if (NULL == msg)
 	{
-		F_("Unable to create ne dbus signal\n");
+		F_("Unable to create ne dbus signal\r\n");
 		return (TRUE);
 	}
 
@@ -273,7 +273,7 @@ static int astatus_change(s_event * even
 		(msg, DBUS_TYPE_STRING, &service_name, DBUS_TYPE_INT32, &is,
 		 DBUS_TYPE_STRING, &state_name, DBUS_TYPE_INVALID))
 	{
-		F_("Unable to append args to dbus signal!\n");
+		F_("Unable to append args to dbus signal!\r\n");
 		return (TRUE);
 	}
 
@@ -281,12 +281,12 @@ static int astatus_change(s_event * even
 	/* send the message and flush the connection */
 	if (!dbus_connection_send(conn, msg, &serial))
 	{
-		F_("Unable to send dbus signal!\n");
+		F_("Unable to send dbus signal!\r\n");
 		return (TRUE);
 	}
 	// dbus_connection_flush(conn);
 
-	D_("Dbus Signal Sent\n");
+	D_("Dbus Signal Sent\r\n");
 
 	/* free the message */
 	dbus_message_unref(msg);
@@ -314,7 +314,7 @@ static int system_state_change(s_event *
 								  "system_state_change");	/* name of the signal */
 	if (NULL == msg)
 	{
-		F_("Unable to create new dbus signal\n");
+		F_("Unable to create new dbus signal\r\n");
 		return (FALSE);
 	}
 
@@ -323,7 +323,7 @@ static int system_state_change(s_event *
 	if (!dbus_message_append_args
 		(msg, DBUS_TYPE_INT32, &state, DBUS_TYPE_INVALID))
 	{
-		F_("Unable to append args to dbus signal!\n");
+		F_("Unable to append args to dbus signal!\r\n");
 		return (FALSE);
 	}
 
@@ -331,7 +331,7 @@ static int system_state_change(s_event *
 	/* send the message and flush the connection */
 	if (!dbus_connection_send(conn, msg, &serial))
 	{
-		F_("Unable to send dbus signal!\n");
+		F_("Unable to send dbus signal!\r\n");
 		return (FALSE);
 	}
 	//dbus_connection_flush(conn);
@@ -339,7 +339,7 @@ static int system_state_change(s_event *
 	/* free the message */
 	dbus_message_unref(msg);
 
-	D_("Dbus Signal Sent\n");
+	D_("Dbus Signal Sent\r\n");
 	return (TRUE);
 }
 
@@ -365,7 +365,7 @@ static int system_pipe_watchers(s_event
 								  "system_output");	/* name of the signal */
 	if (NULL == msg)
 	{
-		F_("Unable to create new dbus signal\n");
+		F_("Unable to create new dbus signal\r\n");
 		return (HANDLED);
 	}
 
@@ -375,7 +375,7 @@ static int system_pipe_watchers(s_event
 		(msg, DBUS_TYPE_STRING, &service_name, DBUS_TYPE_STRING,
 		 &process_name, DBUS_TYPE_STRING, &output, DBUS_TYPE_INVALID))
 	{
-		F_("Unable to append args to dbus signal!\n");
+		F_("Unable to append args to dbus signal!\r\n");
 		return (HANDLED);
 	}
 
@@ -383,7 +383,7 @@ static int system_pipe_watchers(s_event
 	/* send the message and flush the connection */
 	if (!dbus_connection_send(conn, msg, &serial))
 	{
-		F_("Unable to send dbus signal!\n");
+		F_("Unable to send dbus signal!\r\n");
 		return (HANDLED);
 	}
 	//dbus_connection_flush(conn);
@@ -391,7 +391,7 @@ static int system_pipe_watchers(s_event
 	/* free the message */
 	dbus_message_unref(msg);
 
-	D_("Dbus Signal Sent\n");
+	D_("Dbus Signal Sent\r\n");
 	return (HANDLED);
 }
 
@@ -417,7 +417,7 @@ static int print_error(s_event * event)
 								  "print_error");	/* name of the signal */
 	if (NULL == msg)
 	{
-		F_("Unable to create new dbus signal\n");
+		F_("Unable to create new dbus signal\r\n");
 		return (TRUE);
 	}
 
@@ -433,7 +433,7 @@ static int print_error(s_event * event)
 		 &data->func, DBUS_TYPE_INT32, &data->line, DBUS_TYPE_STRING, &message,
 		 DBUS_TYPE_INVALID))
 	{
-		F_("Unable to append args to dbus signal!\n");
+		F_("Unable to append args to dbus signal!\r\n");
 		return (TRUE);
 	}
 
@@ -441,7 +441,7 @@ static int print_error(s_event * event)
 	/* send the message and flush the connection */
 	if (!dbus_connection_send(conn, msg, &serial))
 	{
-		F_("Unable to send dbus signal!\n");
+		F_("Unable to send dbus signal!\r\n");
 		return (TRUE);
 	}
 	//dbus_connection_flush(conn);
@@ -450,7 +450,7 @@ static int print_error(s_event * event)
 	dbus_message_unref(msg);
 	free(message);
 
-	D_("Dbus Signal Sent\n");
+	D_("Dbus Signal Sent\r\n");
 	return (TRUE);
 }
 
@@ -495,7 +495,7 @@ static int connect_to_dbus(void)
 	conn = dbus_bus_get(DBUS_BUS_SYSTEM, &err);
 	if (dbus_error_is_set(&err))
 	{
-		F_("Connection Error (%s)\n", err.message);
+		F_("Connection Error (%s)\r\n", err.message);
 		dbus_error_free(&err);
 	}
 	if (conn == NULL)
@@ -514,13 +514,13 @@ static int connect_to_dbus(void)
 	/* Make sure no error is set */
 	if (dbus_error_is_set(&err))
 	{
-		F_("Name Error (%s)\n", err.message);
+		F_("Name Error (%s)\r\n", err.message);
 		dbus_error_free(&err);
 	}
 
 	/*  IF this is set, initng is the owner of initng.signal.source */
 	/*if ( ret != DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER) {
-	   printf("Could not gain PRIMARY_OWNER of "SOURCE_REQUEST"\n");
+	   printf("Could not gain PRIMARY_OWNER of "SOURCE_REQUEST"\r\n");
 	   return(FALSE);
 	   } */
 
@@ -531,7 +531,7 @@ int module_init(int api_version)
 {
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", INITNG_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", INITNG_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/debug_commands/initng_debug_commands.c ./plugins/debug_commands/initng_debug_commands.c
--- /tmp/initng-0.6.10.2/plugins/debug_commands/initng_debug_commands.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/debug_commands/initng_debug_commands.c	2016-07-13 12:08:47.757159761 +0200
@@ -148,7 +148,7 @@ static char *cmd_print_fds(char *arg)
 						{
 							/* PRINT */
 							mprintf(&string,
-									" %i: Used service: %s, process: %s\n", i,
+									" %i: Used service: %s, process: %s\r\n", i,
 									currentA->name, currentP->pt->name);
 						}
 					}
@@ -157,7 +157,7 @@ static char *cmd_print_fds(char *arg)
 		}
 
 
-		/*mprintf(&string, " %i:\n", i); */
+		/*mprintf(&string, " %i:\r\n", i); */
 	}
 	return (string);
 }
@@ -194,7 +194,7 @@ static int cmd_toggle_verbose(char *arg)
 			break;
 		default:
 			g.verbose = 0;
-			W_("Unknown verbose id %i\n", g.verbose);
+			W_("Unknown verbose id %i\r\n", g.verbose);
 			break;
 	}
 	return (g.verbose);
@@ -219,10 +219,10 @@ static int cmd_del_verbose(char *arg)
 
 int module_init(int api_version)
 {
-	D_("module_init(stcmd);\n");
+	D_("module_init(stcmd);\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -243,14 +243,14 @@ int module_init(int api_version)
 #endif
 
 
-	D_("libstcmd.so.0.0 loaded!\n");
+	D_("libstcmd.so.0.0 loaded!\r\n");
 	return (TRUE);
 }
 
 
 void module_unload(void)
 {
-	D_("module_unload(stcmd);\n");
+	D_("module_unload(stcmd);\r\n");
 
 	initng_command_unregister(&LIST_FDS);
 	if (g.i_am == I_AM_FAKE_INIT)
@@ -268,6 +268,6 @@ void module_unload(void)
 #endif
 
 
-	D_("libstcmd.so.0.0 unloaded!\n");
+	D_("libstcmd.so.0.0 unloaded!\r\n");
 
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/debug_commands/print_service.c ./plugins/debug_commands/print_service.c
--- /tmp/initng-0.6.10.2/plugins/debug_commands/print_service.c	2006-06-08 18:33:11.000000000 +0200
+++ ./plugins/debug_commands/print_service.c	2016-07-13 12:08:47.757159761 +0200
@@ -72,49 +72,49 @@ static void print_sdata(s_data * tmp, ch
 		case STRINGS:
 			if (!tmp->t.s)
 			{
-				F_("empty value!\n");
+				F_("empty value!\r\n");
 				return;
 			}
-			mprintf(string, "\t %10s            = \"", tmp->type->opt_name);
+			mprintf(string, "     %10s            = \"", tmp->type->opt_name);
 
 			print_string_value(tmp->t.s, string);
-			mprintf(string, "\"\n");
+			mprintf(string, "\"\r\n");
 			return;
 		case VARIABLE_STRING:
 		case VARIABLE_STRINGS:
 			if (!tmp->t.s)
 			{
-				F_("empty value!\n");
+				F_("empty value!\r\n");
 				return;
 			}
 			if (tmp->vn)
-				mprintf(string, "\t %10s %-10s = \"", tmp->type->opt_name,
+				mprintf(string, "     %10s %-10s = \"", tmp->type->opt_name,
 						tmp->vn);
 			else
-				mprintf(string, "\t %10s %-10s = \"", tmp->type->opt_name,
+				mprintf(string, "     %10s %-10s = \"", tmp->type->opt_name,
 						"ERROR");
 
 			print_string_value(tmp->t.s, string);
-			mprintf(string, "\"\n");
+			mprintf(string, "\"\r\n");
 			return;
 		case INT:
-			mprintf(string, "\t %10s            = \"%i\"\n",
+			mprintf(string, "     %10s            = \"%i\"\r\n",
 					tmp->type->opt_name, tmp->t.i);
 			return;
 		case VARIABLE_INT:
-			mprintf(string, "\t %10s %-10s = \"%i\"\n", tmp->type->opt_name,
+			mprintf(string, "     %10s %-10s = \"%i\"\r\n", tmp->type->opt_name,
 					tmp->vn, tmp->t.i);
 			return;
 		case SET:
-			mprintf(string, "\t %10s            = TRUE\n",
+			mprintf(string, "     %10s            = TRUE\r\n",
 					tmp->type->opt_name);
 			return;
 		case VARIABLE_SET:
-			mprintf(string, "\t %10s %-10s = TRUE\n", tmp->type->opt_name,
+			mprintf(string, "     %10s %-10s = TRUE\r\n", tmp->type->opt_name,
 					tmp->vn);
 			return;
 		case ALIAS:
-			mprintf(string, "\t ALIAS %10s\n", tmp->type->opt_name);
+			mprintf(string, "     ALIAS %10s\r\n", tmp->type->opt_name);
 			return;
 		default:
 			return;
@@ -132,15 +132,15 @@ static void service_db_print_u(service_c
 	assert(s);
 	assert(s->name);
 
-	mprintf(string, "\n# service_cache_entry: %s  \"%s", s->type->name,
+	mprintf(string, "\r\n# service_cache_entry: %s  \"%s", s->type->name,
 			s->name);
 
 	if (s->father_name)
 		mprintf(string, " : %s", s->father_name);
 
-	mprintf(string, "\"\n");
+	mprintf(string, "\"\r\n");
 
-	mprintf(string, "    ---------------------------------- \n");
+	mprintf(string, "    ---------------------------------- \r\n");
 
 	list_for_each_entry(tmp, &s->data.head.list, list)
 	{
@@ -150,11 +150,11 @@ static void service_db_print_u(service_c
 	/* if father with data exits, print it */
 	if (s->father)
 	{
-		D_("FATHER FOUND %s\n", s->name);
+		D_("FATHER FOUND %s\r\n", s->name);
 		service_db_print_u(s->father, string);
 	}
 	else
-		D_("FATHER NOT FOUND %s\n", s->name);
+		D_("FATHER NOT FOUND %s\r\n", s->name);
 }
 
 
@@ -165,24 +165,24 @@ static void active_db_print_process(proc
 
 	assert(p);
 	if (p->pst == P_FREE)
-		mprintf(string, "\t DEAD Process: type %s\n", p->pt->name);
+		mprintf(string, "     DEAD Process: type %s\r\n", p->pt->name);
 	if (p->pst == P_ACTIVE)
-		mprintf(string, "\t Process: type %s\n", p->pt->name);
+		mprintf(string, "     Process: type %s\r\n", p->pt->name);
 
 	if (p->pid > 0)
-		mprintf(string, "\t\tPid: %i\n", p->pid);
+		mprintf(string, "        Pid: %i\r\n", p->pid);
 
 	if (p->r_code > 0)
-		mprintf(string, "\t\tSIGNALS:\n"
-				"\t\tWEXITSTATUS %i\n"
-				"\t\tWIFEXITED %i\n"
-				"\t\tWIFSIGNALED %i\n" "\t\tWTERMSIG %i\n"
+		mprintf(string, "        SIGNALS:\r\n"
+				"        WEXITSTATUS %i\r\n"
+				"        WIFEXITED %i\r\n"
+				"        WIFSIGNALED %i\r\n" "        WTERMSIG %i\r\n"
 #ifdef WCOREDUMP
-				"\t\tWCOREDUMP %i\n"
+				"        WCOREDUMP %i\r\n"
 #endif
-				"\t\tWIFSTOPPED %i\n"
-				"\t\tWSTOPSIG %i\n"
-				"\n",
+				"        WIFSTOPPED %i\r\n"
+				"        WSTOPSIG %i\r\n"
+				"\r\n",
 				WEXITSTATUS(p->r_code),
 				WIFEXITED(p->r_code),
 				WIFSIGNALED(p->r_code), WTERMSIG(p->r_code),
@@ -193,7 +193,7 @@ static void active_db_print_process(proc
 
 	if (!list_empty(&p->pipes.list))
 	{
-		mprintf(string, "\t\tPIPES:\n");
+		mprintf(string, "        PIPES:\r\n");
 		while_pipes(current_pipe, p)
 		{
 			int i;
@@ -202,17 +202,17 @@ static void active_db_print_process(proc
 			{
 				case IN_PIPE:
 					mprintf(string,
-							"\t\t INPUT_PIPE read: %i, write: %i remote:",
+							"         INPUT_PIPE read: %i, write: %i remote:",
 							current_pipe->pipe[0], current_pipe->pipe[1]);
 					break;
 				case OUT_PIPE:
 					mprintf(string,
-							"\t\t OUTPUT_PIPE read: %i, write: %i remote:",
+							"         OUTPUT_PIPE read: %i, write: %i remote:",
 							current_pipe->pipe[1], current_pipe->pipe[0]);
 					break;
 				case BUFFERED_OUT_PIPE:
 					mprintf(string,
-							"\t\t BUFFERED_OUTPUT_PIPE read: %i, write: %i remote:",
+							"         BUFFERED_OUTPUT_PIPE read: %i, write: %i remote:",
 							current_pipe->pipe[1], current_pipe->pipe[0]);
 					break;
 				default:
@@ -222,11 +222,11 @@ static void active_db_print_process(proc
 			for (i = 0; current_pipe->targets[i] > 0 && i < MAX_TARGETS; i++)
 				mprintf(string, " %i", current_pipe->targets[i]);
 
-			mprintf(string, "\n");
+			mprintf(string, "\r\n");
 			if (current_pipe->buffer && current_pipe->buffer_allocated > 0)
 			{
 				mprintf(string,
-						"\t\tBuffer (%i): \n##########  BUFFER  ##########\n%s\n##############################\n",
+						"        Buffer (%i): \r\n##########  BUFFER  ##########\r\n%s\r\n##############################\r\n",
 						current_pipe->buffer_allocated, current_pipe->buffer);
 			}
 		}
@@ -248,7 +248,7 @@ static void active_db_print_u(active_db_
 
 	struct timeval now;
 
-	mprintf(string, "\n %s  \"%s", s->type->name, s->name);
+	mprintf(string, "\r\n %s  \"%s", s->type->name, s->name);
 #ifdef SERVICE_CACHE
 	if (s->from_service)
 	{
@@ -262,17 +262,17 @@ static void active_db_print_u(active_db_
 
 	if (s->current_state && s->current_state->state_name)
 	{
-		mprintf(string, "\"  status  \"%s\"\n", s->current_state->state_name);
+		mprintf(string, "\"  status  \"%s\"\r\n", s->current_state->state_name);
 	}
 	else
 	{
-		mprintf(string, "\"\n");
+		mprintf(string, "\"\r\n");
 	}
 
 	gettimeofday(&now, NULL);
 
 	mprintf(string,
-			"\tTIMES:\n\t last_rought: %ims\n\t last_state: %ims\n\t current_state: %ims\n",
+			"    TIMES:\r\n     last_rought: %ims\r\n     last_state: %ims\r\n     current_state: %ims\r\n",
 			MS_DIFF(now, s->last_rought_time), MS_DIFF(now,
 													   s->time_last_state),
 			MS_DIFF(now, s->time_current_state));
@@ -281,7 +281,7 @@ static void active_db_print_u(active_db_
 
 	if (!list_empty(&s->processes.list))
 	{
-		mprintf(string, "\tPROCCESSES:\n");
+		mprintf(string, "    PROCCESSES:\r\n");
 		while_processes(process, s)
 		{
 			active_db_print_process(process, string);
@@ -290,7 +290,7 @@ static void active_db_print_u(active_db_
 
 	if (!list_empty(&s->data.head.list))
 	{
-		mprintf(string, "\tVARIABLES:\n");
+		mprintf(string, "    VARIABLES:\r\n");
 		list_for_each_entry(tmp, &(s->data.head.list), list)
 		{
 			print_sdata(tmp, string);
@@ -300,7 +300,7 @@ static void active_db_print_u(active_db_
 #ifdef SERVICE_CACHE
 	if (s->from_service && !list_empty(&s->from_service->data.head.list))
 	{
-		mprintf(string, "\tFILE_CACHE_VARIABLES:\n");
+		mprintf(string, "    FILE_CACHE_VARIABLES:\r\n");
 		tmp = NULL;
 		list_for_each_entry(tmp, &(s->from_service->data.head.list), list)
 		{
@@ -316,7 +316,7 @@ char *active_db_print_all(char *matching
 	char *string = NULL;
 	active_db_h *apt = NULL;
 
-	D_("active_db_print_all(%s):\n", matching);
+	D_("active_db_print_all(%s):\r\n", matching);
 
 	while_active_db(apt)
 	{
@@ -335,7 +335,7 @@ char *service_db_print_all(char *matchin
 	service_cache_h *current = NULL;
 
 
-	D_("service_db_print_all(%s):\n", matching);
+	D_("service_db_print_all(%s):\r\n", matching);
 
 	while_service_cache(current)
 	{
diff -rupN /tmp/initng-0.6.10.2/plugins/envparser/initng_envparser.c ./plugins/envparser/initng_envparser.c
--- /tmp/initng-0.6.10.2/plugins/envparser/initng_envparser.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/envparser/initng_envparser.c	2016-07-13 12:08:47.757159761 +0200
@@ -56,7 +56,7 @@ static int env_parser(s_event * event)
 
 	s = event->data;
 
-	D_("env_parser(%s)\n", s->name);
+	D_("env_parser(%s)\r\n", s->name);
 
 	/* TODO, put this into one while loop */
 
@@ -90,12 +90,12 @@ static int parse_file(const char *file_t
 	if (!file)
 		return (FALSE);
 
-	D_("parse_file(%s, %s);\n", file, s->name);
+	D_("parse_file(%s, %s);\r\n", file, s->name);
 
 	/* open that file */
 	if (!open_read_close(file, &file_content))
 	{
-		D_("Unable to parse file %s\n", file);
+		D_("Unable to parse file %s\r\n", file);
 		fix_free(file, file_to);
 		return (FALSE);
 	}
@@ -217,7 +217,7 @@ static int parse_file(const char *file_t
 	}
 	free(file_content);
 
-	D_("parse_file(%s, %s): Return TRUE\n", file, s->name);
+	D_("parse_file(%s, %s): Return TRUE\r\n", file, s->name);
 
 	fix_free(file, file_to);
 	return (TRUE);
@@ -227,10 +227,10 @@ int module_init(int api_version)
 {
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 
 	initng_service_data_type_register(&ENV_FILE);
 	initng_service_data_type_register(&ENV_FILE_REQUIRED);
@@ -240,7 +240,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&ENV_FILE);
 	initng_service_data_type_unregister(&ENV_FILE_REQUIRED);
 	initng_event_hook_unregister(&EVENT_ADDITIONAL_PARSE, &env_parser);
diff -rupN /tmp/initng-0.6.10.2/plugins/event/initng_event.c ./plugins/event/initng_event.c
--- /tmp/initng-0.6.10.2/plugins/event/initng_event.c	2007-01-13 00:53:47.000000000 +0100
+++ ./plugins/event/initng_event.c	2016-07-13 12:08:47.757159761 +0200
@@ -143,10 +143,10 @@ a_state_h EVENT_FAILED = { "EVENT_FAILED
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -172,7 +172,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	initng_service_type_unregister(&TYPE_EVENT);
 
@@ -267,20 +267,20 @@ static int handle_event(s_event * event)
 		if (!(target = initng_common_load_to_active(target_name)))
 #endif
 		{
-			F_("Target service %s not found\n", target_name);
+			F_("Target service %s not found\r\n", target_name);
 			return (FALSE);
 		}
 	}
 
 	if (target->type != &TYPE_EVENT)
 	{
-		F_("Target service %s is not event type\n", target_name);
+		F_("Target service %s is not event type\r\n", target_name);
 		return (FALSE);
 	}
 
 	if (!IS_DOWN(target))
 	{
-		W_("Target service %s has been triggered already\n", target_name);
+		W_("Target service %s has been triggered already\r\n", target_name);
 		return (FALSE);
 	}
 
@@ -289,11 +289,11 @@ static int handle_event(s_event * event)
 	switch (initng_execute_launch(target, &RUN_EVENT, NULL))
 	{
 		case FALSE:
-			F_("Did not find a run_event entry to run\n");
+			F_("Did not find a run_event entry to run\r\n");
 			initng_common_mark_service(target, &EVENT_FAILED);
 			return (FALSE);
 		case FAIL:
-			F_("Could not launch run_event\n");
+			F_("Could not launch run_event\r\n");
 			initng_common_mark_service(target, &EVENT_FAILED);
 			return (FALSE);
 	}
diff -rupN /tmp/initng-0.6.10.2/plugins/find/initng_find.c ./plugins/find/initng_find.c
--- /tmp/initng-0.6.10.2/plugins/find/initng_find.c	2007-02-20 14:26:38.000000000 +0100
+++ ./plugins/find/initng_find.c	2016-07-13 12:08:47.757159761 +0200
@@ -54,7 +54,7 @@ static service_cache_h *search_dir(const
 	struct stat fstat;
 	char file[101];
 
-	/*printf("search_dir: %s for %s\n", dir, for_service); */
+	/*printf("search_dir: %s for %s\r\n", dir, for_service); */
 
 	/* check if there is a virtual file */
 
@@ -100,7 +100,7 @@ static service_cache_h *search_dir(const
 		/* get the stat of that file */
 		if (stat(file, &fstat) != 0)
 		{
-			printf("File %s failed stat errno: %s\n", file, strerror(errno));
+			printf("File %s failed stat errno: %s\r\n", file, strerror(errno));
 			continue;
 		}
 
@@ -142,7 +142,7 @@ static service_cache_h *search_dir(const
 				 */
 				if (strcmp(s, for_service) != 0)
 				{
-					D_("Service %s should be \"%s\"\n", s, for_service);
+					D_("Service %s should be \"%s\"\r\n", s, for_service);
 					if ((tmp = initng_common_parse_service(s)))
 					{
 						closedir(path);
@@ -192,7 +192,7 @@ static int initng_find(s_event * event)
 	/* Never try to find a service with a '/' in the name, it already have a path */
 	if (strstr(data->name, "/"))
 	{
-		D_("This is a full path, nothing to search on.\n");
+		D_("This is a full path, nothing to search on.\r\n");
 		return (TRUE);
 	}
 
@@ -217,7 +217,7 @@ static char *get_find_alias(const char *
 	char *point_result = NULL;
 	char *ret = NULL;
 
-	D_("Finding alias for %s\n", from);
+	D_("Finding alias for %s\r\n", from);
 	/* open that file */
 	if (!open_read_close(ALIAS_FILE, &file_content))
 		return (NULL);
@@ -275,10 +275,10 @@ static char *get_find_alias(const char *
 int module_init(int api_version)
 {
 
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -288,6 +288,6 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_PARSE, &initng_find);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/fmon/initng_fmon.c ./plugins/fmon/initng_fmon.c
--- /tmp/initng-0.6.10.2/plugins/fmon/initng_fmon.c	2016-07-11 14:45:42.415276000 +0200
+++ ./plugins/fmon/initng_fmon.c	2016-07-13 12:08:47.757159761 +0200
@@ -98,7 +98,7 @@ static int fdh_handler(s_event * event)
 			/* This is a expensive test, but better safe then sorry */
 			if (!STILL_OPEN(fdh.fds))
 			{
-				D_("%i is not open anymore.\n", fdh.fds);
+				D_("%i is not open anymore.\r\n", fdh.fds);
 				fdh.fds = -1;
 				break;
 			}
@@ -120,7 +120,7 @@ static int fdh_handler(s_event * event)
 
 		case FDW_ACTION_DEBUG:
 			if (!data->debug_find_what || strstr(__FILE__, data->debug_find_what))
-				mprintf(data->debug_out, " %i: Used by plugin: %s\n",
+				mprintf(data->debug_out, " %i: Used by plugin: %s\r\n",
 					fdh.fds, __FILE__);
 			break;
 	}
@@ -165,7 +165,7 @@ void filemon_event(f_module_h * from, e_
 	/* if error */
 	if (len < 0)
 	{
-		F_("fmon read error\n");
+		F_("fmon read error\r\n");
 		return;
 	}
 
@@ -176,10 +176,10 @@ void filemon_event(f_module_h * from, e_
 
 		event = (struct inotify_event *) &buf[i];
 
-		/*printf("wd=%d, mask=%u, cookie=%u, len=%u\n",
+		/*printf("wd=%d, mask=%u, cookie=%u, len=%u\r\n",
 		   event->wd, event->mask, event->cookie, event->len);
 		   if(event->len)
-		   printf("name: %s\n", event->name); */
+		   printf("name: %s\r\n", event->name); */
 
 
 		if (event->mask & IN_MODIFY)
@@ -188,7 +188,7 @@ void filemon_event(f_module_h * from, e_
 			if (event->wd == plugins_watch && event->len
 				&& strstr(event->name, ".so"))
 			{
-				W_("Plugin %s/%s has been changed, reloading initng.\n",
+				W_("Plugin %s/%s has been changed, reloading initng.\r\n",
 				   INITNG_PLUGIN_DIR, event->name);
 
 				/* sleep 1 seconds, maby more files will be modified in short */
@@ -204,7 +204,7 @@ void filemon_event(f_module_h * from, e_
 			if (event->wd == initng_watch && event->len
 				&& strcmp(event->name, "/sbin/initng") == 0)
 			{
-				W_("/sbin/initng modified, reloading initng.\n");
+				W_("/sbin/initng modified, reloading initng.\r\n");
 
 				/* sleep 1 seconds, maby more files will be modified in short */
 				sleep(1);
@@ -240,13 +240,13 @@ void filemon_event(f_module_h * from, e_
 								/* and the service is marked FAILED */
 								IS_FAILED(active))
 							{
-								W_("Zapping %s because the source %s has changed, and it might work again.\n", active->name, event->name);
+								W_("Zapping %s because the source %s has changed, and it might work again.\r\n", active->name, event->name);
 								initng_active_db_free(active);
 							}
 						}
 					}
 
-					W_("Source file \"%s\" changed, flushing file cache.\n",
+					W_("Source file \"%s\" changed, flushing file cache.\r\n",
 					   event->len ? event->name : "unkown");
 					initng_service_cache_free_all();
 				}
@@ -268,12 +268,12 @@ static int mon_dir(const char *dir)
 	struct stat fstat;
 	char file[256];
 
-	/*printf("add watch: %s\n", dir); */
+	/*printf("add watch: %s\r\n", dir); */
 
 	/* monitor /etc/initng */
 	if (inotify_add_watch(fdh.fds, dir, IN_MODIFY) < 0)
 	{
-		F_("Fail to monitor \"%s\"\n", dir);
+		F_("Fail to monitor \"%s\"\r\n", dir);
 		return (FALSE);
 	}
 
@@ -296,7 +296,7 @@ static int mon_dir(const char *dir)
 		/* get the stat of that file */
 		if (stat(file, &fstat) != 0)
 		{
-			printf("File %s failed stat errno: %s\n", file, strerror(errno));
+			printf("File %s failed stat errno: %s\r\n", file, strerror(errno));
 			continue;
 		}
 
@@ -317,7 +317,7 @@ int module_init(int api_version)
 {
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -330,7 +330,7 @@ int module_init(int api_version)
 	/* check so it succeded */
 	if (fdh.fds < 0)
 	{
-		F_("Fail start file monitoring\n");
+		F_("Fail start file monitoring\r\n");
 		return (FALSE);
 	}
 
@@ -340,7 +340,7 @@ int module_init(int api_version)
 	/* check so it succeded */
 	if (plugins_watch < 0)
 	{
-		F_("Fail to monitor \"%s\"\n", INITNG_PLUGIN_DIR);
+		F_("Fail to monitor \"%s\"\r\n", INITNG_PLUGIN_DIR);
 		return (FALSE);
 	}
 
@@ -350,7 +350,7 @@ int module_init(int api_version)
 	/* check so it succeded */
 	if (initng_watch < 0)
 	{
-		F_("Fail to monitor \"/sbin/initng\"\n");
+		F_("Fail to monitor \"/sbin/initng\"\r\n");
 		return (FALSE);
 	}
 
@@ -361,7 +361,7 @@ int module_init(int api_version)
 	/* add this hook */
 	initng_event_hook_register(&EVENT_FD_WATCHER, &fdh_handler);
 
-	/* printf("Now monitoring...\n"); */
+	/* printf("Now monitoring...\r\n"); */
 
 	return (TRUE);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/fstat/initng_fstat.c ./plugins/fstat/initng_fstat.c
--- /tmp/initng-0.6.10.2/plugins/fstat/initng_fstat.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/fstat/initng_fstat.c	2016-07-13 12:08:47.757159761 +0200
@@ -77,10 +77,10 @@ static int check_files_to_exist(s_event
 	/* CHECK WAIT_FOR_FILE */
 	while ((file = get_next_string(&WAIT_FOR_FILE, service, &itt)))
 	{
-		D_("Service %s need file %s to exist\n", service->name, file);
+		D_("Service %s need file %s to exist\r\n", service->name, file);
 		if (stat(file, &file_stat) != 0)
 		{
-			D_("File %s needed by %s doesn't exist.\n", file, service->name);
+			D_("File %s needed by %s doesn't exist.\r\n", file, service->name);
 			/* set the alarm, make sure initng will search files, in one second */
 			initng_global_set_sleep(1);
 
@@ -92,7 +92,7 @@ static int check_files_to_exist(s_event
 	/* CHECK REQUIRE_FILE */
 	while ((file = get_next_string(&REQUIRE_FILE, service, &itt)))
 	{
-		D_("Service %s need file %s to exist\n", service->name, file);
+		D_("Service %s need file %s to exist\r\n", service->name, file);
 		if (stat(file, &file_stat) != 0)
 		{
 			initng_common_mark_service(service, &REQUIRE_FILE_FAILED);
@@ -122,11 +122,11 @@ static int check_files_to_exist_after(s_
 	/* check WAIT_FOR_FILE_AFTER */
 	while ((file = get_next_string(&WAIT_FOR_FILE_AFTER, service, &itt)))
 	{
-		D_("Service %s need file %s before it can be set to RUNNING\n",
+		D_("Service %s need file %s before it can be set to RUNNING\r\n",
 		   service->name, file);
 		if (stat(file, &file_stat) != 0)
 		{
-			D_("File %s needed by %s doesn't exist.\n", file, service->name);
+			D_("File %s needed by %s doesn't exist.\r\n", file, service->name);
 			/* set the alarm, make sure initng will search files, in one second */
 			initng_global_set_sleep(1);
 
@@ -153,7 +153,7 @@ int module_init(int api_version)
 	S_;
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/history/initng_history.c ./plugins/history/initng_history.c
--- /tmp/initng-0.6.10.2/plugins/history/initng_history.c	2007-01-21 23:40:31.000000000 +0100
+++ ./plugins/history/initng_history.c	2016-07-13 12:08:47.757159761 +0200
@@ -74,7 +74,7 @@ static void cmd_history(char *arg, s_pay
 			continue;
 
 		if (current->data)
-			printf("%s\n", current->data);
+			printf("%s\r\n", current->data);
 
 		if (current->action)
 			strncpy(row->state, current->action->state_name, 100);
@@ -137,9 +137,9 @@ static char *cmd_log(char *arg)
 			only_output = TRUE;
 	}
 
-	mprintf(&string, " %" NAME_SPACER "s : STATUS\n", "SERVICE");
+	mprintf(&string, " %" NAME_SPACER "s : STATUS\r\n", "SERVICE");
 	mprintf(&string,
-			" ------------------------------------------------------\n");
+			" ------------------------------------------------------\r\n");
 	while_history_db_prev(current)
 	{
 		/* if only_output is set, it have to be an output to continue */
@@ -166,9 +166,9 @@ static char *cmd_log(char *arg)
 			/* print a nice service change status entry */
 			char *c = ctime(&current->time.tv_sec);
 
-			mprintf(&string, "\n %s", c);
+			mprintf(&string, "\r\n %s", c);
 			mprintf(&string,
-					" ------------------------------------------------------\n");
+					" ------------------------------------------------------\r\n");
 
 			last = current->time.tv_sec;
 		}
@@ -208,7 +208,7 @@ static char *cmd_log(char *arg)
 				buf[i] = '\0';
 
 				/* send that to client */
-				mprintf(&string, " %" NAME_SPACER "s : %s\n", name, buf);
+				mprintf(&string, " %" NAME_SPACER "s : %s\r\n", name, buf);
 
 				/* where to start next */
 				tmp = &tmp[i];
@@ -224,11 +224,11 @@ static char *cmd_log(char *arg)
 				/* if there has gone some seconds sence last change, print that */
 				if (current->duration > 0)
 					mprintf(&string,
-							" %" NAME_SPACER "s | %s (after %i seconds)\n",
+							" %" NAME_SPACER "s | %s (after %i seconds)\r\n",
 							name, current->action->state_name,
 							(int) current->duration);
 				else
-					mprintf(&string, " %" NAME_SPACER "s | %s\n", name,
+					mprintf(&string, " %" NAME_SPACER "s | %s\r\n", name,
 							current->action->state_name);
 			}
 		}
@@ -254,7 +254,7 @@ static int history_db_compensate_time(s_
 
 	skew = (time_t) event->data;
 
-	D_("history_db_compensate_time(%i);\n", (int) skew);
+	D_("history_db_compensate_time(%i);\r\n", (int) skew);
 
 	while_history_db(current)
 	{
@@ -270,7 +270,7 @@ static void history_db_clear_service(act
 {
 	history_h *current = NULL;
 
-	D_("history_db_clear_service(%s);\n", service->name);
+	D_("history_db_clear_service(%s);\r\n", service->name);
 
 	while_history_db(current)
 	{
@@ -326,7 +326,7 @@ static int add_hist(history_h * hist)
 		/* if we got anything */
 		if (!entry)
 		{
-			F_("Unable to free last histroty entry!, cant add more.\n");
+			F_("Unable to free last histroty entry!, cant add more.\r\n");
 			return (FALSE);
 		}
 
@@ -373,12 +373,12 @@ static int history_add_values(s_event *
 	/*if (!service->current_state->state_name);
 	   return(TRUE); */
 
-	D_("adding: %s.\n", service->name);
+	D_("adding: %s.\r\n", service->name);
 
 	/* allocate space for data */
 	if (!(tmp_e = (history_h *) i_calloc(1, sizeof(history_h))))
 	{
-		F_("Out of memory.\n");
+		F_("Out of memory.\r\n");
 		return (TRUE);
 	}
 
@@ -395,7 +395,7 @@ static int history_add_values(s_event *
 								   service->time_last_state.tv_sec);
 
 
-	/*D_("history_add_values() service : %s, name: %s, action: %s\n", service->name, NULL, service->current_state->state_name); */
+	/*D_("history_add_values() service : %s, name: %s, action: %s\r\n", service->name, NULL, service->current_state->state_name); */
 
 	add_hist(tmp_e);
 
@@ -420,12 +420,12 @@ static int fetch_output(s_event * event)
 	data = event->data;
 	assert(data->buffer_pos);
 	
-	D_("fetch_output()\n");
+	D_("fetch_output()\r\n");
 
 	/* allocate space for data */
 	if (!(tmp_e = (history_h *) i_calloc(1, sizeof(history_h))))
 	{
-		F_("Out of memory.\n");
+		F_("Out of memory.\r\n");
 		return (FALSE);
 	}
 
@@ -448,7 +448,7 @@ int module_init(int api_version)
 {
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/idleprobe/initng_idleprobe.c ./plugins/idleprobe/initng_idleprobe.c
--- /tmp/initng-0.6.10.2/plugins/idleprobe/initng_idleprobe.c	2007-03-04 04:53:22.000000000 +0100
+++ ./plugins/idleprobe/initng_idleprobe.c	2016-07-13 12:08:47.757159761 +0200
@@ -93,11 +93,11 @@ static int is_cpu_idle(int wait)
 
 	float scale;
 
-	D_("is_cpu_idle(%i);\n", wait);
+	D_("is_cpu_idle(%i);\r\n", wait);
 	/* check so that wait value is correct */
 	if (wait < 0)
 	{
-		F_("Wrong value for parameter wait_for_cpu_idle (%i)!\n", wait);
+		F_("Wrong value for parameter wait_for_cpu_idle (%i)!\r\n", wait);
 		return (FALSE);
 	}
 
@@ -130,7 +130,7 @@ static int is_cpu_idle(int wait)
 	// first value the CPU summary line
 	if (!fgets(buf, sizeof(buf), fp_proc))
 	{
-		F_("Failed to read from /proc/stat!\n");
+		F_("Failed to read from /proc/stat!\r\n");
 		return (FALSE);
 	}
 
@@ -141,14 +141,14 @@ static int is_cpu_idle(int wait)
 			   &cpu_system,
 			   &cpu_idle, &cpu_dummy1, &cpu_dummy2, &cpu_dummy3) < 4)
 	{
-		F_("Failed to read from /proc/stat!\n");
+		F_("Failed to read from /proc/stat!\r\n");
 		return (FALSE);
 	}
 
-	D_("cpu_user: %i\n", (int) cpu_user);
-	D_("cpu_nice: %i\n", (int) cpu_nice);
-	D_("cpu_system: %i\n", (int) cpu_system);
-	D_("cpu_idle: %i\n\n", (int) cpu_idle);
+	D_("cpu_user: %i\r\n", (int) cpu_user);
+	D_("cpu_nice: %i\r\n", (int) cpu_nice);
+	D_("cpu_system: %i\r\n", (int) cpu_system);
+	D_("cpu_idle: %i\r\n\r\n", (int) cpu_idle);
 
 	cpu_user_frm = cpu_user - old_cpu_user;
 	cpu_nice_frm = cpu_nice - old_cpu_nice;
@@ -166,7 +166,7 @@ static int is_cpu_idle(int wait)
 	{
 		if ((float) cpu_idle_frm * scale > 90.0)
 		{
-			D_("idle_cnt: %i\n", idle_cnt);
+			D_("idle_cnt: %i\r\n", idle_cnt);
 			if (++idle_cnt > wait)
 				return (TRUE);
 		}
@@ -219,7 +219,7 @@ int module_init(int api_version)
 	S_;
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/initctl/initng_initctl.c ./plugins/initctl/initng_initctl.c
--- /tmp/initng-0.6.10.2/plugins/initctl/initng_initctl.c	2007-05-19 22:32:58.000000000 +0200
+++ ./plugins/initctl/initng_initctl.c	2016-07-13 12:08:47.757159761 +0200
@@ -95,7 +95,7 @@ static int pipe_fd_handler(s_event * eve
 			/* This is a expensive test, but better safe then sorry */
 			if (!STILL_OPEN(pipe_fd.fds))
 			{
-				D_("%i is not open anymore.\n", pipe_fd.fds);
+				D_("%i is not open anymore.\r\n", pipe_fd.fds);
 				pipe_fd.fds = -1;
 				break;
 			}
@@ -117,7 +117,7 @@ static int pipe_fd_handler(s_event * eve
 
 		case FDW_ACTION_DEBUG:
 			if (!data->debug_find_what || strstr(__FILE__, data->debug_find_what))
-				mprintf(data->debug_out, " %i: Used by plugin: %s\n",
+				mprintf(data->debug_out, " %i: Used by plugin: %s\r\n",
 					pipe_fd.fds, __FILE__);
 			break;
 	}
@@ -136,7 +136,7 @@ static void initctl_control_close(void)
 
 static int initctl_control_open(void)
 {
-	D_("initctl control open (%d)\n", pipe_fd.fds);
+	D_("initctl control open (%d)\r\n", pipe_fd.fds);
 	/* First, try to create /dev/initctl if not present. */
 	if (stat(INIT_FIFO, &st2) < 0 && errno == ENOENT)
 		(void) mkfifo(INIT_FIFO, 0600);
@@ -163,12 +163,12 @@ static int initctl_control_open(void)
 		if ((pipe_fd.fds = open(INIT_FIFO, O_RDWR | O_NONBLOCK)) < 3)
 			return (FALSE);
 
-		D_("Opened on fd %i\n", pipe_fd.fds);
+		D_("Opened on fd %i\r\n", pipe_fd.fds);
 		fstat(pipe_fd.fds, &st);
 		if (!S_ISFIFO(st.st_mode))
 		{
 			/* /dev/initctl is there, but we can't open it */
-			F_("%s is not a fifo\n", INIT_FIFO);
+			F_("%s is not a fifo\r\n", INIT_FIFO);
 			if (pipe_fd.fds >= 0)
 			{
 				close(pipe_fd.fds);
@@ -200,19 +200,19 @@ void parse_control_input(f_module_h * fr
 	/* Check if request is ok : */
 	if (n == 0)
 	{
-		F_("read 0 bytes, this should never happen!\n");
+		F_("read 0 bytes, this should never happen!\r\n");
 		return;
 	}
 	if (n <= 0)
 	{
 		if (errno == EINTR)
 			return;
-		F_("Error reading request\n");
+		F_("Error reading request\r\n");
 		return;
 	}
 	if (request.magic != INIT_MAGIC || n != sizeof(request))
 	{
-		F_("got bogus init request\n");
+		F_("got bogus init request\r\n");
 		return;
 	}
 
@@ -221,7 +221,7 @@ void parse_control_input(f_module_h * fr
 	 */
 	if (request.cmd != INIT_CMD_RUNLVL)
 	{
-		D_("got unimplemented init request - %d (%c),%d (%c).\n",
+		D_("got unimplemented init request - %d (%c),%d (%c).\r\n",
 		   request.runlevel, request.runlevel, request.cmd, request.cmd);
 		return;
 	}
@@ -235,21 +235,21 @@ void parse_control_input(f_module_h * fr
 	 */
 
 	/* Request is OK, handle it: */
-	D_("init data is : - %d (%c),%d (%c).\n", request.runlevel,
+	D_("init data is : - %d (%c),%d (%c).\r\n", request.runlevel,
 	   request.runlevel, request.cmd, request.cmd);
 
 	switch (request.runlevel)
 	{
 			/* halting */
 		case '0':
-			D_("Halting.\n");
+			D_("Halting.\r\n");
 			g.when_out = THEN_POWEROFF;
 			initng_handler_stop_all();
 			return;
 
 			/* reboot */
 		case '6':
-			D_("Rebooting.\n");
+			D_("Rebooting.\r\n");
 			g.when_out = THEN_REBOOT;
 			initng_handler_stop_all();
 			return;
@@ -257,7 +257,7 @@ void parse_control_input(f_module_h * fr
 			/* restart init */
 		case 'U':
 		case 'u':
-			D_("init U, sent reloading initng\n");
+			D_("init U, sent reloading initng\r\n");
 			initng_reload();
 			return;
 
@@ -265,7 +265,7 @@ void parse_control_input(f_module_h * fr
 			/* reload /etc/inittab */
 		case 'Q':
 		case 'q':
-			D_("init Q, freeing complete service cache\n");
+			D_("init Q, freeing complete service cache\r\n");
 			initng_service_cache_free_all();
 			return;
 #endif
@@ -273,7 +273,7 @@ void parse_control_input(f_module_h * fr
 			/* go singleuser */
 		case 'S':
 		case 's':
-			W_("init S, going singleuser\n");
+			W_("init S, going singleuser\r\n");
 			g.when_out = THEN_RESTART;
 
 			/* set next runlevel to single (That will be loaded when no service is left in current one) */
@@ -281,13 +281,13 @@ void parse_control_input(f_module_h * fr
 			initng_handler_stop_all();
 			return;
 		default:
-			D_("Starting runlevel%c\n", request.runlevel);
+			D_("Starting runlevel%c\r\n", request.runlevel);
 			{
 				char tmp[20];
 
 				sprintf(tmp, "runlevel%c", request.runlevel);
 				if (!initng_handler_start_new_service_named(tmp))
-					F_(" service \"%s\" could not be executed.\n", tmp);
+					F_(" service \"%s\" could not be executed.\r\n", tmp);
 			}
 			return;
 	}
@@ -295,7 +295,7 @@ void parse_control_input(f_module_h * fr
 
 static void makeutmp(int runlevel)
 {
-	D_("Making utmp file for runlevel %d\n", runlevel);
+	D_("Making utmp file for runlevel %d\r\n", runlevel);
 	struct utmp utmp;
 	time_t t;
 
@@ -304,7 +304,7 @@ static void makeutmp(int runlevel)
 	 */
 	if (access(UTMP_FILE, F_OK) < 0)
 	{
-		F_("/var/run/utmp does not exist, this should be created by bootmisc.i\n");
+		F_("/var/run/utmp does not exist, this should be created by bootmisc.i\r\n");
 		return;
 	}
 	/*
@@ -320,7 +320,7 @@ static void makeutmp(int runlevel)
 	utmp.ut_time = (int) t;
 	if (pututline(&utmp) == NULL)
 	{
-		F_("pututline failed\n");
+		F_("pututline failed\r\n");
 		endutent();
 		return;
 	}
@@ -355,7 +355,7 @@ static int hup_request(s_event * event)
 
 	if (!initctl_control_open())
 	{
-		F_("Warning, failed to open /dev/initctl\n");
+		F_("Warning, failed to open /dev/initctl\r\n");
 	}
 
 	return (TRUE);
@@ -381,10 +381,10 @@ static int is_system_up(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -401,7 +401,7 @@ int module_init(int api_version)
 	if ((!initng_event_hook_register(&EVENT_SIGNAL, &hup_request))
 		|| (!initng_event_hook_register(&EVENT_SYSTEM_CHANGE, &is_system_up)))
 	{
-		F_("Fail add hook!\n");
+		F_("Fail add hook!\r\n");
 		return (FALSE);
 	}
 	return (TRUE);
@@ -410,7 +410,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	/* then this module was never loaded */
 	if (g.i_am != I_AM_INIT)
diff -rupN /tmp/initng-0.6.10.2/plugins/interactive/initng_interactive.c ./plugins/interactive/initng_interactive.c
--- /tmp/initng-0.6.10.2/plugins/interactive/initng_interactive.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/interactive/initng_interactive.c	2016-07-13 12:08:47.757159761 +0200
@@ -117,18 +117,18 @@ int module_init(int api_version)
 
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 
 	/* look for the string interactive */
 	for (i = 0; g.Argv[i]; i++)
 		if (strstr(g.Argv[i], "interactive"))
 		{									/* if found */
 
-			P_("Initng is started in interactive mode!\n");
+			P_("Initng is started in interactive mode!\r\n");
 			initng_event_hook_register(&EVENT_START_DEP_MET,
 										&interactive_STARTING);
 			initng_event_hook_register(&EVENT_STOP_DEP_MET,
@@ -144,7 +144,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	if (active == TRUE)
 	{
 		initng_event_hook_unregister(&EVENT_START_DEP_MET,
diff -rupN /tmp/initng-0.6.10.2/plugins/iparser/initng_i_parser.c ./plugins/iparser/initng_i_parser.c
--- /tmp/initng-0.6.10.2/plugins/iparser/initng_i_parser.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/iparser/initng_i_parser.c	2016-07-13 12:08:47.757159761 +0200
@@ -144,7 +144,7 @@ static void err_print_line2t(char *point
 
 
 	initng_error_print(err, file, func, codeline,
-					   "%s\nfile: %s\n\"%s\"\n %s\n\n", message,
+					   "%s\r\nfile: %s\r\n\"%s\"\r\n %s\r\n\r\n", message,
 					   g_filename, line, pstr);
 	free(line);
 	free(pstr);
@@ -162,7 +162,7 @@ static service_cache_h *test_parse(char
 	/* if path points to service_to_find this is the first run */
 	int first = (path == service_to_find);
 
-	/*D_("test_parse(%s, %s)\n", path, service_to_find); */
+	/*D_("test_parse(%s, %s)\r\n", path, service_to_find); */
 
 	/* get string from last '/' char */
 	if ((service_strip = strrchr(service_to_find, '/')))
@@ -265,12 +265,12 @@ static int initng_i_parser(s_event * eve
 	data = event->data;
 
 	assert(data->name);
-	D_("Parsing for %s\n", data->name);
+	D_("Parsing for %s\r\n", data->name);
 
 	/* Make sure the filename of 200 chars above are more than enough */
 	if (strlen(data->name) > 50)
 	{
-		F_("Service name to long, initng_i_parser can't look for this service!\n");
+		F_("Service name to long, initng_i_parser can't look for this service!\r\n");
 		return (FALSE);
 	}
 
@@ -301,7 +301,7 @@ static int initng_i_parser(s_event * eve
 		return (HANDLED);
 	}
 
-	D_("Was not able to parse: %s\n", data->name);
+	D_("Was not able to parse: %s\r\n", data->name);
 	return (FALSE);
 }
 
@@ -324,12 +324,12 @@ static service_cache_h *parse_file(const
 	/* set the error message filename */
 	g_filename = filename;
 
-	D_("parse_file(%s) for: %s\n", filename, watch_for);
+	D_("parse_file(%s) for: %s\r\n", filename, watch_for);
 
 	/* read config file */
 	if (!open_read_close(filename, &file_content))
 	{
-		D_("Can't open config file %s.\n", filename);
+		D_("Can't open config file %s.\r\n", filename);
 		return (NULL);
 	}
 	file = file_content;
@@ -380,7 +380,7 @@ static service_cache_h *parse_file(const
 		parse_service_line(&file, watch_for, NULL, stype,
 						   filename, &match, &exact_match);
 
-		D_("parse_service_line(%s, %s)\n", match ? match->name : NULL,
+		D_("parse_service_line(%s, %s)\r\n", match ? match->name : NULL,
 		   exact_match ? exact_match->name : NULL);
 
 	}										/* end while */
@@ -450,7 +450,7 @@ static int parse_service_line(char **to_
 	/* service test : class { */
 	/*             |          */
 
-	D_("parse_service_line(s,%s): service name: \"%s\"\n", watch_for, name);
+	D_("parse_service_line(s,%s): service name: \"%s\"\r\n", watch_for, name);
 
 	/* jump forward on spaces */
 	JUMP_NSPACES(*to_parse);
@@ -495,7 +495,7 @@ static int parse_service_line(char **to_
 
 #ifdef DEBUG
 		if (father_name)
-			D_("Father is: %s, set from \"server : father\"\n", father_name);
+			D_("Father is: %s, set from \"server : father\"\r\n", father_name);
 #endif
 
 		/* service test : class { */
@@ -545,7 +545,7 @@ static int parse_service_line(char **to_
 	/* check so that it was allocated! */
 	if (!new_service)
 	{
-		F_("Unable to allocate space for new service.\n");
+		F_("Unable to allocate space for new service.\r\n");
 		FL_(*to_parse, "Unable to allocate space for new service.");
 		if (father_name)
 			free(father_name);
@@ -623,7 +623,7 @@ static int parse_service_line(char **to_
 	/* make sure the while loop only stoped on a break */
 	if (!(*to_parse)[0])
 	{
-		FL_(*to_parse, "Service file did end unexpected.\n");
+		FL_(*to_parse, "Service file did end unexpected.");
 		return (FALSE);
 	}
 
@@ -643,7 +643,7 @@ static int parse_service_line(char **to_
 	/* if not watching for anything special */
 	if (!watch_for)
 	{
-		D_("Nothing to wait for\n");
+		D_("Nothing to wait for\r\n");
 		/* set matach to the first found, and user may walk the services from that point added */
 		if (!(*match))
 		{
@@ -655,7 +655,7 @@ static int parse_service_line(char **to_
 
 	if (strcmp(new_service->name, watch_for) == 0)
 	{
-		D_("Found EXACT match: %s\n", new_service->name);
+		D_("Found EXACT match: %s\r\n", new_service->name);
 		(*exact_match) = new_service;
 		return (TRUE);
 	}
@@ -663,12 +663,12 @@ static int parse_service_line(char **to_
 	/* check if this is the service we are looking for. */
 	if (service_match(watch_for, new_service->name) == TRUE)
 	{
-		D_("MATCH Found :%s\n", new_service->name);
+		D_("MATCH Found :%s\r\n", new_service->name);
 		(*match) = new_service;
 		return (TRUE);
 	}
 
-	D_(" returning true, no match or exact match\n");
+	D_(" returning true, no match or exact match\r\n");
 	/* return null if not */
 	return (TRUE);
 }
@@ -827,7 +827,7 @@ static int parse_opt(char **where, stype
 		/* check string length of word, this is faster then strcasecmp */
 		if (opt_len != current->opt_name_len)
 		{
-			/*F_("Lenght is not correct.\n"); */
+			/*F_("Lenght is not correct.\r\n"); */
 			continue;
 		}
 
@@ -835,14 +835,14 @@ static int parse_opt(char **where, stype
 		if (strncmp(current->opt_name, opt_name, opt_len) != 0)
 			continue;
 
-		D_("parse_opt(%s): option \"%s\" value at option.\n",
+		D_("parse_opt(%s): option \"%s\" value at option.\r\n",
 		   srv->name, current->opt_name);
 
 		/* if this is a alias, browse forward to the correct opt_type */
 		while (tmp->opt_type == ALIAS && tmp->alias)
 			tmp = tmp->alias;
 
-		D_("option type %i, var_name: %s, opt_name: %s\n", tmp->opt_type,
+		D_("option type %i, var_name: %s, opt_name: %s\r\n", tmp->opt_type,
 		   var_name ? var_name : "(none)", current->opt_name);
 
 		DL_(*where, current->opt_name);
@@ -871,7 +871,7 @@ static int parse_opt(char **where, stype
 
 	/* bail out if we did not find a match */
 	FL_(*where, "Did not get a MATCH!");
-	F_("Did not get an match on option: \"%s\"!\n", opt_name);
+	F_("Did not get an match on option: \"%s\"!\r\n", opt_name);
 
 	return (FALSE);
 }
@@ -899,7 +899,7 @@ static int set_parser(s_entry * type, ch
 
 	if (CH_(value, ';'))
 	{
-		D_("set_parser(%s,s,%s);\n", type->opt_name, from_service->name);
+		D_("set_parser(%s,s,%s);\r\n", type->opt_name, from_service->name);
 		set_var(type, va, from_service);
 		return (TRUE);
 	}
@@ -931,7 +931,7 @@ static int set_parser(s_entry * type, ch
 	 */
 	if (strncasecmp(*value, "yes", 3) == 0)
 	{
-		D_("set_parser(%s,s,%s);\n", type->opt_name, from_service->name);
+		D_("set_parser(%s,s,%s);\r\n", type->opt_name, from_service->name);
 		set_var(type, va, from_service);
 
 		/* skip 3 chars */
@@ -941,7 +941,7 @@ static int set_parser(s_entry * type, ch
 
 	if (strncasecmp(*value, "true", 4) == 0)
 	{
-		D_("set_parser(%s,s,%s);\n", type->opt_name, from_service->name);
+		D_("set_parser(%s,s,%s);\r\n", type->opt_name, from_service->name);
 		set_var(type, va, from_service);
 
 		/* skip 4 chars */
@@ -1028,9 +1028,9 @@ static int string_parser(s_entry * type,
 	{
 		FL_(*value, "There should be an ; here.");
 		if ((*value)[0] == '\n')
-			F_("Its a *newline* instead.\n");
+			F_("Its a *newline* instead.\r\n");
 		else
-			F_("Its a %c instead.\n", (*value)[0]);
+			F_("Its a %c instead.\r\n", (*value)[0]);
 		return (FALSE);
 	}
 
@@ -1220,10 +1220,10 @@ static int strings_parser(s_entry * type
 int module_init(int api_version)
 {
 
-	D_("i_parser: module_init();\n");
+	D_("i_parser: module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -1233,7 +1233,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("i_parser: module_unload();\n");
+	D_("i_parser: module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_PARSE, &initng_i_parser);
 }
 
diff -rupN /tmp/initng-0.6.10.2/plugins/last/initng_last.c ./plugins/last/initng_last.c
--- /tmp/initng-0.6.10.2/plugins/last/initng_last.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/last/initng_last.c	2016-07-13 12:08:47.761159761 +0200
@@ -64,7 +64,7 @@ static int check_last(s_event * event)
 		TYPE_PROVIDED = initng_service_type_get_by_name("provided");
 
 	/* ok check with all service */
-	D_("LAST: walking through service db\n");
+	D_("LAST: walking through service db\r\n");
 	while_active_db(current)
 	{
 		/* don't check ourself */
@@ -84,13 +84,13 @@ static int check_last(s_event * event)
 		if (initng_depend_deep(current, service) == TRUE)
 		{
 			/* don't wait, because this wait is circular */
-			D_("Service %s depends on %s\n", service->name, current->name);
+			D_("Service %s depends on %s\r\n", service->name, current->name);
 			continue;
 		}
 
 		if (IS_STARTING(current))
 		{
-			D_("Service %s is also starting, and %s should be started last\n",
+			D_("Service %s is also starting, and %s should be started last\r\n",
 			   current->name, service->name);
 			return (FAIL);
 		}
@@ -102,10 +102,10 @@ static int check_last(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -116,7 +116,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&LAST);
 	initng_event_hook_unregister(&EVENT_START_DEP_MET, &check_last);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/limit/initng_limit.c ./plugins/limit/initng_limit.c
--- /tmp/initng-0.6.10.2/plugins/limit/initng_limit.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/limit/initng_limit.c	2016-07-13 12:08:47.761159761 +0200
@@ -108,11 +108,11 @@ static const char *err_desc(void)
 	switch (errno)
 	{
 		case EFAULT:
-			return ("Rlim prints outside the accessible address space.\n");
+			return ("Rlim prints outside the accessible address space.\r\n");
 		case EINVAL:
-			return ("Resource is not valid.\n");
+			return ("Resource is not valid.\r\n");
 		case EPERM:
-			return ("Unprivileged process tried to set rlimit.\n");
+			return ("Unprivileged process tried to set rlimit.\r\n");
 		default:
 			break;
 	}
@@ -138,12 +138,12 @@ static int set_limit(s_entry * soft, s_e
 	/* get the current limit data */
 	if (getrlimit(ltype, &l) != 0)
 	{
-		F_("getrlimit failed!, service %s, limit type %i: %s\n",
+		F_("getrlimit failed!, service %s, limit type %i: %s\r\n",
 		   service->name, ltype, err_desc());
 		return (-1);
 	}
 
-	D_("current: soft: %i, hard: %i\n", l.rlim_cur, l.rlim_max);
+	D_("current: soft: %i, hard: %i\r\n", l.rlim_cur, l.rlim_max);
 	/* if soft limit is set, get it */
 	if (si)
 	{
@@ -160,12 +160,12 @@ static int set_limit(s_entry * soft, s_e
 	if (l.rlim_cur > l.rlim_max)
 		l.rlim_max = l.rlim_cur;
 
-	D_("now: soft: %i, hard: %i\n", l.rlim_cur, l.rlim_max);
+	D_("now: soft: %i, hard: %i\r\n", l.rlim_cur, l.rlim_max);
 
 	/* set the limit and return status */
 	if (setrlimit(ltype, &l) != 0)
 	{
-		F_("setrlimit failed, service: %s, limit type %i: %s\n",
+		F_("setrlimit failed, service: %s, limit type %i: %s\r\n",
 		   service->name, ltype, err_desc());
 		return (-1);
 	}
@@ -188,7 +188,7 @@ static int do_limit(s_event * event)
 	assert(data->service->name);
 	assert(data->process);
 
-	D_("do_limit!\n");
+	D_("do_limit!\r\n");
 
 	/* Handle RLIMIT_AS */
 	ret += set_limit(&RLIMIT_AS_SOFT, &RLIMIT_AS_HARD, data->service, RLIMIT_AS, 1024);
@@ -244,10 +244,10 @@ static int do_limit(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -284,7 +284,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	/* remove the hook */
 	initng_event_hook_unregister(&EVENT_AFTER_FORK, &do_limit);
diff -rupN /tmp/initng-0.6.10.2/plugins/lockfile/initng_lockfile.c ./plugins/lockfile/initng_lockfile.c
--- /tmp/initng-0.6.10.2/plugins/lockfile/initng_lockfile.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/lockfile/initng_lockfile.c	2016-07-13 12:08:47.761159761 +0200
@@ -54,7 +54,7 @@ static int status_change(s_event * event
 
 	service = event->data;
 
-	D_("status change [%s]\n", service->name);
+	D_("status change [%s]\r\n", service->name);
 
 	// are we under influence of lockfile?
 	if (is(&LOCKFILE, service))
@@ -64,13 +64,13 @@ static int status_change(s_event * event
 
 		strcpy(mempcpy(lockfile, LOCKDIR, sizeof(LOCKDIR) - 1), p);
 
-		D_("lockfile path [%s]\n", lockfile);
+		D_("lockfile path [%s]\r\n", lockfile);
 		// service states from initng_is.h
 		if (IS_UP(service))
 		{
 			int fd;
 
-			D_("service got up\n");
+			D_("service got up\r\n");
 			fd = creat(lockfile, 0640);
 			if (fd != -1)
 			{
@@ -79,7 +79,7 @@ static int status_change(s_event * event
 		}
 		else if (IS_DOWN(service))
 		{
-			D_("service went down\n");
+			D_("service went down\r\n");
 			unlink(lockfile);
 		}
 	}
@@ -89,10 +89,10 @@ static int status_change(s_event * event
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -103,7 +103,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&LOCKFILE);
 	initng_event_hook_unregister(&EVENT_IS_CHANGE, &status_change);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/logfile/initng_logfile.c ./plugins/logfile/initng_logfile.c
--- /tmp/initng-0.6.10.2/plugins/logfile/initng_logfile.c	2016-07-11 14:45:42.419276000 +0200
+++ ./plugins/logfile/initng_logfile.c	2016-07-13 12:08:47.761159761 +0200
@@ -56,14 +56,14 @@ static int program_output(s_event * even
 	assert(data->service->name);
 	assert(data->process);
 
-	/*D_("%s process fd: # %i, %i, service %s, have something to say\n",
+	/*D_("%s process fd: # %i, %i, service %s, have something to say\r\n",
 	   data->process->pt->name, data->process->out_pipe[0], data->process->out_pipe[1], data->service->name); */
 
 	/* get the filename */
 	filename = get_string(&LOGFILE, data->service);
 	if (!filename)
 	{
-		D_("Logfile not set\n");
+		D_("Logfile not set\r\n");
 		return (FALSE);
 	}
 
@@ -74,16 +74,16 @@ static int program_output(s_event * even
 	fd = open(filename, O_WRONLY | O_CREAT | O_APPEND, 0644);
 	if (fd < 1)
 	{
-		F_("Error opening %s, err : %s\n", filename, strerror(errno));
+		F_("Error opening %s, err : %s\r\n", filename, strerror(errno));
 		return (FALSE);
 	}
 
 	/* Write data to logfile */
-	D_("Writing data...\n");
+	D_("Writing data...\r\n");
 	len = strlen(data->buffer_pos);
 
 	if (write(fd, data->buffer_pos, len) != len)
-		F_("Error writing to %s's log, err : %s\n", data->service->name,
+		F_("Error writing to %s's log, err : %s\r\n", data->service->name,
 		   strerror(errno));
 
 	fix_free(filename_fixed, filename);
@@ -98,7 +98,7 @@ int module_init(int api_version)
 
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -112,7 +112,7 @@ void module_unload(void)
 {
 	S_;
 
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	initng_service_data_type_unregister(&LOGFILE);
 
diff -rupN /tmp/initng-0.6.10.2/plugins/netdev/initng_netdev.c ./plugins/netdev/initng_netdev.c
--- /tmp/initng-0.6.10.2/plugins/netdev/initng_netdev.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/netdev/initng_netdev.c	2016-07-13 12:08:47.761159761 +0200
@@ -140,7 +140,7 @@ static active_db_h *net_create(const cha
 	/* create a new */
 	if (!(netdev = initng_active_db_new(name)))
 	{
-		F_("Failed to create %s\n");
+		F_("Failed to create %s\r\n");
 		return (NULL);
 	}
 
@@ -155,7 +155,7 @@ static active_db_h *net_create(const cha
 	/* register it */
 	if (!initng_active_db_register(netdev))
 	{
-		F_("Failed to register %s\n", netdev->name);
+		F_("Failed to register %s\r\n", netdev->name);
 		initng_active_db_free(netdev);
 		return (NULL);
 	}
@@ -251,7 +251,7 @@ static void net_remove(const char *name)
 	/* make sure this found is a provided type */
 	if (netdev->type != &NETDEV)
 	{
-		F_("Netdev bad type.\n");
+		F_("Netdev bad type.\r\n");
 		return;
 	}
 
@@ -278,7 +278,7 @@ static int probe_network_devices(s_event
 	netsock = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
 	if (netsock < 0)
 	{
-		F_("Unable to open a socket!\n");
+		F_("Unable to open a socket!\r\n");
 		return (FALSE);
 	}
 
@@ -287,7 +287,7 @@ static int probe_network_devices(s_event
 
 	if (ioctl(netsock, SIOCGIFCONF, &ifc) < 0)
 	{
-		F_("error: SIOCGIFCONF\n");
+		F_("error: SIOCGIFCONF\r\n");
 		return (FALSE);
 	}
 
@@ -298,7 +298,7 @@ static int probe_network_devices(s_event
 		for (i = ifc.ifc_len / sizeof(struct ifreq); --i >= 0; ifr++)
 		{
 			/*struct ifreq i; */
-			/*printf("found up interface %s.\n", ifr->ifr_name); */
+			/*printf("found up interface %s.\r\n", ifr->ifr_name); */
 			set_found(ifr->ifr_name);
 		}
 	}
@@ -349,7 +349,7 @@ int module_init(int api_version)
 	S_;
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/netprobe/initng_netprobe.c ./plugins/netprobe/initng_netprobe.c
--- /tmp/initng-0.6.10.2/plugins/netprobe/initng_netprobe.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/netprobe/initng_netprobe.c	2016-07-13 12:08:47.761159761 +0200
@@ -68,7 +68,7 @@ static int is_network(void)
 	netsock = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
 	if (netsock < 0)
 	{
-		F_("Unable to open a socket!\n");
+		F_("Unable to open a socket!\r\n");
 		return (FALSE);
 	}
 
@@ -77,11 +77,11 @@ static int is_network(void)
 
 	if (ioctl(netsock, SIOCGIFCONF, &ifc) < 0)
 	{
-		F_("error: SIOCGIFCONF\n");
+		F_("error: SIOCGIFCONF\r\n");
 		return (FALSE);
 	}
 
-	/*printf("len:%i\n", ifc.ifc_len); */
+	/*printf("len:%i\r\n", ifc.ifc_len); */
 
 
 	ifr = ifc.ifc_req;
@@ -94,7 +94,7 @@ static int is_network(void)
 			if (strcmp("lo", ifr->ifr_name) == 0)
 				continue;
 			/*struct ifreq i; */
-			D_("found up interface %s.\n", ifr->ifr_name);
+			D_("found up interface %s.\r\n", ifr->ifr_name);
 			close(netsock);
 			network_status = TRUE;
 			return (TRUE);
@@ -155,7 +155,7 @@ static int check_START_DEP_MET(s_event *
 	if (!is(&REQUIRE_NETWORK, service))
 		return (TRUE);
 
-	D_("Doing check because REQURE_NETWORK is set.\n");
+	D_("Doing check because REQURE_NETWORK is set.\r\n");
 
 	/*
 	 * I believe that we are way better probing this in kernel,
@@ -188,7 +188,7 @@ static int check_START_DEP_MET(s_event *
 	if (last_check != g.now.tv_sec)
 	{
 		network_status = is_network();
-		D_("Network status = %s\n",
+		D_("Network status = %s\r\n",
 		   network_status == TRUE ? "TRUE" : "FALSE");
 	}
 	last_check = g.now.tv_sec;
@@ -207,7 +207,7 @@ int module_init(int api_version)
 	S_;
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/ngc4/initng_ngc4.c ./plugins/ngc4/initng_ngc4.c
--- /tmp/initng-0.6.10.2/plugins/ngc4/initng_ngc4.c	2016-07-11 14:45:42.415276000 +0200
+++ ./plugins/ngc4/initng_ngc4.c	2016-07-13 12:08:47.761159761 +0200
@@ -115,7 +115,7 @@ static int fdh_handler(s_event * event)
 			/* This is a expensive test, but better safe then sorry */
 			if (!STILL_OPEN(fdh.fds))
 			{
-				D_("%i is not open anymore.\n", fdh.fds);
+				D_("%i is not open anymore.\r\n", fdh.fds);
 				fdh.fds = -1;
 				break;
 			}
@@ -137,7 +137,7 @@ static int fdh_handler(s_event * event)
 
 		case FDW_ACTION_DEBUG:
 			if (!data->debug_find_what || strstr(__FILE__, data->debug_find_what))
-				mprintf(data->debug_out, " %i: Used by plugin: %s\n",
+				mprintf(data->debug_out, " %i: Used by plugin: %s\r\n",
 					fdh.fds, __FILE__);
 			break;
 	}
@@ -176,7 +176,7 @@ static void closesock(void)
 	/* Check if we need to remove hooks */
 	if (fdh.fds < 0)
 		return;
-	D_("closesock %d\n", fdh.fds);
+	D_("closesock %d\r\n", fdh.fds);
 
 	/* close socket and set to 0 */
 	close(fdh.fds);
@@ -215,33 +215,33 @@ static void handle_client(int fd)
 
 	assert(fd > 0);
 
-	D_("handle_client(%i);\n", fd);
+	D_("handle_client(%i);\r\n", fd);
 
 	/* use file descriptor, because fread hangs here? */
 	if (TEMP_FAILURE_RETRY(recv(fd, &header, sizeof(read_header), 0)) <
 		(signed) sizeof(read_header))
 	{
-		F_("Could not read header.\n");
+		F_("Could not read header.\r\n");
 		return;
 	}
 
 	if (header.p_ver != PROTOCOL_4_VERSION)
 	{
-		F_("ngc protcol_version miss-match, server_protocol_version :%i, client_protocol_version :%i !\n Will try to hot-reload initng.", PROTOCOL_4_VERSION, header.p_ver);
+		F_("ngc protcol_version miss-match, server_protocol_version :%i, client_protocol_version :%i !\r\n Will try to hot-reload initng.", PROTOCOL_4_VERSION, header.p_ver);
 		initng_reload();
 		return;
 	}
 
 	header.l[100] = '\0';
-	D_("command type '%c', long \"%s\", protocol_version %i\n", header.c,
+	D_("command type '%c', long \"%s\", protocol_version %i\r\n", header.c,
 	   header.l, header.p_ver);
 	if (header.body_len > 0)
 	{
-		D_("There is a body to read!\n");
+		D_("There is a body to read!\r\n");
 		header_data = i_calloc(1, header.body_len + 1);
 		if (!header_data)
 		{
-			F_("Could not allocate memory for header_data\n");
+			F_("Could not allocate memory for header_data\r\n");
 			return;
 		}
 
@@ -251,7 +251,7 @@ static void handle_client(int fd)
 		if (TEMP_FAILURE_RETRY(recv(fd, header_data, header.body_len, 0)) <
 			(signed) header.body_len)
 		{
-			F_("Could not read header_data\n");
+			F_("Could not read header_data\r\n");
 			if (header_data)
 				free(header_data);
 			return;
@@ -274,7 +274,7 @@ static void handle_client(int fd)
 		result->t = VOID_COMMAND;
 		result->s = S_TRUE;
 		result->payload = 0;
-		D_("Ping received, sending pong\n");
+		D_("Ping received, sending pong\r\n");
 		send(fd, result, sizeof(result_desc), 0);
 		if (header_data)
 			free(header_data);
@@ -310,7 +310,7 @@ static void handle_client(int fd)
 	/* Make sure the command we got is valid, else return an bad result */
 	if (!tmp_cmd || tmp_cmd->com_type == 0)
 	{
-		D_("command type '%c', long \"%s\"\n", header.c, header.l);
+		D_("command type '%c', long \"%s\"\r\n", header.c, header.l);
 		result->c = header.c;
 		result->t = COMMAND_FAIL;
 		result->payload = 0;
@@ -326,7 +326,7 @@ static void handle_client(int fd)
 	/* check if command requires option, and option is not set */
 	if (tmp_cmd->opt_type == REQUIRES_OPT && header.body_len < 1)
 	{
-		D_("Command %c - %s, requires an option!\n", header.c, header.l);
+		D_("Command %c - %s, requires an option!\r\n", header.c, header.l);
 		result->c = header.c;
 		result->t = COMMAND_FAIL;
 		result->payload = 0;
@@ -340,7 +340,7 @@ static void handle_client(int fd)
 	/* check if command is not using and option, and option is set */
 	if (tmp_cmd->opt_type == NO_OPT && header.body_len > 0)
 	{
-		D_("Command %c - %s, don't want an option!\n", header.c, header.l);
+		D_("Command %c - %s, don't want an option!\r\n", header.c, header.l);
 		result->c = header.c;
 		result->t = COMMAND_FAIL;
 		result->payload = 0;
@@ -364,7 +364,7 @@ static void handle_client(int fd)
 				int ret = 0;
 
 				assert(tmp_cmd->u.int_command_call);
-				D_("Calling an int or true or false command.\n");
+				D_("Calling an int or true or false command.\r\n");
 
 				/* execute command */
 				ret = (int) (*tmp_cmd->u.
@@ -379,7 +379,7 @@ static void handle_client(int fd)
 					 send(fd, result, sizeof(result_desc),
 						  0)) != sizeof(result_desc))
 				{
-					F_("failed to send result, sent: %i of %i.\n", sent,
+					F_("failed to send result, sent: %i of %i.\r\n", sent,
 					   sizeof(result_desc));
 					break;
 				}
@@ -400,7 +400,7 @@ static void handle_client(int fd)
 				char *send_buf = NULL;
 
 				assert(tmp_cmd->u.string_command_call);
-				D_("Calling an string command.\n");
+				D_("Calling an string command.\r\n");
 
 				/* execute command */
 				send_buf = (*tmp_cmd->u.
@@ -417,7 +417,7 @@ static void handle_client(int fd)
 					 send(fd, result, sizeof(result_desc),
 						  0)) != sizeof(result_desc))
 				{
-					F_("failed to send result, sent: %i of %i.\n", sent,
+					F_("failed to send result, sent: %i of %i.\r\n", sent,
 					   sizeof(result_desc));
 					free(send_buf);
 					break;
@@ -440,7 +440,7 @@ static void handle_client(int fd)
 		case VOID_COMMAND:
 			{
 				assert(tmp_cmd->u.void_command_call);
-				D_("Calling a void command!\n");
+				D_("Calling a void command!\r\n");
 
 				/* execute command */
 				(*tmp_cmd->u.void_command_call) ((char *) header_data);
@@ -454,7 +454,7 @@ static void handle_client(int fd)
 					 send(fd, result, sizeof(result_desc),
 						  0)) != sizeof(result_desc))
 				{
-					F_("failed to send result, sent: %i of %i.\n", sent,
+					F_("failed to send result, sent: %i of %i.\r\n", sent,
 					   sizeof(result_desc));
 					break;
 				}
@@ -469,7 +469,7 @@ static void handle_client(int fd)
 				memset(&payload, 0, sizeof(s_payload));
 
 				assert(tmp_cmd->u.data_command_call);
-				D_("Calling an data_command.\n");
+				D_("Calling an data_command.\r\n");
 
 				/* execute command */
 				(*tmp_cmd->u.data_command_call) ((char *) header_data,
@@ -478,7 +478,7 @@ static void handle_client(int fd)
 				/* check that there was any payload */
 				if (payload.s < 1)
 				{
-					W_("Payload command, that dont set any payload size.\n");
+					W_("Payload command, that dont set any payload size.\r\n");
 				}
 
 				/* write an header respond */
@@ -490,7 +490,7 @@ static void handle_client(int fd)
 					 send(fd, result, sizeof(result_desc),
 						  0)) != sizeof(result_desc))
 				{
-					F_("failed to send result, sent: %i of %i.\n", sent,
+					F_("failed to send result, sent: %i of %i.\r\n", sent,
 					   sizeof(result_desc));
 					free(payload.p);
 					break;
@@ -500,7 +500,7 @@ static void handle_client(int fd)
 				usleep(1);
 
 				/* send the payload */
-				D_("Sending a payload of %i bytes.\n", result->payload);
+				D_("Sending a payload of %i bytes.\r\n", result->payload);
 				if ((sent =
 					 send(fd, payload.p, result->payload,
 						  0)) != (signed) result->payload)
@@ -523,18 +523,18 @@ static void handle_client(int fd)
 				 send(fd, result, sizeof(result_desc),
 					  0)) != (signed) sizeof(result_desc))
 			{
-				F_("failed to send result, sent: %i of %i.\n", sent,
+				F_("failed to send result, sent: %i of %i.\r\n", sent,
 				   sizeof(result_desc));
 				break;
 			}
 			/* TODO: really continue?? */
 
-			D_("Invalid command type '%c', line '%s'\n", header.c, header.l);
+			D_("Invalid command type '%c', line '%s'\r\n", header.c, header.l);
 			if (header_data)
 				free(header_data);
 			return;
 	}
-	D_("Returned successfully.\n");
+	D_("Returned successfully.\r\n");
 	if (header_data)
 		free(header_data);
 	if (result)
@@ -552,14 +552,14 @@ void accepted_client(f_module_h * from,
 	if (from != &fdh)
 		return;
 
-	D_("Got here from fd hook.\n");
+	D_("Got here from fd hook.\r\n");
 	/* we try to fix socket after every service start
 	   if it fails here chances are a user screwed it
 	   up, and we shouldn't manually try to fix anything. */
 	if (fdh.fds <= 0)
 	{
 		/* socket is invalid but we were called, call closesocket to make sure it wont happen again */
-		F_("accepted client called with fdh.fds %d, report bug\nWill repopen socket.", fdh.fds);
+		F_("accepted client called with fdh.fds %d, report bug\r\nWill repopen socket.", fdh.fds);
 		open_socket();
 		return;
 	}
@@ -578,12 +578,12 @@ void accepted_client(f_module_h * from,
 	/* temporary unavailable */
 	if ((errno == EAGAIN) || (errno == EWOULDBLOCK))
 	{
-		W_("errno = EAGAIN!\n");
+		W_("errno = EAGAIN!\r\n");
 		return;
 	}
 
 	/* This'll generally happen on shutdown, don't cry about it. */
-	D_("Error accepting socket %d, %s\n", fdh.fds, strerror(errno));
+	D_("Error accepting socket %d, %s\r\n", fdh.fds, strerror(errno));
 	closesock();
 	return;
 }
@@ -597,7 +597,7 @@ static int sendping()
 	result_desc result;
 
 
-	D_("Sending ping\n");
+	D_("Sending ping\r\n");
 
 	memset(&header, 0, sizeof(read_header));
 	header.p_ver = PROTOCOL_4_VERSION;
@@ -606,7 +606,7 @@ static int sendping()
 	client = socket(PF_UNIX, SOCK_STREAM, 0);
 	if (client < 0)
 	{
-		F_("Failed to init socket\n");
+		F_("Failed to init socket\r\n");
 		return FALSE;
 	}
 
@@ -631,30 +631,30 @@ static int sendping()
 	header.c = 'X';
 	header.l[0] = '\0';
 
-	D_("Sending PING..\n");
+	D_("Sending PING..\r\n");
 	if (write(client, &header, sizeof(read_header)) <
 		(signed) sizeof(read_header))
 	{
-		F_("Unable to send PING!\n");
+		F_("Unable to send PING!\r\n");
 		close(client);
 		return (FALSE);
 	}
-	D_("PING sent..\n");
+	D_("PING sent..\r\n");
 
 	/* Accept "server side" */
 	accepted_client(&fdh, FDW_READ);
 
-	D_("Reading PONG..\n");
+	D_("Reading PONG..\r\n");
 	if ((read(client, &result, sizeof(result_desc)) <
 		 (signed) sizeof(result_desc)) || result.c != 'Y'
 		|| result.s != S_TRUE)
 	{
-		F_("Unable to receive PONG!\n");
+		F_("Unable to receive PONG!\r\n");
 		close(client);
 		return (FALSE);
 	}
 
-	D_("Got pong\n");
+	D_("Got pong\r\n");
 
 	return TRUE;
 }
@@ -665,7 +665,7 @@ static int open_socket()
 	/*    int flags; */
 	struct sockaddr_un serv_sockname;
 
-	D_("Creating " SOCKET_4_ROOTPATH " dir\n");
+	D_("Creating " SOCKET_4_ROOTPATH " dir\r\n");
 
 	closesock();
 
@@ -675,7 +675,7 @@ static int open_socket()
 	{
 		if (errno != EROFS)
 			F_("Could not create " SOCKET_4_ROOTPATH
-			   " : %s, may be / fs not mounted read-write yet?, will retry until I succeed.\n",
+			   " : %s, may be / fs not mounted read-write yet?, will retry until I succeed.\r\n",
 			   strerror(errno));
 		return (FALSE);
 	}
@@ -687,7 +687,7 @@ static int open_socket()
 		if (errno == ENOENT || errno == EROFS)
 			return (FALSE);
 
-		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\n",
+		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\r\n",
 		   SOCKET_4_ROOTPATH);
 	}
 
@@ -695,7 +695,7 @@ static int open_socket()
 	fdh.fds = socket(PF_UNIX, SOCK_STREAM, 0);
 	if (fdh.fds < 1)
 	{
-		F_("Failed to init socket (%s)\n", strerror(errno));
+		F_("Failed to init socket (%s)\r\n", strerror(errno));
 		fdh.fds = -1;
 		return (FALSE);
 	}
@@ -706,14 +706,14 @@ static int open_socket()
 	/*    flags = fcntl(fdh.fds, F_GETFL);
 	   if (flags < 0)
 	   {
-	   F_("Failed to fcntl fdh.fds\n");
+	   F_("Failed to fcntl fdh.fds\r\n");
 	   closesock();
 	   return (FALSE);
 	   }
 	   flags |= O_NONBLOCK;
 	   if (fcntl(fdh.fds, F_SETFL, flags) < 0)
 	   {
-	   F_("Failed to set fdh.fds O_NONBLOCK\n");
+	   F_("Failed to set fdh.fds O_NONBLOCK\r\n");
 	   closesock();
 	   return (FALSE);
 	   } */
@@ -733,7 +733,7 @@ static int open_socket()
 		 (strlen(serv_sockname.sun_path) +
 		  sizeof(serv_sockname.sun_family))) < 0)
 	{
-		F_("Error binding to socket (errno: %d str: '%s')\n", errno,
+		F_("Error binding to socket (errno: %d str: '%s')\r\n", errno,
 		   strerror(errno));
 		closesock();
 		unlink(serv_sockname.sun_path);
@@ -743,7 +743,7 @@ static int open_socket()
 	/* chmod socket for root only use */
 	if (chmod(serv_sockname.sun_path, S_IRUSR | S_IWUSR) == -1)
 	{
-		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\n",
+		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\r\n",
 		   serv_sockname.sun_path);
 		closesock();
 		return (FALSE);
@@ -755,7 +755,7 @@ static int open_socket()
 	/* Listen to socket */
 	if (listen(fdh.fds, 5))
 	{
-		F_("Error on listen (errno: %d str: '%s')\n", errno, strerror(errno));
+		F_("Error on listen (errno: %d str: '%s')\r\n", errno, strerror(errno));
 		closesock();
 		unlink(serv_sockname.sun_path);
 		return (FALSE);
@@ -766,7 +766,7 @@ static int open_socket()
 	/* Run check : */
 	if (!sendping())
 	{
-		F_("Sendping check failed, ngc2 communication not available (if you see this open a bug)\n");
+		F_("Sendping check failed, ngc2 communication not available (if you see this open a bug)\r\n");
 		closesock();
 		return (FALSE);
 	}
@@ -787,12 +787,12 @@ static int check_socket(s_event * event)
 	if (*signal != SIGHUP)
 		return (TRUE);
 
-	D_("Checking socket\n");
+	D_("Checking socket\r\n");
 
 	/* Check if socket needs reopening */
 	if (fdh.fds <= 0)
 	{
-		D_("fdh.fds not set, opening new socket.\n");
+		D_("fdh.fds not set, opening new socket.\r\n");
 		open_socket();
 		return (TRUE);
 	}
@@ -801,7 +801,7 @@ static int check_socket(s_event * event)
 	memset(&st, 0, sizeof(st));
 	if (stat(socket_filename, &st) < 0)
 	{
-		W_("Stat failed! Opening new socket.\n");
+		W_("Stat failed! Opening new socket.\r\n");
 		open_socket();
 		return (TRUE);
 	}
@@ -810,12 +810,12 @@ static int check_socket(s_event * event)
 	if (st.st_dev != sock_stat.st_dev || st.st_ino != sock_stat.st_ino
 		|| st.st_mtime != sock_stat.st_mtime)
 	{
-		F_("Invalid socket found, reopening\n");
+		F_("Invalid socket found, reopening\r\n");
 		open_socket();
 		return (TRUE);
 	}
 
-	D_("Socket ok.\n");
+	D_("Socket ok.\r\n");
 	return (TRUE);
 }
 
@@ -1264,7 +1264,7 @@ static void cmd_states(char *arg, s_payl
 	payload->p = (state_row *) i_calloc(no_states, sizeof(state_row));
 	if (!payload->p)
 	{
-		F_("Unable to allocate space for payload!\n");
+		F_("Unable to allocate space for payload!\r\n");
 		return;
 	}
 
@@ -1275,7 +1275,7 @@ static void cmd_states(char *arg, s_payl
 		/* make sure we wont buffer overrun */
 		if (i >= no_states)
 		{
-			F_("More state then we allocated for\n");
+			F_("More state then we allocated for\r\n");
 			return;
 		}
 
@@ -1494,10 +1494,10 @@ s_command RESTART = { 'r', "restart", PA
 
 int module_init(int api_version)
 {
-	D_("module_init(ngc2);\n");
+	D_("module_init(ngc2);\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -1517,9 +1517,9 @@ int module_init(int api_version)
 	else
 		return (TRUE);
 
-	D_("Socket is: %s\n", socket_filename);
+	D_("Socket is: %s\r\n", socket_filename);
 
-	D_("adding hook, that will reopen socket, for every started service.\n");
+	D_("adding hook, that will reopen socket, for every started service.\r\n");
 	initng_event_hook_register(&EVENT_FD_WATCHER, &fdh_handler);
 	initng_event_hook_register(&EVENT_SIGNAL, &check_socket);
 
@@ -1537,14 +1537,14 @@ int module_init(int api_version)
 	/* do the first socket directly */
 	open_socket();
 
-	D_("ngc2.so.0.0 loaded!\n");
+	D_("ngc2.so.0.0 loaded!\r\n");
 	return (TRUE);
 }
 
 
 void module_unload(void)
 {
-	D_("module_unload(ngc2);\n");
+	D_("module_unload(ngc2);\r\n");
 	if (g.i_am != I_AM_INIT && g.i_am != I_AM_FAKE_INIT)
 		return;
 
@@ -1555,6 +1555,6 @@ void module_unload(void)
 	initng_event_hook_unregister(&EVENT_FD_WATCHER, &fdh_handler);
 	initng_event_hook_unregister(&EVENT_SIGNAL, &check_socket);
 
-	D_("ngc2.so.0.0 unloaded!\n");
+	D_("ngc2.so.0.0 unloaded!\r\n");
 
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/ngc4/libngcclient.c ./plugins/ngc4/libngcclient.c
--- /tmp/initng-0.6.10.2/plugins/ngc4/libngcclient.c	2016-07-11 14:45:42.419276000 +0200
+++ ./plugins/ngc4/libngcclient.c	2016-07-13 12:08:47.761159761 +0200
@@ -143,7 +143,7 @@ reply *ngcclient_send_command(const char
 	if (o)
 		header.body_len = strlen(o) * sizeof(char);
 
-	/*print_out("Sending: %c, %s, %s\n", c, l ,o); */
+	/*print_out("Sending: %c, %s, %s\r\n", c, l ,o); */
 
 	/* open the socket two way to initng */
 	if ((sock = ngcclient_open_socket(path)) < 1)
@@ -188,7 +188,7 @@ reply *ngcclient_send_command(const char
 		rep->result.s = TRUE;
 		rep->result.c = 'c';
 		rep->result.t = STRING_COMMAND;
-		strcpy(rep->result.version, "Fake reply, not from initng\n");
+		strcpy(rep->result.version, "Fake reply, not from initng\r\n");
 		rep->result.p_ver = PROTOCOL_4_VERSION;
 		rep->payload = (char *) strdup("On ngc -c, initng reloads itself. By that it closes the connection to ngc and so can not return if this command succeds or not.");
 		rep->result.payload = strlen(rep->payload) * sizeof(char);
@@ -210,8 +210,8 @@ reply *ngcclient_send_command(const char
 	}
 
 
-	/*printf("Res: %i should be %i # errno:%i\n", res, sizeof(result_desc), errno);
-	   printf("result: s: %i, c: '%c', t: %i, version: \"%.10s...\", p_ver: %i, payload: %i\n",
+	/*printf("Res: %i should be %i # errno:%i\r\n", res, sizeof(result_desc), errno);
+	   printf("result: s: %i, c: '%c', t: %i, version: \"%.10s...\", p_ver: %i, payload: %i\r\n",
 	   rep->result.s, rep->result.c, rep->result.t, rep->result.version,
 	   rep->result.p_ver, rep->result.payload); */
 
@@ -219,7 +219,7 @@ reply *ngcclient_send_command(const char
 	/* check that protocol matches */
 	if (rep->result.p_ver != PROTOCOL_4_VERSION)
 	{
-		printf("protocol missmatch %i:%i\n", rep->result.p_ver,
+		printf("protocol missmatch %i:%i\r\n", rep->result.p_ver,
 			   PROTOCOL_4_VERSION);
 		ngcclient_error = "PROTOCOL_4_VERSION missmatch!";
 		free(rep);
@@ -267,7 +267,7 @@ reply *ngcclient_send_command(const char
 	/* if there was a payload, download that too */
 	if (rep->result.payload > 0)
 	{
-		/*printf("There is a payload.\n"); */
+		/*printf("There is a payload.\r\n"); */
 
 		/* i allocate 1 byte extra, to be sure a null on the end */
 		rep->payload = calloc(1, rep->result.payload + 1);
@@ -303,7 +303,7 @@ static int mprintf(char **p, const char
 
 	assert(p);
 
-	/*printf("\n\nmprintf(%s);\n", format); */
+	/*printf("\r\n\r\nmprintf(%s);\r\n", format); */
 
 	/* count old chars */
 	if (*p)
@@ -322,7 +322,7 @@ static int mprintf(char **p, const char
 	 * have room.
 	 * Also have a check that it succeds.
 	 */
-	/*printf("Changing size to %i\n", len + add_len); */
+	/*printf("Changing size to %i\r\n", len + add_len); */
 	if (!(*p = realloc(*p, ((len + add_len) * sizeof(char)))))
 		return (-1);
 
@@ -338,16 +338,16 @@ static int mprintf(char **p, const char
 		/* check if that was enouth */
 		if (done > -1 && done < add_len)
 		{
-			/*printf("GOOD: done : %i, len: %i\n", done, add_len); */
+			/*printf("GOOD: done : %i, len: %i\r\n", done, add_len); */
 
 			/* Ok return happily */
 			return (done);
 		}
-		/*printf("BAD: done : %i, len: %i\n", done, add_len); */
+		/*printf("BAD: done : %i, len: %i\r\n", done, add_len); */
 
 		/* try increase it a bit. */
 		add_len = (done < 0 ? add_len * 2 : done + 1);
-		/*printf("Changing size to %i\n", len + add_len); */
+		/*printf("Changing size to %i\r\n", len + add_len); */
 		if (!(*p = realloc(*p, ((len + add_len) * sizeof(char)))))
 			return (-1);
 
@@ -387,7 +387,7 @@ char *ngcclient_reply_to_string(reply *
 		case STRING_COMMAND:
 			if (!rep->payload || rep->result.payload == 0)
 			{
-				string = strdup("No payload.\n");
+				string = strdup("No payload.\r\n");
 				return (string);
 			}
 			string = (char *) rep->payload;
@@ -396,7 +396,7 @@ char *ngcclient_reply_to_string(reply *
 		case PAYLOAD_COMMAND:
 			if (!rep->payload || rep->result.payload == 0)
 			{
-				string = strdup("No payload.\n");
+				string = strdup("No payload.\r\n");
 				return (string);
 			}
 
@@ -416,7 +416,7 @@ char *ngcclient_reply_to_string(reply *
 					string = ngc_state_entry(rep, ansi);
 					break;
 				default:
-					printf("UNKWNOWN PAYLOAD: %i\n",
+					printf("UNKWNOWN PAYLOAD: %i\r\n",
 						   (int) ((int *) rep->payload)[0]);
 					break;
 			}
@@ -424,7 +424,7 @@ char *ngcclient_reply_to_string(reply *
 		case INT_COMMAND:
 			if (!rep->payload || rep->result.payload == 0)
 			{
-				string = strdup("No payload.\n");
+				string = strdup("No payload.\r\n");
 				return (string);
 			}
 			{
@@ -445,7 +445,7 @@ char *ngcclient_reply_to_string(reply *
 		case TRUE_OR_FALSE_COMMAND:
 			if (!rep->payload || rep->result.payload == 0)
 			{
-				string = strdup("No payload.\n");
+				string = strdup("No payload.\r\n");
 				return (string);
 			}
 			{
@@ -481,11 +481,11 @@ char *ngc_hlp(reply * rep, int ansi)
 	help_row *row = rep->payload;
 
 	/* print head */
-	mprintf(&string, " ngc understand this commands:\n");
+	mprintf(&string, " ngc understand this commands:\r\n");
 	mprintf(&string,
-			" short Option                          : description\n");
+			" short Option                          : description\r\n");
 	mprintf(&string,
-			" ----------------------------------------------------------\n");
+			" ----------------------------------------------------------\r\n");
 
 	while (row->dt == HELP_ROW)
 	{
@@ -532,18 +532,18 @@ char *ngc_hlp(reply * rep, int ansi)
 			if (ansi)
 			{
 				mprintf(&string,
-						" [" C_FG_LIGHT_RED "-%c" C_OFF "] --%-40s: %s\n",
+						" [" C_FG_LIGHT_RED "-%c" C_OFF "] --%-40s: %s\r\n",
 						row->c, lname, row->d);
 			}
 			else
 			{
-				mprintf(&string, " [-%c] --%-40s: %s\n",
+				mprintf(&string, " [-%c] --%-40s: %s\r\n",
 						row->c, lname, row->d);
 			}
 		}
 		else
 		{
-			mprintf(&string, "       --%-40s: %s\n", lname, row->d);
+			mprintf(&string, "       --%-40s: %s\r\n", lname, row->d);
 		}
 
 		row++;
@@ -558,18 +558,18 @@ char *ngc_state_entry(reply * rep, int a
 	char *string = NULL;
 
 	mprintf(&string,
-			" I State    State name                    Description\n");
+			" I State    State name                    Description\r\n");
 	mprintf(&string,
-			" ----------------------------------------------------------\n");
+			" ----------------------------------------------------------\r\n");
 
 	while (row->dt == STATE_ROW)
 	{
 		if (ansi)
-			mprintf(&string, " %i %s%-8s %-29s %s\n" C_OFF, row->is,
+			mprintf(&string, " %i %s%-8s %-29s %s\r\n" C_OFF, row->is,
 					is_to_ansi(row->is), is_to_string(row->is), row->name,
 					row->desc);
 		else
-			mprintf(&string, " %i %-8s %-29s %s\n", row->is,
+			mprintf(&string, " %i %-8s %-29s %s\r\n", row->is,
 					is_to_string(row->is), row->name, row->desc);
 
 		row++;
@@ -594,17 +594,17 @@ char *ngc_active_db(reply * rep, int ans
 		mprintf(&string, C_FG_LIGHT_RED " hh:mm:ss" C_OFF
 				C_FG_CYAN " T " C_OFF
 				"service                             : " C_FG_NEON_GREEN
-				"status\n" C_OFF);
+				"status\r\n" C_OFF);
 	}
 	else
 	{
 		mprintf(&string,
-				" hh:mm:ss T service                             : status\n");
+				" hh:mm:ss T service                             : status\r\n");
 	}
 
 	/* don't make it weighter! only 80chars, not weighter. */
 	mprintf(&string,
-			" ----------------------------------------------------------------\n");
+			" ----------------------------------------------------------------\r\n");
 
 	while (row->dt == ACTIVE_ROW)
 	{
@@ -629,12 +629,12 @@ char *ngc_active_db(reply * rep, int ans
 
 		if (ansi)
 		{
-			mprintf(&string, "%s%s" C_OFF "\n", is_to_ansi(row->is),
+			mprintf(&string, "%s%s" C_OFF "\r\n", is_to_ansi(row->is),
 					row->state);
 		}
 		else
 		{
-			mprintf(&string, "%s\n", row->state);
+			mprintf(&string, "%s\r\n", row->state);
 		}
 
 		row++;
@@ -695,16 +695,16 @@ char *ngc_option_db(reply * rep, int ans
 	{
 		mprintf(&string,
 				" " C_FG_LIGHT_RED "%-10s" C_OFF C_FG_CYAN "%-8s" C_OFF
-				" %-24s %s\n", "Where", "Type", "Name", "Description");
+				" %-24s %s\r\n", "Where", "Type", "Name", "Description");
 	}
 	else
 	{
-		mprintf(&string, " %-10s%-8s %-24s %s\n", "Where", "Type", "Name",
+		mprintf(&string, " %-10s%-8s %-24s %s\r\n", "Where", "Type", "Name",
 				"Description");
 	}
 
 	mprintf(&string,
-			" ----------------------------------------------------------------\n");
+			" ----------------------------------------------------------------\r\n");
 
 	while (row->dt == OPTION_ROW)
 	{
@@ -752,11 +752,11 @@ char *ngc_option_db(reply * rep, int ans
 		{
 			mprintf(&string,
 					" " C_FG_LIGHT_RED "%-10s" C_OFF C_FG_CYAN "%-8s" C_OFF
-					" %-24s %s\n", row->o, ct, row->n, row->d);
+					" %-24s %s\r\n", row->o, ct, row->n, row->d);
 		}
 		else
 		{
-			mprintf(&string, " %-10s%-8s %-24s %s\n", row->o, ct, row->n,
+			mprintf(&string, " %-10s%-8s %-24s %s\r\n", row->o, ct, row->n,
 					row->d);
 		}
 		row++;
diff -rupN /tmp/initng-0.6.10.2/plugins/ngc4/ngc4.c ./plugins/ngc4/ngc4.c
--- /tmp/initng-0.6.10.2/plugins/ngc4/ngc4.c	2006-05-18 12:15:50.000000000 +0200
+++ ./plugins/ngc4/ngc4.c	2016-07-13 12:08:47.761159761 +0200
@@ -63,7 +63,7 @@ int ansi = FALSE;
 
 #define print_out(...); { if(quiet==FALSE) printf(__VA_ARGS__ ); }
 
-#define C_ERROR "\n  "C_FG_RED" [ERROR] -->> "C_OFF
+#define C_ERROR "\r\n  "C_FG_RED" [ERROR] -->> "C_OFF
 
 #define TMP_QUIET if(quiet==FALSE) quiet=3;
 #define TMP_UNQUIET if(quiet==3) quiet=FALSE;
@@ -75,26 +75,26 @@ static int service_change(char *service,
 {
 	if (strcmp(service_starting_stopping->name, service) != 0)
 	{
-		/*printf("Dont wanna listen on \"%s\"\n", service); */
+		/*printf("Dont wanna listen on \"%s\"\r\n", service); */
 		return (1);
 	}
 
 	switch (is)
 	{
 		case IS_UP:
-			printf("\nService \"%s\" is started!\n", service);
+			printf("\r\nService \"%s\" is started!\r\n", service);
 			/* Close the event socket, and ngclient_exec() should return */
 			return (0);
 		case IS_DOWN:
-			printf("\nService \"%s\" have stopped!\n", service);
+			printf("\r\nService \"%s\" have stopped!\r\n", service);
 			/* Close the event socket, and ngclient_exec() should return */
 			return (0);
 		case IS_FAILED:
-			printf("\nService \"%s\" have failed!\n", service);
+			printf("\r\nService \"%s\" have failed!\r\n", service);
 			/* Close the event socket, and ngclient_exec() should return */
 			return (0);
 		default:
-			printf("\nService \"%s\" is now in state: %s\n", service, state);
+			printf("\r\nService \"%s\" is now in state: %s\r\n", service, state);
 	}
 
 	return (1);
@@ -122,27 +122,27 @@ static int start_or_stop_command(reply *
 	switch (service_starting_stopping->is)
 	{
 		case IS_STARTING:
-			print_out("Starting service \"%s\", hang on..\n",
+			print_out("Starting service \"%s\", hang on..\r\n",
 					  service_starting_stopping->name);
 			break;
 		case IS_STOPPING:
-			print_out("Stopping service \"%s\", hang on..\n\n\n",
+			print_out("Stopping service \"%s\", hang on..\r\n\r\n\r\n",
 					  service_starting_stopping->name);
 			break;
 		case IS_DOWN:
-			printf("Service %s is down.\n\n\n",
+			printf("Service %s is down.\r\n\r\n\r\n",
 				   service_starting_stopping->name);
 			return (FALSE);
 
 		case IS_UP:
-			printf("Service %s is up.\n", service_starting_stopping->name);
+			printf("Service %s is up.\r\n", service_starting_stopping->name);
 			return (FALSE);
 
 		case IS_FAILED:
-			printf("Service \"%s\" previously failed (%s),\nit needs to be zaped \"ngc -z %s\", so initng will forget the failing state before you are able to retry start it.\n", service_starting_stopping->name, service_starting_stopping->state, service_starting_stopping->name);
+			printf("Service \"%s\" previously failed (%s),\r\nit needs to be zaped \"ngc -z %s\", so initng will forget the failing state before you are able to retry start it.\r\n", service_starting_stopping->name, service_starting_stopping->state, service_starting_stopping->name);
 			return (FALSE);
 		default:
-			print_out("Service has state: %s\n",
+			print_out("Service has state: %s\r\n",
 					  service_starting_stopping->state);
 			return (FALSE);
 	}
@@ -161,13 +161,13 @@ static int start_or_stop_command(reply *
 	/* if open_socket fails, ngeclient_error is set */
 	if (ngeclient_error)
 	{
-		fprintf(stderr, "%s\n", ngeclient_error);
+		fprintf(stderr, "%s\r\n", ngeclient_error);
 		return (FALSE);
 	}
 
 	if (!c)
 	{
-		fprintf(stderr, "NGE connect error\n");
+		fprintf(stderr, "NGE connect error\r\n");
 		return (FALSE);
 	}
 
@@ -201,7 +201,7 @@ static int start_or_stop_command(reply *
 	/* check for failures */
 	if (ngeclient_error)
 	{
-		fprintf(stderr, "%s\n", ngeclient_error);
+		fprintf(stderr, "%s\r\n", ngeclient_error);
 	}
 
 
@@ -219,7 +219,7 @@ static int send_and_handle(const char c,
 
 
 
-	/*printf("send_and_handle(%c, %s, %s);\n", c, l, opt); */
+	/*printf("send_and_handle(%c, %s, %s);\r\n", c, l, opt); */
 
 
 	if (debug == TRUE)
@@ -233,13 +233,13 @@ static int send_and_handle(const char c,
 
 	if (ngcclient_error)
 	{
-		print_out("%s\n", ngcclient_error);
+		print_out("%s\r\n", ngcclient_error);
 		return (FALSE);
 	}
 
 	if (!rep)
 	{
-		print_out("Command failed.\n");
+		print_out("Command failed.\r\n");
 		return (FALSE);
 	}
 
@@ -255,7 +255,7 @@ static int send_and_handle(const char c,
 					  C_FG_LIGHT_BLUE "ontrol (" C_FG_MAGENTA "%s"
 					  C_FG_LIGHT_BLUE " )" C_OFF C_FG_LIGHT_RED
 					  " by Jimmy Wennlund " C_OFF C_FG_NEON_GREEN
-					  "http://www.initng.org/" C_OFF "\n", VERSION);
+					  "http://www.initng.org/" C_OFF "\r\n", VERSION);
 		}
 		header_printed = TRUE;
 	}
@@ -279,7 +279,7 @@ static int send_and_handle(const char c,
 	if (quiet == FALSE)
 	{
 		string = ngcclient_reply_to_string(rep, ansi);
-		print_out("\n\n%s\n", string);
+		print_out("\r\n\r\n%s\r\n", string);
 		if (string)
 			free(string);
 	}
@@ -346,7 +346,7 @@ int main(int argc, char *argv[])
 			Argv += 3;
 
 		/* Only for testing.
-		 * printf("Argv: %s argv[0]: %s\n", Argv, argv[0]);
+		 * printf("Argv: %s argv[0]: %s\r\n", Argv, argv[0]);
 		 */
 	}
 
@@ -354,7 +354,7 @@ int main(int argc, char *argv[])
 	if (strncasecmp(Argv, "ngd", 3) == 0)
 	{
 		if (ansi)
-			print_out(C_FG_YELLOW "Warning. This is ngdc!" C_OFF "\n");
+			print_out(C_FG_YELLOW "Warning. This is ngdc!" C_OFF "\r\n");
 		debug = TRUE;
 	}
 
@@ -364,7 +364,7 @@ int main(int argc, char *argv[])
 		if (ansi)
 			print_out(C_ERROR
 					  "You need root access to communicate with initng." C_OFF
-					  "\n");
+					  "\r\n");
 		exit(2);
 	}
 
@@ -372,7 +372,7 @@ int main(int argc, char *argv[])
 	if (strcasecmp(Argv, "ngc") != 0 && strcasecmp(Argv, "ngdc") != 0 &&
 		strcasecmp(Argv, "ngc4") != 0 && strcasecmp(Argv, "ngdc4") != 0)
 	{
-		/*printf("Not standard ngc or ngdc command.\n"); */
+		/*printf("Not standard ngc or ngdc command.\r\n"); */
 		/* check if argv0 starts with "ng..." */
 		if (Argv[0] == 'n' && Argv[1] == 'g' && Argv[2])
 		{
@@ -467,6 +467,6 @@ int main(int argc, char *argv[])
 
 
 	}
-	print_out("\n\n");
+	print_out("\r\n\r\n");
 	exit(0);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/ngcs/initng_ngcs.c ./plugins/ngcs/initng_ngcs.c
--- /tmp/initng-0.6.10.2/plugins/ngcs/initng_ngcs.c	2007-03-04 04:53:22.000000000 +0100
+++ ./plugins/ngcs/initng_ngcs.c	2016-07-13 12:08:47.761159761 +0200
@@ -131,7 +131,7 @@ static int fdh_handler(s_event * event)
 			/* This is a expensive test, but better safe then sorry */
 			if (!STILL_OPEN(fdh.fds))
 			{
-				D_("%i is not open anymore.\n", fdh.fds);
+				D_("%i is not open anymore.\r\n", fdh.fds);
 				fdh.fds = -1;
 				break;
 			}
@@ -153,7 +153,7 @@ static int fdh_handler(s_event * event)
 
 		case FDW_ACTION_DEBUG:
 			if (!data->debug_find_what || strstr(__FILE__, data->debug_find_what))
-				mprintf(data->debug_out, " %i: Used by plugin: %s\n",
+				mprintf(data->debug_out, " %i: Used by plugin: %s\r\n",
 					fdh.fds, __FILE__);
 			break;
 	}
@@ -187,7 +187,7 @@ static int conn_fdw_handler(s_event * ev
 				/* This is a expensive test, but better safe then sorry */
 				if (!STILL_OPEN(current->fdw.fds))
 				{
-					D_("%i is not open anymore.\n", current->fdw.fds);
+					D_("%i is not open anymore.\r\n", current->fdw.fds);
 					current->fdw.fds = -1;
 					break;
 				}
@@ -209,7 +209,7 @@ static int conn_fdw_handler(s_event * ev
 
 			case FDW_ACTION_DEBUG:
 				if (!data->debug_find_what || strstr(__FILE__, data->debug_find_what))
-					mprintf(data->debug_out, " %i: Used by plugin: %s\n",
+					mprintf(data->debug_out, " %i: Used by plugin: %s\r\n",
 						current->fdw.fds, __FILE__);
 				break;
 		}
@@ -224,7 +224,7 @@ static void closesock(void)
 	/* Check if we need to remove hooks */
 	if (fdh.fds < 0)
 		return;
-	D_("closesock %d\n", fdh.fds);
+	D_("closesock %d\r\n", fdh.fds);
 
 	/* close socket and set to 0 */
 	close(fdh.fds);
@@ -245,16 +245,16 @@ void accepted_client(f_module_h * from,
 	if (from != &fdh)
 		return;
 
-	D_("Got here from fd hook.\n");
+	D_("Got here from fd hook.\r\n");
 	/* we try to fix socket after every service start
 	   if it fails here chances are a user screwed it
 	   up, and we shouldn't manually try to fix anything. */
 	if (fdh.fds <= 0)
 	{
 		/* socket is invalid but we were called, call closesocket to make sure it wont happen again */
-		F_("accepted client called with fdh.fds %d, report bug\n", fdh.fds);
+		F_("accepted client called with fdh.fds %d, report bug\r\n", fdh.fds);
 		closesock();
-		F_("Attempting to reopen socket\n");
+		F_("Attempting to reopen socket\r\n");
 		open_socket();
 		return;
 	}
@@ -264,7 +264,7 @@ void accepted_client(f_module_h * from,
 	{
 		initng_fd_set_cloexec(newsock);
 
-		D_("read socket open, now setting options\n");
+		D_("read socket open, now setting options\r\n");
 		conn = (ngcs_svr_conn *) i_calloc(1, sizeof(ngcs_svr_conn));
 		if (conn == NULL)
 		{
@@ -307,12 +307,12 @@ void accepted_client(f_module_h * from,
 	/* temporary unavailable */
 	if ((errno == EAGAIN) || (errno == EWOULDBLOCK))
 	{
-		W_("errno = EAGAIN!\n");
+		W_("errno = EAGAIN!\r\n");
 		return;
 	}
 
 	/* This'll generally happen on shutdown, don't cry about it. */
-	D_("Error accepting socket %d, %s\n", fdh.fds, strerror(errno));
+	D_("Error accepting socket %d, %s\r\n", fdh.fds, strerror(errno));
 	closesock();
 	return;
 }
@@ -355,7 +355,7 @@ static void handle_chan0(ngcs_chan * cha
 	}
 	else if (type != NGCS_TYPE_STRUCT || len == 0)
 	{
-		F_("Invalid chan0 message with type=%i, len=%i\n", type, len);
+		F_("Invalid chan0 message with type=%i, len=%i\r\n", type, len);
 		ngcs_chan_send(chan, NGCS_TYPE_ERROR, 11, "BAD_REQUEST");
 		return;
 	}
@@ -365,7 +365,7 @@ static void handle_chan0(ngcs_chan * cha
 	req.argc = ngcs_unpack(data, len, &req.argv);
 	if (req.argc < 0)
 	{
-		F_("Unpacking failed!\n");
+		F_("Unpacking failed!\r\n");
 		if (req.argc >= 0)
 			free(req.argv);
 		ngcs_chan_send(chan, NGCS_TYPE_ERROR, 11, "BAD_REQUEST");
@@ -375,7 +375,7 @@ static void handle_chan0(ngcs_chan * cha
 
 	if (req.argc <= 0 || req.argv[0].type != NGCS_TYPE_STRING)
 	{
-		F_("Bad unpacked message\n");
+		F_("Bad unpacked message\r\n");
 		if (req.argc >= 0)
 			free(req.argv);
 		ngcs_chan_send(chan, NGCS_TYPE_ERROR, 11, "BAD_REQUEST");
@@ -417,7 +417,7 @@ static void handle_chan0(ngcs_chan * cha
 		}
 	}
 
-	F_("Unknown ngcs command: %s\n", req.argv[0].d.s);
+	F_("Unknown ngcs command: %s\r\n", req.argv[0].d.s);
 	ngcs_chan_send(chan, NGCS_TYPE_ERROR, 17, "COMMAND_NOT_FOUND");
 	ngcs_free_unpack(req.argc, req.argv);
 	return;
@@ -516,7 +516,7 @@ static void ngcs_cmd_compat(ngcs_request
 			/* case DATA_COMMAND: - TODO */
 
 		default:
-			F_("Unknown s_command command type\n");
+			F_("Unknown s_command command type\r\n");
 			ngcs_send_response(req, NGCS_TYPE_ERROR, 12, "INTERNAL_ERROR");
 			return;
 
@@ -587,14 +587,14 @@ static int sendping()
 	struct sockaddr_un sockname;
 	data_header head;
 
-	D_("Sending ping\n");
+	D_("Sending ping\r\n");
 
 
 	/* Create the socket. */
 	client = socket(PF_UNIX, SOCK_STREAM, 0);
 	if (client < 0)
 	{
-		F_("Failed to init socket\n");
+		F_("Failed to init socket\r\n");
 		return FALSE;
 	}
 
@@ -614,28 +614,28 @@ static int sendping()
 		return FALSE;
 	}
 
-	D_("Sending PING..\n");
+	D_("Sending PING..\r\n");
 	if (ngcs_sendmsg(NGCS_PING, 0, 123, NULL, 0)) ;
 	{
-		F_("Unable to send PING!\n");
+		F_("Unable to send PING!\r\n");
 		close(client);
 		return (FALSE);
 	}
-	D_("PING sent..\n");
+	D_("PING sent..\r\n");
 
 	/* Accept "server side" */
 	accepted_client(&fdh);
 	/* FIXME: won't work anymore */
 
-	D_("Reading PONG..\n");
+	D_("Reading PONG..\r\n");
 	if (ngcs_recvall(client, &head, sizeof(head)))
 	{
-		F_("Unable to receive PONG!\n");
+		F_("Unable to receive PONG!\r\n");
 		close(client);
 		return (FALSE);
 	}
 
-	D_("Got pong\n");
+	D_("Got pong\r\n");
 
 	return TRUE;
 }
@@ -647,7 +647,7 @@ static int open_socket()
 	/*    int flags; */
 	struct sockaddr_un serv_sockname;
 
-	D_("Creating " SOCKET_ROOTPATH " dir\n");
+	D_("Creating " SOCKET_ROOTPATH " dir\r\n");
 
 	closesock();
 
@@ -657,7 +657,7 @@ static int open_socket()
 	{
 		if (errno != EROFS)
 			F_("Could not create " SOCKET_ROOTPATH
-			   " : %s, may be / fs not mounted read-write yet?, will retry until I succeed.\n",
+			   " : %s, may be / fs not mounted read-write yet?, will retry until I succeed.\r\n",
 			   strerror(errno));
 		return (FALSE);
 	}
@@ -669,7 +669,7 @@ static int open_socket()
 		if (errno == ENOENT || errno == EROFS)
 			return (FALSE);
 
-		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\n",
+		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\r\n",
 		   SOCKET_ROOTPATH);
 	}
 
@@ -677,7 +677,7 @@ static int open_socket()
 	fdh.fds = socket(PF_UNIX, SOCK_STREAM, 0);
 	if (fdh.fds < 1)
 	{
-		F_("Failed to init socket (%s)\n", strerror(errno));
+		F_("Failed to init socket (%s)\r\n", strerror(errno));
 		fdh.fds = -1;
 		return (FALSE);
 	}
@@ -698,7 +698,7 @@ static int open_socket()
 		 (strlen(serv_sockname.sun_path) +
 		  sizeof(serv_sockname.sun_family))) < 0)
 	{
-		F_("Error binding to socket (errno: %d str: '%s')\n", errno,
+		F_("Error binding to socket (errno: %d str: '%s')\r\n", errno,
 		   strerror(errno));
 		closesock();
 		unlink(serv_sockname.sun_path);
@@ -708,7 +708,7 @@ static int open_socket()
 	/* chmod socket for root only use */
 	if (chmod(serv_sockname.sun_path, S_IRUSR | S_IWUSR) == -1)
 	{
-		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\n",
+		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\r\n",
 		   serv_sockname.sun_path);
 		closesock();
 		return (FALSE);
@@ -720,7 +720,7 @@ static int open_socket()
 	/* Listen to socket */
 	if (listen(fdh.fds, 5))
 	{
-		F_("Error on listen (errno: %d str: '%s')\n", errno, strerror(errno));
+		F_("Error on listen (errno: %d str: '%s')\r\n", errno, strerror(errno));
 		closesock();
 		unlink(serv_sockname.sun_path);
 		return (FALSE);
@@ -729,7 +729,7 @@ static int open_socket()
 	/* Run check : */
 	/*    if (!sendping())
 	   {
-	   F_("Sendping check failed, ngcs communication not available (if you see this open a bug)\n");
+	   F_("Sendping check failed, ngcs communication not available (if you see this open a bug)\r\n");
 	   closesock();
 	   return (FALSE);
 	   } */
@@ -742,12 +742,12 @@ static void check_socket()
 {
 	struct stat st;
 
-	D_("Checking socket\n");
+	D_("Checking socket\r\n");
 
 	/* Check if socket needs reopening */
 	if (fdh.fds <= 0)
 	{
-		D_("fdh.fds not set, opening new socket.\n");
+		D_("fdh.fds not set, opening new socket.\r\n");
 		open_socket();
 		return;
 	}
@@ -756,7 +756,7 @@ static void check_socket()
 	memset(&st, 0, sizeof(st));
 	if (stat(socket_filename, &st) < 0)
 	{
-		W_("Stat failed! Opening new socket.\n");
+		W_("Stat failed! Opening new socket.\r\n");
 		open_socket();
 		return;
 	}
@@ -765,12 +765,12 @@ static void check_socket()
 	if (st.st_dev != sock_stat.st_dev || st.st_ino != sock_stat.st_ino
 		|| st.st_mtime != sock_stat.st_mtime)
 	{
-		F_("Invalid socket found, reopening\n");
+		F_("Invalid socket found, reopening\r\n");
 		open_socket();
 		return;
 	}
 
-	D_("Socket ok.\n");
+	D_("Socket ok.\r\n");
 	return;
 }
 
@@ -793,11 +793,11 @@ int service_status(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init(ngcs);\n");
+	D_("module_init(ngcs);\r\n");
 
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -815,9 +815,9 @@ int module_init(int api_version)
 		socket_filename = SOCKET_FILENAME_TEST;
 	else
 		return (TRUE);
-	D_("Socket is: %s\n", socket_filename);
+	D_("Socket is: %s\r\n", socket_filename);
 
-	D_("adding hook, that will reopen socket, for every started service.\n");
+	D_("adding hook, that will reopen socket, for every started service.\r\n");
 	initng_event_hook_register(&EVENT_IS_CHANGE, &service_status);
 	initng_event_hook_register(&EVENT_FD_WATCHER, &fdh_handler);
 	initng_event_hook_register(&EVENT_FD_WATCHER, &conn_fdw_handler);
@@ -829,7 +829,7 @@ int module_init(int api_version)
 	/* do the first socket directly */
 	open_socket();
 
-	D_("ngcs.so.0.0 loaded!\n");
+	D_("ngcs.so.0.0 loaded!\r\n");
 	return (TRUE);
 }
 
@@ -837,7 +837,7 @@ void module_unload(void)
 {
 	ngcs_svr_conn *curr, *tmp;
 
-	D_("module_unload(ngcs);\n");
+	D_("module_unload(ngcs);\r\n");
 
 	if (g.i_am != I_AM_INIT && g.i_am != I_AM_FAKE_INIT)
 		return;
@@ -859,5 +859,5 @@ void module_unload(void)
 	initng_event_hook_unregister(&EVENT_FD_WATCHER, &fdh_handler);
 	initng_event_hook_unregister(&EVENT_IS_CHANGE, &service_status);
 
-	D_("ngcs.so.0.0 unloaded!\n");
+	D_("ngcs.so.0.0 unloaded!\r\n");
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/ngcs/initng_ngcs_cmds.c ./plugins/ngcs/initng_ngcs_cmds.c
--- /tmp/initng-0.6.10.2/plugins/ngcs/initng_ngcs_cmds.c	2007-11-05 07:41:57.000000000 +0100
+++ ./plugins/ngcs/initng_ngcs_cmds.c	2016-07-13 12:08:47.761159761 +0200
@@ -252,7 +252,7 @@ static int service_status_watch(s_event
 				len = ngcs_marshal_active_db_h(service, buf);
 				if (len < 0)
 				{
-					F_("ngcs_marshal_active_db_h() failed!\n");
+					F_("ngcs_marshal_active_db_h() failed!\r\n");
 					free(buf);
 					return (TRUE);
 				}
@@ -286,7 +286,7 @@ static int ngcs_watch_initial(ngcs_watch
 				len = ngcs_marshal_active_db_h(current, buf);
 				if (len < 0)
 				{
-					F_("ngcs_marshal_active_db_h() failed!\n");
+					F_("ngcs_marshal_active_db_h() failed!\r\n");
 					free(buf);
 					return 1;
 				}
@@ -363,7 +363,7 @@ static void ngcs_cmd_stop(ngcs_request *
 	if (req->argc != 2 || req->argv[1].type != NGCS_TYPE_STRING ||
 		req->argv[1].len <= 0)
 	{
-		F_("Bad call to ngcs command 'stop'\n");
+		F_("Bad call to ngcs command 'stop'\r\n");
 		ngcs_send_response(req, NGCS_TYPE_STRING, 8, "BAD_CALL");
 		return;
 	}
@@ -399,7 +399,7 @@ static void ngcs_cmd_start(ngcs_request
 	if (req->argc != 2 || req->argv[1].type != NGCS_TYPE_STRING ||
 		req->argv[1].len <= 0)
 	{
-		F_("Bad call to ngcs command 'start'\n");
+		F_("Bad call to ngcs command 'start'\r\n");
 		ngcs_send_response(req, NGCS_TYPE_STRING, 8, "BAD_CALL");
 		return;
 	}
@@ -448,7 +448,7 @@ ngcs_watch *ngcs_add_watch(ngcs_conn * c
 	chan = ngcs_open_channel(conn, NULL, ngcs_free_watch);
 	if (!chan)
 	{
-		F_("ngcs_open_channel failed!\n");
+		F_("ngcs_open_channel failed!\r\n");
 		free(watch);
 		return 0;
 	}
@@ -476,7 +476,7 @@ static void ngcs_cmd_swatch(ngcs_request
 	chan = ngcs_open_channel(req->conn, NULL, &ngcs_free_genwatch);
 	if (!chan)
 	{
-		F_("ngcs_open_channel failed!\n");
+		F_("ngcs_open_channel failed!\r\n");
 		free(watch);
 		return;
 	}
@@ -500,7 +500,7 @@ static void ngcs_cmd_ewatch(ngcs_request
 	chan = ngcs_open_channel(req->conn, NULL, &ngcs_free_genwatch);
 	if (!chan)
 	{
-		F_("ngcs_open_channel failed!\n");
+		F_("ngcs_open_channel failed!\r\n");
 		free(watch);
 		return;
 	}
@@ -523,7 +523,7 @@ static void ngcs_cmd_watch(ngcs_request
 		(req->argv[2].type != NGCS_TYPE_STRING && req->argv[2].type !=
 		 NGCS_TYPE_NULL))
 	{
-		F_("Bad watch command\n");
+		F_("Bad watch command\r\n");
 		ngcs_send_response(req, NGCS_TYPE_INT, sizeof(int), (char *) &i);
 		return;
 	}
@@ -640,23 +640,23 @@ static void ngcs_cmd_hot_reload(ngcs_req
 	if (retval == TRUE)
 	{
 		ngcs_send_response(req, NGCS_TYPE_BOOL, sizeof(int), (char *) &i);
-		D_("exec()ing initng\n");
+		D_("exec()ing initng\r\n");
 		new_argv[0] = i_strdup("/sbin/initng");
 		new_argv[1] = i_strdup("--hot_reload");
 		new_argv[2] = NULL;
 
 		execve("/sbin/initng", new_argv, environ);
-		F_("Failed to reload initng!\n");
+		F_("Failed to reload initng!\r\n");
 	}
 	else if (retval == FALSE)
 	{
-		F_("No plugin was willing to dump state\n");
+		F_("No plugin was willing to dump state\r\n");
 		ngcs_send_response(req, NGCS_TYPE_ERROR, 13,
 						   (char *) "NOT_AVAILABLE");
 	}
 	else
 	{
-		F_("dump_state failed!\n");
+		F_("dump_state failed!\r\n");
 		ngcs_send_response(req, NGCS_TYPE_ERROR, 10, (char *) "DUMP_ERROR");
 	}
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/ngcs/ngcs.c ./plugins/ngcs/ngcs.c
--- /tmp/initng-0.6.10.2/plugins/ngcs/ngcs.c	2006-06-12 00:38:28.000000000 +0200
+++ ./plugins/ngcs/ngcs.c	2016-07-13 12:08:47.765159761 +0200
@@ -32,7 +32,7 @@
 #include <time.h>
 #include <ctype.h>
 
-#define C_ERROR "\n  "C_FG_RED" [ERROR] -->> "C_OFF
+#define C_ERROR "\r\n  "C_FG_RED" [ERROR] -->> "C_OFF
 
 #define maybe_printf(...) { if(quiet==FALSE) printf(__VA_ARGS__ ); }
 #define maybe_grab_out(me) ( quiet ? 0 : grab_out(me))
@@ -85,7 +85,7 @@ int grab_out(void *me)
 	if (me == NULL || last_out != me)
 	{
 		for (n = 0; n < need_nl; n++)
-			putchar('\n');
+			printf("\r\n");
 		last_out = me;
 		return 1;
 	}
@@ -131,8 +131,8 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 				grab_out(NULL);
 				printf(C_FG_LIGHT_RED "hh:mm:ss" C_OFF C_FG_CYAN " T "
 					   C_OFF "service                             : "
-					   C_FG_NEON_GREEN "status\n" C_OFF);
-				printf("----------------------------------------------------------------\n");
+					   C_FG_NEON_GREEN "status\r\n" C_OFF);
+				printf("----------------------------------------------------------------\r\n");
 			}
 			break;
 		case NGCS_SVC_EVT_NOW:
@@ -148,7 +148,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 				break;
 			if (maybe_grab_out(res))
 			{
-				maybe_printf(C_FG_BLUE "\n%s output:" C_OFF "\n",
+				maybe_printf(C_FG_BLUE "\r\n%s output:" C_OFF "\r\n",
 							 event->svc_name);
 				need_nl = 1;
 			}
@@ -162,7 +162,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 					if (event->r.adb.current_state->is == IS_UP)
 					{
 						grab_out(NULL);
-						printf("Service \"%s\" is started (%s%s" C_OFF ")\n",
+						printf("Service \"%s\" is started (%s%s" C_OFF ")\r\n",
 							   event->svc_name,
 							   state_color(event->r.adb.current_state->is),
 							   event->r.adb.current_state->state_name);
@@ -178,7 +178,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 					{
 						grab_out(NULL);
 						printf("%s " C_FG_LIGHT_RED "failed to start"
-							   C_OFF " (%s%s" C_OFF ")\n",
+							   C_OFF " (%s%s" C_OFF ")\r\n",
 							   event->svc_name,
 							   state_color(event->r.adb.current_state->is),
 							   event->r.adb.current_state->state_name);
@@ -191,7 +191,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 					if (event->r.adb.current_state->is == IS_DOWN)
 					{
 						grab_out(NULL);
-						printf("Service \"%s\" is stopped (%s%s" C_OFF ")\n",
+						printf("Service \"%s\" is stopped (%s%s" C_OFF ")\r\n",
 							   event->svc_name,
 							   state_color(event->r.adb.current_state->is),
 							   event->r.adb.current_state->state_name);
@@ -207,7 +207,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 					{
 						grab_out(NULL);
 						printf("Service \"%s\" " C_FG_LIGHT_RED
-							   "failed to stop" C_OFF " (%s%s" C_OFF ")\n",
+							   "failed to stop" C_OFF " (%s%s" C_OFF ")\r\n",
 							   event->svc_name,
 							   state_color(event->r.adb.current_state->is),
 							   event->r.adb.current_state->state_name);
@@ -221,7 +221,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 						struct tm *ts = localtime(&event->r.adb.time_current_state.tv_sec);
 						grab_out(NULL);
 						printf(C_FG_LIGHT_RED "%.2i:%.2i:%.2i" C_OFF C_FG_CYAN
-							   " %c" C_OFF " %-35s : %s%s" C_OFF "\n",
+							   " %c" C_OFF " %-35s : %s%s" C_OFF "\r\n",
 							   ts->tm_hour, ts->tm_min, ts->tm_sec,
 							   (char) toupper((int) event->r.adb.type.
 											  name[0]), event->svc_name,
@@ -236,7 +236,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 				&& (res->d.svc_watch.mode == WATCH_NORMAL || !quiet))
 			{
 				maybe_grab_out(NULL);
-				maybe_printf("Service \"%s\" is now in state %s%s" C_OFF "\n",
+				maybe_printf("Service \"%s\" is now in state %s%s" C_OFF "\r\n",
 							 event->svc_name,
 							 state_color(event->r.adb.current_state->is),
 							 event->r.adb.current_state->state_name);
@@ -249,7 +249,7 @@ void svc_watch_cb(ngcs_svc_evt_hook * ho
 				    res->d.svc_watch.mode == WATCH_STOP))
 			{
 				printf("Service \"%s\" " C_FG_RED "couldn't be started" 
-				       C_OFF "\n", res->arg);
+				       C_OFF "\r\n", res->arg);
 				failed = 1;
 			}
 
@@ -270,7 +270,7 @@ void docmd(char *cmd, char *arg)
 
 	if (res == NULL)
 	{
-		printf(C_ERROR "Malloc failed\n" C_OFF);
+		printf(C_ERROR "Malloc failed\r\n" C_OFF);
 		exit(2);
 	}
 
@@ -288,7 +288,7 @@ void docmd(char *cmd, char *arg)
 							   NGCS_WATCH_STATUS, svc_watch_cb, res) == NULL)
 		{
 			grab_out(NULL);
-			printf(C_ERROR "Couldn't send command %s %s\n" C_OFF,
+			printf(C_ERROR "Couldn't send command %s %s\r\n" C_OFF,
 				   cmd, (arg == NULL ? "" : arg));
 			failed = 1;
 			free(res);
@@ -307,7 +307,7 @@ void docmd(char *cmd, char *arg)
 							   svc_watch_cb, res) == NULL)
 		{
 			grab_out(NULL);
-			printf(C_ERROR "Couldn't send command %s %s\n" C_OFF,
+			printf(C_ERROR "Couldn't send command %s %s\r\n" C_OFF,
 				   cmd, (arg == NULL ? "" : arg));
 			failed = 1;
 			free(res);
@@ -325,7 +325,7 @@ void docmd(char *cmd, char *arg)
 		if (ngcs_start_stop(cconn, "start", arg, svc_watch_cb, res) == NULL)
 		{
 			grab_out(NULL);
-			printf(C_ERROR "Couldn't send command %s %s\n" C_OFF,
+			printf(C_ERROR "Couldn't send command %s %s\r\n" C_OFF,
 				   cmd, (arg == NULL ? "" : arg));
 			failed = 1;
 			free(res);
@@ -343,7 +343,7 @@ void docmd(char *cmd, char *arg)
 		if (ngcs_start_stop(cconn, "stop", arg, svc_watch_cb, res) == NULL)
 		{
 			grab_out(NULL);
-			printf(C_ERROR "Couldn't send command %s %s\n" C_OFF,
+			printf(C_ERROR "Couldn't send command %s %s\r\n" C_OFF,
 				   cmd, (arg == NULL ? "" : arg));
 			failed = 1;
 			free(res);
@@ -365,7 +365,7 @@ void docmd(char *cmd, char *arg)
 	if (ngcs_cmd_async(cconn, (arg == NULL ? 1 : 2), dat, resp_handler, res))
 	{
 		grab_out(NULL);
-		printf(C_ERROR "Couldn't send command %s %s\n" C_OFF,
+		printf(C_ERROR "Couldn't send command %s %s\r\n" C_OFF,
 			   cmd, (arg == NULL ? "" : arg));
 		failed = 1;
 		free(res);
@@ -385,7 +385,7 @@ void resp_handler(ngcs_cli_conn * cconn,
 	if (ret == NULL || ret->len < 0)
 	{
 		grab_out(NULL);
-		printf(C_ERROR "Didn't get response for command %s %s\n" C_OFF,
+		printf(C_ERROR "Didn't get response for command %s %s\r\n" C_OFF,
 			   res->cmd, (res->arg == NULL ? "" : res->arg));
 		failed = 1;
 	}
@@ -394,24 +394,24 @@ void resp_handler(ngcs_cli_conn * cconn,
 		{
 			case NGCS_TYPE_NULL:
 				maybe_grab_out(NULL);
-				maybe_printf("%s %s returned " C_FG_BLUE "nothing" C_OFF "\n",
+				maybe_printf("%s %s returned " C_FG_BLUE "nothing" C_OFF "\r\n",
 							 res->cmd, (res->arg == NULL ? "" : res->arg));
 				break;
 			case NGCS_TYPE_INT:
 				maybe_grab_out(NULL);
-				maybe_printf("%s %s returned %i\n",
+				maybe_printf("%s %s returned %i\r\n",
 							 res->cmd, (res->arg == NULL ? "" : res->arg),
 							 ret->d.i);
 				break;
 			case NGCS_TYPE_LONG:
 				maybe_grab_out(NULL);
-				maybe_printf("%s %s returned %li\n",
+				maybe_printf("%s %s returned %li\r\n",
 							 res->cmd, (res->arg == NULL ? "" : res->arg),
 							 ret->d.l);
 				break;
 			case NGCS_TYPE_BOOL:
 				maybe_grab_out(NULL);
-				maybe_printf("%s %s returned %s\n",
+				maybe_printf("%s %s returned %s\r\n",
 							 res->cmd, (res->arg == NULL ? "" : res->arg),
 							 (ret->d.i ? "TRUE" : "FALSE"));
 				if (!ret->d.i)
@@ -420,7 +420,7 @@ void resp_handler(ngcs_cli_conn * cconn,
 			case NGCS_TYPE_ERROR:
 				{
 					grab_out(NULL);
-					printf(C_ERROR "%s %s failed: %s\n" C_OFF,
+					printf(C_ERROR "%s %s failed: %s\r\n" C_OFF,
 						   res->cmd, (res->arg == NULL ? "" : res->arg),
 						   ret->d.s);
 					failed = 1;
@@ -428,7 +428,7 @@ void resp_handler(ngcs_cli_conn * cconn,
 				}
 			default:
 				grab_out(NULL);
-				printf(C_ERROR "%s %s returned unknown type %i\n" C_OFF,
+				printf(C_ERROR "%s %s returned unknown type %i\r\n" C_OFF,
 					   res->cmd, (res->arg == NULL ? "" : res->arg),
 					   ret->type);
 				failed = 1;
@@ -487,14 +487,14 @@ int main(int argc, char *argv[])
 			prog_name += 3;
 
 		/* Only for testing.
-		 * printf("Argv: %s argv[0]: %s\n", Argv, argv[0]);
+		 * printf("Argv: %s argv[0]: %s\r\n", Argv, argv[0]);
 		 */
 	}
 
 	/* check if cmd-line contains "ngdc", if set debug */
 	if (strncasecmp(prog_name, "ngd", 3) == 0)
 	{
-		printf(C_FG_YELLOW "Warning. This is ngdcs!" C_OFF "\n");
+		printf(C_FG_YELLOW "Warning. This is ngdcs!" C_OFF "\r\n");
 		debug = TRUE;
 	}
 
@@ -502,7 +502,7 @@ int main(int argc, char *argv[])
 	if (debug == FALSE && getuid() != 0)
 	{
 		printf(C_ERROR "You need root access to communicate with initng."
-			   C_OFF "\n");
+			   C_OFF "\r\n");
 		exit(2);
 	}
 
@@ -511,7 +511,7 @@ int main(int argc, char *argv[])
 
 	if (cconn == NULL)
 	{
-		printf(C_ERROR "Could not connect to InitNG" C_OFF "\n");
+		printf(C_ERROR "Could not connect to InitNG" C_OFF "\r\n");
 		exit(2);
 	}
 
@@ -527,7 +527,7 @@ int main(int argc, char *argv[])
 		{
 			if (last_sw < 0)
 			{
-				printf(C_FG_RED "Bad usage" C_OFF "\n");
+				printf(C_FG_RED "Bad usage" C_OFF "\r\n");
 				ngcs_client_free(cconn);
 				exit(2);
 			}
@@ -556,7 +556,7 @@ int main(int argc, char *argv[])
 
 		if (retval < 0 && errno != EINTR)
 		{
-			printf(C_ERROR "select() failed!\n" C_OFF "\n");
+			printf(C_ERROR "select() failed!\r\n" C_OFF "\r\n");
 			ngcs_client_free(cconn);
 			exit(2);
 		}
diff -rupN /tmp/initng-0.6.10.2/plugins/ngcs/ngcs_client.c ./plugins/ngcs/ngcs_client.c
--- /tmp/initng-0.6.10.2/plugins/ngcs/ngcs_client.c	2006-06-01 12:53:55.000000000 +0200
+++ ./plugins/ngcs/ngcs_client.c	2016-07-13 12:08:47.765159761 +0200
@@ -154,7 +154,7 @@ static void svc_status_gotdata(ngcs_chan
 
 		if (ngcs_unmarshal_ngcs_active_db_h(&event.r.adb, len, data))
 		{
-			printf("DEBUG: unmarshal active_db error\n");
+			printf("DEBUG: unmarshal active_db error\r\n");
 			return;							/* FIXME - should report error too */
 		}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/nge/initng_nge.c ./plugins/nge/initng_nge.c
--- /tmp/initng-0.6.10.2/plugins/nge/initng_nge.c	2007-11-05 07:41:57.000000000 +0100
+++ ./plugins/nge/initng_nge.c	2016-07-13 12:08:47.765159761 +0200
@@ -109,7 +109,7 @@ static int fd_event_acceptor_handler(s_e
 			/* This is a expensive test, but better safe then sorry */
 			if (!STILL_OPEN(fd_event_acceptor.fds))
 			{
-				D_("%i is not open anymore.\n", fd_event_acceptor.fds);
+				D_("%i is not open anymore.\r\n", fd_event_acceptor.fds);
 				fd_event_acceptor.fds = -1;
 				break;
 			}
@@ -131,7 +131,7 @@ static int fd_event_acceptor_handler(s_e
 
 		case FDW_ACTION_DEBUG:
 			if (!data->debug_find_what || strstr(__FILE__, data->debug_find_what))
-				mprintf(data->debug_out, " %i: Used by plugin: %s\n",
+				mprintf(data->debug_out, " %i: Used by plugin: %s\r\n",
 					fd_event_acceptor.fds, __FILE__);
 			break;
 	}
@@ -218,7 +218,7 @@ static void close_initiator_socket(void)
 /* send to all listeners */
 void send_to_all(const void *buf, size_t len)
 {
-	D_("send_to_all(%s)\n", (char *) buf);
+	D_("send_to_all(%s)\r\n", (char *) buf);
 	int i;
 
 	/* walk all lissiners */
@@ -228,12 +228,12 @@ void send_to_all(const void *buf, size_t
 		if (listeners[i] < 1)
 			continue;
 
-		D_("Sending to listeners[%i] fd %i : %s\n", i, listeners[i],
+		D_("Sending to listeners[%i] fd %i : %s\r\n", i, listeners[i],
 		   (char *) buf);
 		/* if not succed to send */
 		if (send(listeners[i], buf, len, 0) < (signed) len)
 		{
-			D_("Fd %i must have been closed.\n", listeners[i]);
+			D_("Fd %i must have been closed.\r\n", listeners[i]);
 			/* close it */
 			close(listeners[i]);
 			listeners[i] = -1;
@@ -261,11 +261,11 @@ void event_acceptor(f_module_h * from, e
 		lis++;
 	if (lis == MAX_LISTENERS)
 	{
-		F_("Maximum no of listeners reached.\n");
+		F_("Maximum no of listeners reached.\r\n");
 		return;
 	}
 
-	D_("Adding new listener listensers[%i]\n", lis);
+	D_("Adding new listener listensers[%i]\r\n", lis);
 	if (is_active == FALSE)
 	{
 		/*
@@ -281,11 +281,11 @@ void event_acceptor(f_module_h * from, e
 	/* create a new socket, for reading */
 	if ((listeners[lis] = accept(fd_event_acceptor.fds, NULL, NULL)) < 1)
 	{
-		F_("Failed to accept listener!\n");
+		F_("Failed to accept listener!\r\n");
 		return;
 	}
 
-	D_("opening listener no #%i.\n", lis);
+	D_("opening listener no #%i.\r\n", lis);
 
 	/* send header */
 	{
@@ -395,7 +395,7 @@ static int open_initiator_socket(void)
 	{
 		if (errno != EROFS)
 			F_("Could not create " NGE_PREFIX
-			   " : %s, may be / fs not mounted read-write yet?, will retry until I succeed.\n",
+			   " : %s, may be / fs not mounted read-write yet?, will retry until I succeed.\r\n",
 			   strerror(errno));
 		return (FALSE);
 	}
@@ -407,7 +407,7 @@ static int open_initiator_socket(void)
 		if (errno == ENOENT || errno == EROFS)
 			return (FALSE);
 
-		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\n",
+		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\r\n",
 		   NGE_PREFIX);
 	}
 
@@ -415,7 +415,7 @@ static int open_initiator_socket(void)
 	fd_event_acceptor.fds = socket(PF_UNIX, SOCK_STREAM, 0);
 	if (fd_event_acceptor.fds < 1)
 	{
-		F_("Failed to init socket (%s)\n", strerror(errno));
+		F_("Failed to init socket (%s)\r\n", strerror(errno));
 		fd_event_acceptor.fds = -1;
 		return (FALSE);
 	}
@@ -437,7 +437,7 @@ static int open_initiator_socket(void)
 		 (strlen(serv_sockname.sun_path) +
 		  sizeof(serv_sockname.sun_family))) < 0)
 	{
-		F_("Error binding to socket (errno: %d str: '%s')\n", errno,
+		F_("Error binding to socket (errno: %d str: '%s')\r\n", errno,
 		   strerror(errno));
 		close_initiator_socket();
 		unlink(serv_sockname.sun_path);
@@ -447,7 +447,7 @@ static int open_initiator_socket(void)
 	/* chmod socket for root only use */
 	if (chmod(serv_sockname.sun_path, S_IRUSR | S_IWUSR) == -1)
 	{
-		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\n",
+		F_("CRITICAL, failed to chmod %s, THIS IS A SECURITY PROBLEM.\r\n",
 		   serv_sockname.sun_path);
 		close_initiator_socket();
 		return (FALSE);
@@ -459,7 +459,7 @@ static int open_initiator_socket(void)
 	/* Listen to socket */
 	if (listen(fd_event_acceptor.fds, 5))
 	{
-		F_("Error on listen (errno: %d str: '%s')\n", errno, strerror(errno));
+		F_("Error on listen (errno: %d str: '%s')\r\n", errno, strerror(errno));
 		close_initiator_socket();
 		unlink(serv_sockname.sun_path);
 		return (FALSE);
@@ -490,12 +490,12 @@ static int check_socket(s_event * event)
 
 #define PING "<event type=\"ping\"/>\n"
 	send_to_all(PING, sizeof(char) * strlen(PING));
-	D_("Checking socket\n");
+	D_("Checking socket\r\n");
 
 	/* Check if socket needs reopening */
 	if (fd_event_acceptor.fds <= 0)
 	{
-		D_("fd_event_acceptor.fds not set, opening new socket.\n");
+		D_("fd_event_acceptor.fds not set, opening new socket.\r\n");
 		open_initiator_socket();
 		return (TRUE);
 	}
@@ -504,7 +504,7 @@ static int check_socket(s_event * event)
 	memset(&st, 0, sizeof(st));
 	if (stat(socket_filename, &st) < 0)
 	{
-		W_("Stat failed! Opening new socket.\n");
+		W_("Stat failed! Opening new socket.\r\n");
 		open_initiator_socket();
 		return (TRUE);
 	}
@@ -513,12 +513,12 @@ static int check_socket(s_event * event)
 	if (st.st_dev != sock_stat.st_dev || st.st_ino != sock_stat.st_ino
 		|| st.st_mtime != sock_stat.st_mtime)
 	{
-		F_("Invalid socket found, reopening\n");
+		F_("Invalid socket found, reopening\r\n");
 		open_initiator_socket();
 		return (TRUE);
 	}
 
-	D_("Socket ok.\n");
+	D_("Socket ok.\r\n");
 	return (TRUE);
 }
 
@@ -558,7 +558,7 @@ static int astatus_change(s_event * even
 					  service->current_state->state_name,
 					  service->type->name, service->type->hidden);
 
-	/*printf("astatus_change: %s %i %s\n",
+	/*printf("astatus_change: %s %i %s\r\n",
 	   service->name, service->current_state->is,
 	   service->current_state->state_name); */
 
@@ -672,7 +672,7 @@ int module_init(int api_version)
 
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -696,7 +696,7 @@ int module_init(int api_version)
 		socket_filename = NGE_TEST;
 	else
 		return (FALSE);
-	D_("Socket is: %s\n", socket_filename);
+	D_("Socket is: %s\r\n", socket_filename);
 
 
 	/*
diff -rupN /tmp/initng-0.6.10.2/plugins/nge/libngeclient.c ./plugins/nge/libngeclient.c
--- /tmp/initng-0.6.10.2/plugins/nge/libngeclient.c	2006-07-12 13:55:04.000000000 +0200
+++ ./plugins/nge/libngeclient.c	2016-07-13 12:08:47.765159761 +0200
@@ -135,7 +135,7 @@ static int ngeclient_read_and_fill_buffe
 	while (chars_recv > 0)
 	{
 
-		/*printf("reallocating to %i\n", c->read_buffer_len + 101 ); */
+		/*printf("reallocating to %i\r\n", c->read_buffer_len + 101 ); */
 		/* Allocate more room for input */
 		c->read_buffer = realloc(c->read_buffer,
 								 (c->read_buffer_len + 101) * sizeof(char));
@@ -212,7 +212,7 @@ static void ngeclient_cut_buffert(nge_co
 			c->read_buffer_len * sizeof(char));
 
 	/* reallocate now, when theres not that mutch data anymore */
-	/*printf("reallocating to %i\n", c->read_buffer_len); */
+	/*printf("reallocating to %i\r\n", c->read_buffer_len); */
 	c->read_buffer = realloc(c->read_buffer,
 							 (c->read_buffer_len + 1) * sizeof(char));
 
@@ -575,7 +575,7 @@ static void ngeclient_handle_connect(nge
 	if (event->payload.connect.pver != NGE_VERSION)
 	{
 		sprintf(err_msg_buffer,
-				"NGE protocol version missmatch!\n LOCAL:%i\n REMOTE: %i",
+				"NGE protocol version missmatch!\r\n LOCAL:%i\r\n REMOTE: %i",
 				NGE_VERSION, event->payload.connect.pver);
 		ngeclient_error = (const char *) err_msg_buffer;
 	}
@@ -619,7 +619,7 @@ static void ngeclient_handle_tag(nge_eve
 	}
 
 	ngeclient_error = "Unknown tag to handle.";
-	/*fprintf(stderr, "Dont know how to handle tag \"%s\", %i chars.\n", tag, chars); */
+	/*fprintf(stderr, "Dont know how to handle tag \"%s\", %i chars.\r\n", tag, chars); */
 }
 
 /*
@@ -672,7 +672,7 @@ nge_event *get_next_event(nge_connection
 		/* First char is not an tag starter */
 		if (c->read_buffer[0] != '<')
 		{
-			printf("buffer: %s\n", c->read_buffer);
+			printf("buffer: %s\r\n", c->read_buffer);
 			ngeclient_error = "Expected an < char, as the first char in an xml protocol.";
 			return (NULL);
 		}
@@ -697,7 +697,7 @@ nge_event *get_next_event(nge_connection
 			if (c->read_buffer[chars] == '<'
 				&& c->read_buffer[chars + 1] == '/')
 			{
-				/*printf("tag_stop: %s\n", &c->read_buffer[chars]); */
+				/*printf("tag_stop: %s\r\n", &c->read_buffer[chars]); */
 				chars += 2;
 
 				/* skip to the end char of tag */
diff -rupN /tmp/initng-0.6.10.2/plugins/nge/nge.c ./plugins/nge/nge.c
--- /tmp/initng-0.6.10.2/plugins/nge/nge.c	2006-05-18 15:49:04.000000000 +0200
+++ ./plugins/nge/nge.c	2016-07-13 12:08:47.765159761 +0200
@@ -48,19 +48,19 @@ int main(int argc, char *argv[]);
 
 static void connected(int pver, char *initng_version)
 {
-	fprintf(stdout, "Connected to initng %s\n", initng_version);
+	fprintf(stdout, "Connected to initng %s\r\n", initng_version);
 }
 
 static void disconnected(void)
 {
-	fprintf(stdout, "Dissonnected from initng.\n");
+	fprintf(stdout, "Disconnected from initng.\r\n");
 }
 
 static void process_killed(char *service, e_is is, char *state, char *process,
 						   int exit_status, int term_sig)
 {
 	fprintf(stdout,
-			"Service \"%s\" state \"%s\" (%i) process \"%s\" killed: exit_status \"%i\" term_sig \"%i\"\n",
+			"Service \"%s\" state \"%s\" (%i) process \"%s\" killed: exit_status \"%i\" term_sig \"%i\"\r\n",
 			service, state, is, process, exit_status, term_sig);
 
 }
@@ -79,7 +79,7 @@ static void service_change(char *service
 		case IS_WAITING:
 		default:
 			fprintf(stdout,
-					"%sService \"%s\"::\"%s\" have state \"%s\" (%i)  %i:%i\n",
+					"%sService \"%s\"::\"%s\" have state \"%s\" (%i)  %i:%i\r\n",
 					hidden ? "<HIDDEN> " : "", service_type, service, state,
 					is, pstart, pstop);
 			break;
@@ -98,13 +98,13 @@ static void ping(void)
 
 static void service_output(char *service, char *process, char *output)
 {
-	fprintf(stdout, "Service \"%s\" process \"%s\" outputed:\n%s\n", service,
+	fprintf(stdout, "Service \"%s\" process \"%s\" outputed:\r\n%s\r\n", service,
 			process, output);
 }
 
 static void err_msg(e_mt mt, char *file, char *func, int line, char *message)
 {
-	fprintf(stdout, "Message mt: %i, file: %s, func: %s, line %i.\n%s\n",
+	fprintf(stdout, "Message mt: %i, file: %s, func: %s, line %i.\r\n%s\r\n",
 			mt, file, func, line, message);
 }
 
@@ -125,7 +125,7 @@ static void sys_state(h_sys_state state,
 		case STATE_REBOOT:
 		case STATE_EXECVE:
 		default:
-			fprintf(stdout, "Initng [%s] got a new system state no: %i\n",
+			fprintf(stdout, "Initng [%s] got a new system state no: %i\r\n",
 					runlevel, state);
 			break;
 	}
@@ -203,14 +203,14 @@ int main(int argc, char *argv[])
 	/* if open_socket fails, ngeclient_error is set */
 	if (ngeclient_error)
 	{
-		fprintf(stderr, "NGECLIENT ERROR: %s\n", ngeclient_error);
+		fprintf(stderr, "NGECLIENT ERROR: %s\r\n", ngeclient_error);
 		exit(1);
 	}
 	assert(c);
 
 	while ((e = get_next_event(c, 20000)))
 	{
-		/*printf("Got an event: %i!\n", e->state_type); */
+		/*printf("Got an event: %i!\r\n", e->state_type); */
 		handle_event(e);
 
 		ngeclient_event_free(e);
@@ -222,7 +222,7 @@ int main(int argc, char *argv[])
 	/* check so there is no ngeclient_error set */
 	if (ngeclient_error)
 	{
-		fprintf(stderr, "NGECLIENT ERROR: %s\n", ngeclient_error);
+		fprintf(stderr, "NGECLIENT ERROR: %s\r\n", ngeclient_error);
 		exit(1);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/nge/nge_raw.c ./plugins/nge/nge_raw.c
--- /tmp/initng-0.6.10.2/plugins/nge/nge_raw.c	2006-05-18 12:15:50.000000000 +0200
+++ ./plugins/nge/nge_raw.c	2016-07-13 12:08:47.765159761 +0200
@@ -61,7 +61,7 @@ int main(int argc, char *argv[])
 	/* if open_socket errors, ngeclient_error is set */
 	if (ngeclient_error)
 	{
-		fprintf(stderr, "%s\n", ngeclient_error);
+		fprintf(stderr, "%s\r\n", ngeclient_error);
 		exit(1);
 	}
 
@@ -78,7 +78,7 @@ int main(int argc, char *argv[])
 	{
 		if (ngeclient_error)
 		{
-			fprintf(stderr, "%s\n", ngeclient_error);
+			fprintf(stderr, "%s\r\n", ngeclient_error);
 			ngeclient_error = NULL;
 		}
 
@@ -95,7 +95,7 @@ int main(int argc, char *argv[])
 	/* check for error messages from ngeclinet.so */
 	if (ngeclient_error)
 	{
-		fprintf(stderr, "%s\n", ngeclient_error);
+		fprintf(stderr, "%s\r\n", ngeclient_error);
 		ngeclient_error = NULL;
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/pause/initng_pause.c ./plugins/pause/initng_pause.c
--- /tmp/initng-0.6.10.2/plugins/pause/initng_pause.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/pause/initng_pause.c	2016-07-13 12:08:47.765159761 +0200
@@ -54,7 +54,7 @@ static int do_pause(s_event * event)
 	assert(data->process);
 	assert(data->process->pt);
 
-	D_(" %s\n", data->service->name);
+	D_(" %s\r\n", data->service->name);
 
 
 	s_delay = get_int_var(&S_DELAY, data->process->pt->name, data->service);
@@ -63,13 +63,13 @@ static int do_pause(s_event * event)
 
 	if (s_delay)
 	{
-		D_("Sleeping for %i seconds.\n", s_delay);
+		D_("Sleeping for %i seconds.\r\n", s_delay);
 		sleep(s_delay);
 	}
 
 	if (ms_delay)
 	{
-		D_("Sleeping for %i milliseconds.\n", ms_delay);
+		D_("Sleeping for %i milliseconds.\r\n", ms_delay);
 		usleep(ms_delay);
 	}
 
@@ -78,10 +78,10 @@ static int do_pause(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -92,7 +92,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&S_DELAY);
 	initng_service_data_type_unregister(&MS_DELAY);
 	initng_event_hook_unregister(&EVENT_AFTER_FORK, &do_pause);
diff -rupN /tmp/initng-0.6.10.2/plugins/provide/initng_provide.c ./plugins/provide/initng_provide.c
--- /tmp/initng-0.6.10.2/plugins/provide/initng_provide.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/provide/initng_provide.c	2016-07-13 12:08:47.765159761 +0200
@@ -65,7 +65,7 @@ a_state_h PROVIDE_DOWN = { "NOT_PROVIDED
 
 static int dont_try_to_stop_start(active_db_h * service)
 {
-	D_("You have to stop/start/restart the service providing this!\n");
+	D_("You have to stop/start/restart the service providing this!\r\n");
 	return (FALSE);
 }
 
@@ -95,7 +95,7 @@ static int add_virtual_service(const cha
 		/* make sure its a PROVIDED TYPE, else continue */
 		if (vserv->type != &PROVIDED)
 		{
-			F_("Service name providing is used by another service type\n");
+			F_("Service name providing is used by another service type\r\n");
 			return (FALSE);
 		}
 
@@ -115,7 +115,7 @@ static int add_virtual_service(const cha
 		/* create a new */
 		if (!(vserv = initng_active_db_new(name)))
 		{
-			F_("Failed to create %s\n", name);
+			F_("Failed to create %s\r\n", name);
 			return (FALSE);
 		}
 
@@ -130,7 +130,7 @@ static int add_virtual_service(const cha
 		/* register it */
 		if (!initng_active_db_register(vserv))
 		{
-			F_("Failed to register %s\n", vserv->name);
+			F_("Failed to register %s\r\n", vserv->name);
 			initng_active_db_free(vserv);
 			return (FALSE);
 		}
@@ -154,14 +154,14 @@ static void remove_virtual_service(const
 	/* find that exact service */
 	if (!(vserv = initng_active_db_find_by_exact_name(name)))
 	{
-		W_("Virtual service %s doesn't exist!\n", name);
+		W_("Virtual service %s doesn't exist!\r\n", name);
 		return;
 	}
 
 	/* make sure this found is a provided type */
 	if (vserv->type != &PROVIDED)
 	{
-		F_("Provided is not an provided type\n");
+		F_("Provided is not an provided type\r\n");
 		return;
 	}
 
@@ -289,11 +289,11 @@ static int system_stopping(s_event * eve
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -313,7 +313,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_IS_CHANGE, &service_state);
 	initng_service_data_type_unregister(&PROVIDE);
 	initng_service_data_type_unregister(&PCOUNT);
diff -rupN /tmp/initng-0.6.10.2/plugins/reload/initng_reload.c ./plugins/reload/initng_reload.c
--- /tmp/initng-0.6.10.2/plugins/reload/initng_reload.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/reload/initng_reload.c	2016-07-13 12:08:47.765159761 +0200
@@ -86,13 +86,13 @@ static int fd_used_by_service(int fd)
 					 || current_pipe->dir == BUFFERED_OUT_PIPE)
 					&& current_pipe->pipe[0] == fd)
 				{
-					W_("Wont close output_pipe fd %i, used by service \"%s\"\n", fd, service->name);
+					W_("Wont close output_pipe fd %i, used by service \"%s\"\r\n", fd, service->name);
 					return (TRUE);
 				}
 				else if (current_pipe->dir == IN_PIPE
 						 && current_pipe->pipe[1] == fd)
 				{
-					W_("Wont close input_pipe fd %i, used by service \"%s\"\n", fd, service->name);
+					W_("Wont close input_pipe fd %i, used by service \"%s\"\r\n", fd, service->name);
 					return (TRUE);
 				}
 			}
@@ -119,20 +119,20 @@ static void cmd_fast_reload(char *arg)
 
 	if (retval == TRUE)
 	{
-		D_("exec()int initng\n");
+		D_("exec()int initng\r\n");
 		new_argv[0] = i_strdup("/sbin/initng");
 		new_argv[1] = i_strdup("--hot_reload");
 		new_argv[2] = NULL;
 
 		execve("/sbin/initng", new_argv, environ);
-		F_("Failed to reload initng!\n");
+		F_("Failed to reload initng!\r\n");
 	}
 	else
 	{
 		if (retval == FALSE)
-			F_("No plugin was willing to dump state\n");
+			F_("No plugin was willing to dump state\r\n");
 		else
-			F_("dump_state failed!\n");
+			F_("dump_state failed!\r\n");
 	}
 }
 
@@ -160,14 +160,14 @@ static int read_file(const char *filenam
 
 		if (initng_active_db_find_by_name(entry.name))
 		{
-			W_("Entry exists, won't create it!\n");
+			W_("Entry exists, won't create it!\r\n");
 			continue;
 		}
 
 		/* create a new service entry */
 		if (!(new_entry = initng_active_db_new(entry.name)))
 		{
-			F_("Can't create new active!\n");
+			F_("Can't create new active!\r\n");
 			success = FALSE;
 			continue;
 		}
@@ -176,7 +176,7 @@ static int read_file(const char *filenam
 		new_entry->current_state = initng_active_state_find(entry.state);
 		if (!new_entry->current_state)
 		{
-			F_("Could not find a proper state to set: %s.\n", entry.state);
+			F_("Could not find a proper state to set: %s.\r\n", entry.state);
 			success = FALSE;
 			continue;
 		}
@@ -184,7 +184,7 @@ static int read_file(const char *filenam
 		/* set service stype */
 		if (!(new_entry->type = initng_service_type_get_by_name(entry.type)))
 		{
-			F_("Unknown service type %s.\n", entry.type);
+			F_("Unknown service type %s.\r\n", entry.type);
 			success = FALSE;
 			continue;
 		}
@@ -212,7 +212,7 @@ static int read_file(const char *filenam
 				/* check so it was found */
 				if (strcmp(entry.process[pnr].ptype, pt->name) != 0)
 				{
-					F_("Unknown process type %s\n", entry.process[pnr].ptype);
+					F_("Unknown process type %s\r\n", entry.process[pnr].ptype);
 					pnr++;
 					continue;
 				}
@@ -254,7 +254,7 @@ static int read_file(const char *filenam
 				/* add this process to the list */
 				list_add(&process->list, &new_entry->processes.list);
 
-				D_("Added process type %i to %s\n", process->pt,
+				D_("Added process type %i to %s\r\n", process->pt,
 				   new_entry->name);
 
 				pnr++;
@@ -270,7 +270,7 @@ static int read_file(const char *filenam
 				d->type = initng_service_data_type_find(entry.data[i].type);
 				if (!d->type)
 				{
-					F_("Did not found %s!\n", entry.data[i].type);
+					F_("Did not found %s!\r\n", entry.data[i].type);
 					free(d);
 					i++;
 					continue;
@@ -305,7 +305,7 @@ static int read_file(const char *filenam
 		/* add the new service to the active_db */
 		if (initng_active_db_register(new_entry) != TRUE)
 		{
-			F_("Could not add entry!\n");
+			F_("Could not add entry!\r\n");
 			initng_active_db_free(new_entry);
 			success = FALSE;
 			continue;
@@ -321,7 +321,7 @@ static int read_file(const char *filenam
 	fclose(fil);
 	if (unlink(filename) != 0)
 	{
-		W_("Failed removing file %s !!!\n", filename);
+		W_("Failed removing file %s !!!\r\n", filename);
 		return success;						/* not important */
 	}
 
@@ -349,14 +349,14 @@ static int read_file_v13(const char *fil
 
 		if (initng_active_db_find_by_name(entry.name))
 		{
-			W_("Entry exists, won't create it!\n");
+			W_("Entry exists, won't create it!\r\n");
 			continue;
 		}
 
 		/* create a new service entry */
 		if (!(new_entry = initng_active_db_new(entry.name)))
 		{
-			F_("Can't create new active!\n");
+			F_("Can't create new active!\r\n");
 			success = FALSE;
 			continue;
 		}
@@ -365,7 +365,7 @@ static int read_file_v13(const char *fil
 		new_entry->current_state = initng_active_state_find(entry.state);
 		if (!new_entry->current_state)
 		{
-			F_("Could not find a proper state to set: %s.\n", entry.state);
+			F_("Could not find a proper state to set: %s.\r\n", entry.state);
 			success = FALSE;
 			continue;
 		}
@@ -373,7 +373,7 @@ static int read_file_v13(const char *fil
 		/* set service stype */
 		if (!(new_entry->type = initng_service_type_get_by_name(entry.type)))
 		{
-			F_("Unknown service type %s.\n", entry.type);
+			F_("Unknown service type %s.\r\n", entry.type);
 			success = FALSE;
 			continue;
 		}
@@ -401,7 +401,7 @@ static int read_file_v13(const char *fil
 				/* check so it was found */
 				if (strcmp(entry.process[pnr].ptype, pt->name) != 0)
 				{
-					F_("Unknown process type %s\n", entry.process[pnr].ptype);
+					F_("Unknown process type %s\r\n", entry.process[pnr].ptype);
 					pnr++;
 					continue;
 				}
@@ -437,7 +437,7 @@ static int read_file_v13(const char *fil
 				/* add this process to the list */
 				list_add(&process->list, &new_entry->processes.list);
 
-				D_("Added process type %i to %s\n", process->pt,
+				D_("Added process type %i to %s\r\n", process->pt,
 				   new_entry->name);
 
 				pnr++;
@@ -453,7 +453,7 @@ static int read_file_v13(const char *fil
 				d->type = initng_service_data_type_find(entry.data[i].type);
 				if (!d->type)
 				{
-					F_("Did not found %s!\n", entry.data[i].type);
+					F_("Did not found %s!\r\n", entry.data[i].type);
 					free(d);
 					i++;
 					continue;
@@ -486,7 +486,7 @@ static int read_file_v13(const char *fil
 		/* add the new service to the active_db */
 		if (initng_active_db_register(new_entry) != TRUE)
 		{
-			F_("Could not add entry!\n");
+			F_("Could not add entry!\r\n");
 			initng_active_db_free(new_entry);
 			success = FALSE;
 			continue;
@@ -502,7 +502,7 @@ static int read_file_v13(const char *fil
 	fclose(fil);
 	if (unlink(filename) != 0)
 	{
-		W_("Failed removing file %s !!!\n", filename);
+		W_("Failed removing file %s !!!\r\n", filename);
 		return success;						/* not important */
 	}
 
@@ -525,7 +525,7 @@ static int write_file(const char *filena
 	fil = fopen(filename, "w+");
 	if (!fil)
 	{
-		F_("Could not open '%s' for writing\n", filename);
+		F_("Could not open '%s' for writing\r\n", filename);
 		return FALSE;
 	}
 
@@ -534,13 +534,13 @@ static int write_file(const char *filena
 	{
 		if (!current->current_state)
 		{
-			F_("State is not set, wont save this one!\n");
+			F_("State is not set, wont save this one!\r\n");
 			continue;
 		}
 
 		if (strlen(current->name) >= MAX_SERVICE_NAME_STRING_LEN)
 		{
-			F_("Service name is to long, it won't fit the fileformat spec! max is %i, won't save this service!\n", MAX_SERVICE_NAME_STRING_LEN);
+			F_("Service name is to long, it won't fit the fileformat spec! max is %i, won't save this service!\r\n", MAX_SERVICE_NAME_STRING_LEN);
 			success = FALSE;
 			continue;
 		}
@@ -635,16 +635,16 @@ static int write_file(const char *filena
 			/* maximum data entries that can be saved */
 			if (i == MAX_ENTRYS_FOR_SERVICE)
 			{
-				F_("Maximum 20 data entries / service can't be saved!\n");
+				F_("Maximum 20 data entries / service can't be saved!\r\n");
 				success = FALSE;
 				break;
 			}
 		}
 
-		D_("Saving : %s\n", entry.name);
+		D_("Saving : %s\r\n", entry.name);
 		if (fwrite(&entry, sizeof(entry), 1, fil) != 1)
 		{
-			F_("failed to write entry '%s': %m\n", entry.name);
+			F_("failed to write entry '%s': %m\r\n", entry.name);
 			/* TODO: database recovery?? */
 			success = FALSE;
 			break;
@@ -711,7 +711,7 @@ static int reload_state(s_event * event)
 		return (read_file_v13(file));
 	}
 
-	D_("No state file found, passing on reload_state request\n");
+	D_("No state file found, passing on reload_state request\r\n");
 	return (FALSE);
 }
 
@@ -759,10 +759,10 @@ static int save_backup(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init(reload);\n");
+	D_("module_init(reload);\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -787,7 +787,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_SYSTEM_CHANGE, &save_backup);
 	initng_event_hook_unregister(&EVENT_DUMP_ACTIVE_DB, &dump_state);
 	initng_event_hook_unregister(&EVENT_RELOAD_ACTIVE_DB, &reload_state);
diff -rupN /tmp/initng-0.6.10.2/plugins/renice/initng_renice.c ./plugins/renice/initng_renice.c
--- /tmp/initng-0.6.10.2/plugins/renice/initng_renice.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/renice/initng_renice.c	2016-07-13 12:08:47.765159761 +0200
@@ -48,11 +48,11 @@ static int do_renice(s_event * event)
 
 	if (is(&NICE, data->service))
 	{
-		D_("Will renice %s to %i !\n", data->service->name, get_int(&NICE, data->service));
+		D_("Will renice %s to %i !\r\n", data->service->name, get_int(&NICE, data->service));
 		errno = 0;
 		if (nice(get_int(&NICE, data->service)) == -1 && errno != 0)
 		{
-			F_("Failed to set the nice value: %s\n", strerror(errno));
+			F_("Failed to set the nice value: %s\r\n", strerror(errno));
 			return (FAIL);
 		}
 	}
@@ -62,10 +62,10 @@ static int do_renice(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -75,7 +75,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&NICE);
 	initng_event_hook_unregister(&EVENT_AFTER_FORK, &do_renice);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/rlparser/initng_rl_parser.c ./plugins/rlparser/initng_rl_parser.c
--- /tmp/initng-0.6.10.2/plugins/rlparser/initng_rl_parser.c	2007-02-23 05:12:16.000000000 +0100
+++ ./plugins/rlparser/initng_rl_parser.c	2016-07-13 12:08:47.765159761 +0200
@@ -62,7 +62,7 @@ static service_cache_h *parse_file(char
 	char *a = NULL;
 	char *w_depends = NULL;
 
-	D_("parse_file(%s, %s);\n", filetoparse, runlevel_name);
+	D_("parse_file(%s, %s);\r\n", filetoparse, runlevel_name);
 
 	/* allocate a new service */
 	if (!(n_service = initng_service_cache_new(runlevel_name, type)))
@@ -74,7 +74,7 @@ static service_cache_h *parse_file(char
 	/* copy file filename into allocated file_buf */
 	if (!open_read_close(filetoparse, &w_depends))
 	{
-		D_("parse_file(%s): Can't open config file!\n", filetoparse);
+		D_("parse_file(%s): Can't open config file!\r\n", filetoparse);
 		if (n_service->name)
 			free(n_service->name);
 
@@ -106,7 +106,7 @@ static service_cache_h *parse_file(char
 		a = st_dup_line(&w);
 		if (a)
 		{
-			D_("adding dep: \"%s\"\n", a);
+			D_("adding dep: \"%s\"\r\n", a);
 			set_another_string(&NEED, n_service, a);
 		}
 
@@ -156,7 +156,7 @@ static int initng_rl_parser(s_event * ev
 		TYPE_RUNLEVEL = initng_service_type_get_by_name("runlevel");
 		if (!TYPE_RUNLEVEL)
 		{
-			F_("ERROR, runlevel servicetype is not found, make sure runlevel plugin is loaded.\n");
+			F_("ERROR, runlevel servicetype is not found, make sure runlevel plugin is loaded.\r\n");
 			return (FALSE);
 		}
 	}
@@ -166,7 +166,7 @@ static int initng_rl_parser(s_event * ev
 		TYPE_VIRTUAL = initng_service_type_get_by_name("virtual");
 		if (!TYPE_VIRTUAL)
 		{
-			F_("ERROR, virtual servicetype is not found, make sure runlevel plugin is loaded.\n");
+			F_("ERROR, virtual servicetype is not found, make sure runlevel plugin is loaded.\r\n");
 			return (FALSE);
 		}
 	}
@@ -204,10 +204,10 @@ int module_init(int api_version)
 	/* initziate globals */
 	TYPE_RUNLEVEL = NULL;
 
-	D_("initng_rl_parser: module_init();\n");
+	D_("initng_rl_parser: module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/plugins/runlevel/initng_runlevel.c ./plugins/runlevel/initng_runlevel.c
--- /tmp/initng-0.6.10.2/plugins/runlevel/initng_runlevel.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/runlevel/initng_runlevel.c	2016-07-13 12:08:47.765159761 +0200
@@ -132,7 +132,7 @@ static int start_RUNLEVEL(active_db_h *
 	/* mark it WAITING_FOR_START_DEP and wait */
 	if (!initng_common_mark_service(service, &RUNLEVEL_START_MARKED))
 	{
-		W_("mark_service RUNLEVEL_START_MARKED failed for service %s\n",
+		W_("mark_service RUNLEVEL_START_MARKED failed for service %s\r\n",
 		   service->name);
 		return (FALSE);
 	}
@@ -156,7 +156,7 @@ static int stop_RUNLEVEL(active_db_h * s
 	/* set stopping */
 	if (!initng_common_mark_service(service, &RUNLEVEL_STOP_MARKED))
 	{
-		W_("mark_service RUNLEVEL_STOP_MARKED failed for service %s.\n",
+		W_("mark_service RUNLEVEL_STOP_MARKED failed for service %s.\r\n",
 		   service->name);
 		return (FALSE);
 	}
@@ -173,10 +173,10 @@ static int stop_RUNLEVEL(active_db_h * s
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -197,7 +197,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	initng_service_type_unregister(&TYPE_RUNLEVEL);
 	initng_service_type_unregister(&TYPE_VIRTUAL);
@@ -282,7 +282,7 @@ static void init_RUNLEVEL_START_MARKED(a
 
 					if (service_to_stop)
 					{
-						W_("Stopping service %s, not in new service %s\n",
+						W_("Stopping service %s, not in new service %s\r\n",
 						   service_to_stop->name, new_runlevel->name);
 						initng_handler_stop_service(service_to_stop);
 					}
diff -rupN /tmp/initng-0.6.10.2/plugins/selinux/initng_selinux.c ./plugins/selinux/initng_selinux.c
--- /tmp/initng-0.6.10.2/plugins/selinux/initng_selinux.c	2007-03-04 04:53:22.000000000 +0100
+++ ./plugins/selinux/initng_selinux.c	2016-07-13 12:08:47.765159761 +0200
@@ -118,7 +118,7 @@ static int set_selinux_context(s_event *
 	selinux_getenforcemode(&enforce);
 	if (enforce)
 	{
-		F_("bash_this(): could not change selinux context!\n ERROR!\n");
+		F_("bash_this(): could not change selinux context!\r\n ERROR!\r\n");
 		return (FAIL);
 	}
 	else
@@ -130,15 +130,15 @@ static int set_selinux_context(s_event *
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 	/*
 	if(g.i_am != I_AM_INIT) {
-		F_("Selinx have no effect in fake mode\n");
+		F_("Selinx have no effect in fake mode\r\n");
 		return(FALSE);
 	}
 	*/
@@ -153,7 +153,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	/* remove hooks and free data here */
 	initng_service_data_type_unregister(&SELINUX_CONTEXT);
diff -rupN /tmp/initng-0.6.10.2/plugins/service/initng_service.c ./plugins/service/initng_service.c
--- /tmp/initng-0.6.10.2/plugins/service/initng_service.c	2016-07-11 14:45:42.419276000 +0200
+++ ./plugins/service/initng_service.c	2016-07-13 12:08:47.765159761 +0200
@@ -230,7 +230,7 @@ static int start_SERVICE(active_db_h * s
 	/* mark it WAITING_FOR_START_DEP and wait */
 	if (!initng_common_mark_service(service, &SERVICE_START_MARKED))
 	{
-		W_("mark_service SERVICE_START_MARKED failed for service %s\n",
+		W_("mark_service SERVICE_START_MARKED failed for service %s\r\n",
 		   service->name);
 		return (FALSE);
 	}
@@ -254,7 +254,7 @@ static int stop_SERVICE(active_db_h * se
 	/* set stopping */
 	if (!initng_common_mark_service(service, &SERVICE_STOP_MARKED))
 	{
-		W_("mark_service SERVICE_STOP_MARKED failed for service %s.\n",
+		W_("mark_service SERVICE_STOP_MARKED failed for service %s.\r\n",
 		   service->name);
 		return (FALSE);
 	}
@@ -272,10 +272,10 @@ static int stop_SERVICE(active_db_h * se
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -321,7 +321,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	initng_service_type_unregister(&TYPE_SERVICE);
 
@@ -427,7 +427,7 @@ static void handle_SERVICE_WAITING_FOR_S
 	/* if system is shutting down, don't start anything */
 	if (g.sys_state != STATE_STARTING && g.sys_state != STATE_UP)
 	{
-		D_("Can't start service, when system status is: %i !\n", g.sys_state);
+		D_("Can't start service, when system status is: %i !\r\n", g.sys_state);
 		initng_common_mark_service(service, &SERVICE_STOPPED);
 		return;
 	}
@@ -458,11 +458,11 @@ static void init_SERVICE_START_DEPS_MET(
 	switch (initng_execute_launch(service, &T_START, NULL))
 	{
 		case FALSE:
-			F_("Did not find a start entry to run!\n", service->name);
+			F_("Did not find a start entry to run!\r\n", service->name);
 			initng_common_mark_service(service, &SERVICE_FAIL_START_NONEXIST);
 			return;
 		case FAIL:
-			F_("Service %s, could not launch start, did not find any to launch!\n", service->name);
+			F_("Service %s, could not launch start, did not find any to launch!\r\n", service->name);
 			initng_common_mark_service(service, &SERVICE_FAIL_START_LAUNCH);
 			return;
 		default:
@@ -481,7 +481,7 @@ static void init_SERVICE_STOP_DEPS_MET(a
 	switch (initng_execute_launch(service, &T_STOP, NULL))
 	{
 		case FAIL:
-			F_("  --  (%s): fail launch stop!\n", service->name);
+			F_("  --  (%s): fail launch stop!\r\n", service->name);
 			initng_common_mark_service(service, &SERVICE_FAIL_STOP_NONEXIST);
 			return;
 		case FALSE:
@@ -503,7 +503,7 @@ static void init_SERVICE_START_RUN(activ
 {
 	int timeout;
 
-	D_("Service %s, run init_SERVICE_START_RUN\n", service->name);
+	D_("Service %s, run init_SERVICE_START_RUN\r\n", service->name);
 
 	/* if NEVER_KILL is set, dont bother */
 	if (is(&NEVER_KILL, service))
@@ -529,7 +529,7 @@ static void init_SERVICE_STOP_RUN(active
 {
 	int timeout;
 
-	D_("Service %s, run init_SERVICE_STOP_RUN\n", service->name);
+	D_("Service %s, run init_SERVICE_STOP_RUN\r\n", service->name);
 
 	/* if NEVER_KILL is set, dont bother */
 	if (is(&NEVER_KILL, service))
@@ -555,20 +555,20 @@ static void timeout_SERVICE_START_RUN(ac
 	if (is(&NEVER_KILL, service))
 		return;
 
-	W_("Timeout for start process, service %s.  Killing this process now.\n",
+	W_("Timeout for start process, service %s.  Killing this process now.\r\n",
 	   service->name);
 
 	/* get the process */
 	if (!(process = initng_process_db_get(&T_START, service)))
 	{
-		F_("Did not find the T_START process!\n");
+		F_("Did not find the T_START process!\r\n");
 		return;
 	}
 
 	/* if the process does not exist on the system anymore, run the killd handler. */
 	if (process->pid <= 0 || (kill(process->pid, 0) && errno == ESRCH))
 	{
-		W_("The start process have dissapeared from the system without notice, running start kill handler.\n");
+		W_("The start process have dissapeared from the system without notice, running start kill handler.\r\n");
 		handle_killed_start(service, process);
 		return;
 	}
@@ -588,20 +588,20 @@ static void timeout_SERVICE_STOP_RUN(act
 	if (is(&NEVER_KILL, service))
 		return;
 
-	W_("Timeout for stop process, service %s.   Killing this process now.\n",
+	W_("Timeout for stop process, service %s.   Killing this process now.\r\n",
 	   service->name);
 
 	/* get the process */
 	if (!(process = initng_process_db_get(&T_STOP, service)))
 	{
-		F_("Did not find the T_STOP process!\n");
+		F_("Did not find the T_STOP process!\r\n");
 		return;
 	}
 
 	/* if the process does not exist on the system anymore, run the killd handler. */
 	if (process->pid <= 0 || (kill(process->pid, 0) && errno == ESRCH))
 	{
-		W_("The stop process have dissapeared from the system without notice, running stop kill handler.\n");
+		W_("The stop process have dissapeared from the system without notice, running stop kill handler.\r\n");
 		handle_killed_stop(service, process);
 		return;
 	}
@@ -639,7 +639,7 @@ static void handle_killed_start(active_d
 	assert(process);
 	int rcode;
 
-	D_("handle_killed_start(%s): initial status: \"%s\".\n",
+	D_("handle_killed_start(%s): initial status: \"%s\".\r\n",
 	   service->name, service->current_state->state_name);
 
 
@@ -658,7 +658,7 @@ static void handle_killed_start(active_d
 	 */
 	if (!IS_MARK(service, &SERVICE_START_RUN))
 	{
-		F_("Start exited!, and service is not marked starting!\nWas this one launched manually by ngc --run ??");
+		F_("Start exited!, and service is not marked starting!\r\nWas this one launched manually by ngc --run ??\r\n");
 		return;
 	}
 
@@ -666,7 +666,7 @@ static void handle_killed_start(active_d
 
 	if (WTERMSIG(process->r_code) == 11)
 	{
-		F_("Service %s process start SETGFAUTED!\n");
+		F_("Service %s process start SETGFAUTED!\r\n");
 		initng_common_mark_service(service, &SERVICE_FAIL_START_SIGNAL);
 		return;
 	}
@@ -678,7 +678,7 @@ static void handle_killed_start(active_d
 	/* if rcode > 0 */
 	if (WEXITSTATUS(rcode) > 0 && !is(&START_FAIL_OK, service))
 	{
-		F_(" start %s, Returned with TERMSIG %i rcode %i.\n", service->name,
+		F_(" start %s, Returned with TERMSIG %i rcode %i.\r\n", service->name,
 		   WTERMSIG(rcode), WEXITSTATUS(rcode));
 		initng_common_mark_service(service, &SERVICE_FAIL_START_RCODE);
 		return;
@@ -707,7 +707,7 @@ static void handle_killed_stop(active_db
 	assert(service->current_state->state_name);
 	assert(process);
 
-	D_("(%s);\n", service->name);
+	D_("(%s);\r\n", service->name);
 
 	/* Free the process what ever happens below */
 	initng_process_db_free(process);
@@ -722,14 +722,14 @@ static void handle_killed_stop(active_db
 	/* make sure its a STOP_RUN state */
 	if (!IS_MARK(service, &SERVICE_STOP_RUN))
 	{
-		F_("stop service died, but service is not status STOPPING!\n");
+		F_("stop service died, but service is not status STOPPING!\r\n");
 		return;
 	}
 
 	/* check with SIGSEGV (11) */
 	if (WTERMSIG(process->r_code) == 11)
 	{
-		F_(" service %s stop process SEGFAUTED!\n", service->name);
+		F_(" service %s stop process SEGFAUTED!\r\n", service->name);
 
 		/* mark service stopped */
 		initng_common_mark_service(service, &SERVICE_FAIL_STOP_SIGNAL);
@@ -745,7 +745,7 @@ static void handle_killed_stop(active_db
 	 */
 	if (WEXITSTATUS(process->r_code) > 0 && !is(&STOP_FAIL_OK, service))
 	{
-		F_(" stop %s, Returned with exit %i.\n", service->name,
+		F_(" stop %s, Returned with exit %i.\r\n", service->name,
 		   WEXITSTATUS(process->r_code));
 
 		/* mark service stopped */
diff -rupN /tmp/initng-0.6.10.2/plugins/simple_launcher/initng_simple_launcher.c ./plugins/simple_launcher/initng_simple_launcher.c
--- /tmp/initng-0.6.10.2/plugins/simple_launcher/initng_simple_launcher.c	2007-03-18 09:11:49.000000000 +0100
+++ ./plugins/simple_launcher/initng_simple_launcher.c	2016-07-13 12:08:47.769159760 +0200
@@ -68,7 +68,7 @@ s_entry EXEC_ARGS = { "exec_args", VARIA
    return;
 
    for (i = 0; argv[i]; i++)
-   D_("%s[%-2i]: %s\n", o, i, argv[i]);
+   D_("%s[%-2i]: %s\r\n", o, i, argv[i]);
    }
    #endif */
 
@@ -107,7 +107,7 @@ static char *expand_exec(char *exec)
 	/* get exec string length to later use */
 	exec_len = strlen(exec);
 
-	D_("initng_s_launch: %s is not an absolute path, searching $PATH\n",
+	D_("initng_s_launch: %s is not an absolute path, searching $PATH\r\n",
 	   exec);
 
 	/* get the env-path variable */
@@ -116,7 +116,7 @@ static char *expand_exec(char *exec)
 	/* Make sure we got a path */
 	if (!PATH)
 	{
-		D_("No $PATH found, using default path\n");
+		D_("No $PATH found, using default path\r\n");
 		PATH = i_strdup("/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin");
 	}
 	else
@@ -125,7 +125,7 @@ static char *expand_exec(char *exec)
 		PATH = i_strdup(PATH);
 	}
 
-	D_("PATH determined to be %s\n", PATH);
+	D_("PATH determined to be %s\r\n", PATH);
 
 	/* split path by ':' char */
 	path_argv = split_delim(PATH, ":", &path_c, 0);
@@ -184,7 +184,7 @@ static int simple_exec_fork(process_h *
 		initng_fork_aforkhooks(s, process_to_exec);
 
 #ifdef DEBUG
-		D_("FROM_FORK simple_exec(%i,%s, ...);\n", argc, argv[0]);
+		D_("FROM_FORK simple_exec(%i,%s, ...);\r\n", argc, argv[0]);
 		/*D_argv("simple_exec: ", argv); */
 #endif
 
@@ -192,14 +192,14 @@ static int simple_exec_fork(process_h *
 		execve(argv[0], argv, new_environ(s));
 
 		/* Will never get here if execve succeeded */
-		F_("ERROR!\n");
-		F_("Can't execute source %s!\n", argv[0]);
+		F_("ERROR!\r\n");
+		F_("Can't execute source %s!\r\n", argv[0]);
 
 		_exit(1);
 	}
 
 	/* save pid of fork */
-	D_("FROM_FORK Forkstarted pid %i.\n", pid_fork);
+	D_("FROM_FORK Forkstarted pid %i.\r\n", pid_fork);
 
 	if (pid_fork > 0)
 		return (TRUE);
@@ -271,7 +271,7 @@ static int simple_exec_try(char * exec,
 	size_t argc = 0;
 	int ret;
 
-	D_("exec: %s, service: %s, process: %s\n", exec, service->name,
+	D_("exec: %s, service: %s, process: %s\r\n", exec, service->name,
 	   process->pt->name);
 
 	/* exec_args should be parsed at the moment, too */
@@ -285,7 +285,7 @@ static int simple_exec_try(char * exec,
 		exec_args = fix_variables(exec_args_unfixed, service);
 		if (!exec_args)
 		{
-			F_("Failed to fix_variables: \"%s\"\n", exec_args);
+			F_("Failed to fix_variables: \"%s\"\r\n", exec_args);
 			return (FALSE);
 		}
 
@@ -300,7 +300,7 @@ static int simple_exec_try(char * exec,
 			if (argv)
 				split_delim_free(argv);
 
-			F_("split_delim exec_args returns NULL.\n");
+			F_("split_delim exec_args returns NULL.\r\n");
 			fix_free(exec_args, exec_args_unfixed);
 			return (FALSE);
 		}
@@ -335,7 +335,7 @@ static int simple_exec(active_db_h * ser
 	struct stat stat_struct;
 	s_data *itt = NULL;
 
-	D_("service: %s, process: %s\n", service->name, process->pt->name);
+	D_("service: %s, process: %s\r\n", service->name, process->pt->name);
 
 	while ((exec =
 			get_next_string_var(&EXECS, process->pt->name, service, &itt)))
@@ -347,14 +347,14 @@ static int simple_exec(active_db_h * ser
 
 		if (!exec_fixed)
 		{
-			F_("Unable to fix_variables!\n");
+			F_("Unable to fix_variables!\r\n");
 			return (FALSE);
 		}
 
 		/* check if the file exist */
 		if (stat(exec_fixed, &stat_struct) != 0)
 		{
-			D_(" note, %s exec_fixed does not exist. \n", exec_fixed);
+			D_(" note, %s exec_fixed does not exist. \r\n", exec_fixed);
 			continue;
 		}
 
@@ -382,7 +382,7 @@ static int simple_run(active_db_h * serv
 	int result = FALSE;
 	char *argv0 = NULL;
 
-	D_("service: %s process: %s.\n", service->name, process->pt->name);
+	D_("service: %s process: %s.\r\n", service->name, process->pt->name);
 
 	exec = get_string_var(&EXEC, process->pt->name, service);
 	if (!exec)
@@ -393,7 +393,7 @@ static int simple_run(active_db_h * serv
 	exec_fixed = fix_variables(exec, service);
 	if (!exec_fixed)
 	{
-		F_("Unable to fix_variables!\n");
+		F_("Unable to fix_variables!\r\n");
 		return (FALSE);
 	}
 
@@ -408,7 +408,7 @@ static int simple_run(active_db_h * serv
 		if (argv)
 			split_delim_free(argv);
 
-		D_("split_delim on exec returns NULL.\n");
+		D_("split_delim on exec returns NULL.\r\n");
 		fix_free(exec_fixed, exec);
 		return (FALSE);
 	}
@@ -419,7 +419,7 @@ static int simple_run(active_db_h * serv
 		argv0 = expand_exec(argv[0]);
 		if (!argv0)
 		{
-			F_("SERVICE: %s %s -- %s was not found in search path.\n",
+			F_("SERVICE: %s %s -- %s was not found in search path.\r\n",
 			   service->name, process->pt->name, argv[0]);
 			split_delim_free(argv);
 			argv = NULL;
@@ -471,7 +471,7 @@ static int initng_s_launch(s_event * eve
 	assert(data->process);
 	assert(data->exec_name);
 
-	D_("service: %s, process: %s\n", data->service->name, data->process->pt->name);
+	D_("service: %s, process: %s\r\n", data->service->name, data->process->pt->name);
 
 	if (is_var(&EXECS, data->exec_name, data->service))
 		if (simple_exec(data->service, data->process))
@@ -487,10 +487,10 @@ static int initng_s_launch(s_event * eve
 
 int module_init(int api_version)
 {
-	D_("initng_simple_plugin: module_init();\n");
+	D_("initng_simple_plugin: module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -503,7 +503,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("initng_simple_plugin: module_unload();\n");
+	D_("initng_simple_plugin: module_unload();\r\n");
 
 	initng_service_data_type_unregister(&EXEC);
 	initng_service_data_type_unregister(&EXECS);
diff -rupN /tmp/initng-0.6.10.2/plugins/stcmd/initng_stcmd.c ./plugins/stcmd/initng_stcmd.c
--- /tmp/initng-0.6.10.2/plugins/stcmd/initng_stcmd.c	2016-07-11 14:45:42.419276000 +0200
+++ ./plugins/stcmd/initng_stcmd.c	2016-07-13 12:08:47.769159760 +0200
@@ -267,7 +267,7 @@ static char *cmd_print_uptime(char *arg)
 	gettimeofday(&now, NULL);
 	{
 		string = i_calloc(50, sizeof(char));
-		sprintf(string, "Up-time is %ims.\n",
+		sprintf(string, "Up-time is %ims.\r\n",
 				MS_DIFF(now, apt->time_current_state));
 		return (string);
 	}
@@ -281,7 +281,7 @@ static int cmd_reload(char *arg)
 	/* if no arg, or empty arg set, remove all content */
 	if (!arg || strlen(arg) < 2)
 	{
-		D_("Clearing complete db.\n");
+		D_("Clearing complete db.\r\n");
 		initng_service_cache_free_all();
 		return (TRUE);
 	}
@@ -289,11 +289,11 @@ static int cmd_reload(char *arg)
 	s = initng_service_cache_find_in_name(arg);
 	if (!s)
 	{
-		D_("Did not find service %s to release cache for!\n", arg);
+		D_("Did not find service %s to release cache for!\r\n", arg);
 		return (FALSE);
 	}
 
-	D_("removing service data for %s!\n", arg);
+	D_("removing service data for %s!\r\n", arg);
 	list_del(&s->list);
 	initng_service_cache_free(s);
 	return (TRUE);
@@ -333,7 +333,7 @@ static char *cmd_print_modules(char *arg
 	(void) arg;
 
 
-	sprintf(string, "modules: \n");
+	sprintf(string, "modules: \r\n");
 
 	while_module_db(mod)
 	{
@@ -352,7 +352,7 @@ static char *cmd_print_modules(char *arg
 				strcat(string, " ");
 		}
 		strcat(string, mod->module_filename);
-		strcat(string, "\n");
+		strcat(string, "\r\n");
 	}
 
 	/* ok, the string lengh is probably a lot bigger, resize it right */
@@ -411,10 +411,10 @@ static char *cmd_get_father_of(char *arg
 	}
 
 	if (s->father_name)
-		mprintf(&string, "Father to service %s is %s\n", s->name,
+		mprintf(&string, "Father to service %s is %s\r\n", s->name,
 				s->father_name);
 	else
-		mprintf(&string, "Service %s has no father\n", s->name);
+		mprintf(&string, "Service %s has no father\r\n", s->name);
 
 	return (string);
 }
@@ -431,7 +431,7 @@ static char *cmd_get_depends_on(char *ar
 	if (!on)
 		return (i_strdup("Did not find service."));
 
-	mprintf(&string, "The \"%s\" depends on:\n", on->name);
+	mprintf(&string, "The \"%s\" depends on:\r\n", on->name);
 
 	while_active_db(current)
 	{
@@ -440,7 +440,7 @@ static char *cmd_get_depends_on(char *ar
 		{
 			if (current->current_state && current->current_state->state_name)
 			{
-				mprintf(&string, "  %s\t\t[%s]\n", current->name,
+				mprintf(&string, "  %s        [%s]\r\n", current->name,
 						current->current_state->state_name);
 			}
 		}
@@ -459,7 +459,7 @@ static char *cmd_get_depends_on_deep(cha
 	if (!on)
 		return (i_strdup("Did not find service."));
 
-	mprintf(&string, "The \"%s\" depends on:\n", on->name);
+	mprintf(&string, "The \"%s\" depends on:\r\n", on->name);
 
 	while_active_db(current)
 	{
@@ -468,7 +468,7 @@ static char *cmd_get_depends_on_deep(cha
 		{
 			if (current->current_state && current->current_state->state_name)
 			{
-				mprintf(&string, "  %s\t\t[%s]\n", current->name,
+				mprintf(&string, "  %s        [%s]\r\n", current->name,
 						current->current_state->state_name);
 			}
 		}
@@ -486,7 +486,7 @@ static char *cmd_get_depends_off(char *a
 	if (!on)
 		return (i_strdup("Did not find service."));
 
-	mprintf(&string, "The services that depends on \"%s\":\n", on->name);
+	mprintf(&string, "The services that depends on \"%s\":\r\n", on->name);
 
 	while_active_db(current)
 	{
@@ -495,7 +495,7 @@ static char *cmd_get_depends_off(char *a
 		{
 			if (current->current_state && current->current_state->state_name)
 			{
-				mprintf(&string, "  %s\t\t[%s]\n", current->name,
+				mprintf(&string, "  %s        [%s]\r\n", current->name,
 						current->current_state->state_name);
 			}
 		}
@@ -514,7 +514,7 @@ static char *cmd_get_depends_off_deep(ch
 	if (!on)
 		return (i_strdup("Did not find service."));
 
-	mprintf(&string, "The the services that depends on \"%s\":\n", on->name);
+	mprintf(&string, "The the services that depends on \"%s\":\r\n", on->name);
 
 	while_active_db(current)
 	{
@@ -523,7 +523,7 @@ static char *cmd_get_depends_off_deep(ch
 		{
 			if (current->current_state && current->current_state->state_name)
 			{
-				mprintf(&string, "  %s\t\t[%s]\n", current->name,
+				mprintf(&string, "  %s        [%s]\r\n", current->name,
 						current->current_state->state_name);
 			}
 		}
@@ -560,14 +560,14 @@ static int cmd_run(char *arg)
 	runtype = strchr(arg, ':');
 	if (!runtype || runtype[0] != ':')
 	{
-		W_("Bad format: --run \"%s\"\n");
+		W_("Bad format: --run \"%s\"\r\n");
 		return (FALSE);
 	}
 
 	/* if serv name is less then 2 chars */
 	if (runtype - arg - 1 < 2)
 	{
-		W_("Bad format: --run \"%s\"\n");
+		W_("Bad format: --run \"%s\"\r\n");
 		return (FALSE);
 	}
 
@@ -580,7 +580,7 @@ static int cmd_run(char *arg)
 	service = initng_active_db_find_by_name(serv_name);
 	if (!service)
 	{
-		F_("Service \"%s\" was not found, trying to run.\n", serv_name);
+		F_("Service \"%s\" was not found, trying to run.\r\n", serv_name);
 		free(serv_name);
 		return (FALSE);
 	}
@@ -597,10 +597,10 @@ static int cmd_run(char *arg)
 
 int module_init(int api_version)
 {
-	D_("module_init(stcmd);\n");
+	D_("module_init(stcmd);\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -629,14 +629,14 @@ int module_init(int api_version)
 	initng_command_register(&NEW_INIT);
 	initng_command_register(&RUN);
 
-	D_("libstcmd.so.0.0 loaded!\n");
+	D_("libstcmd.so.0.0 loaded!\r\n");
 	return (TRUE);
 }
 
 
 void module_unload(void)
 {
-	D_("module_unload(stcmd);\n");
+	D_("module_unload(stcmd);\r\n");
 
 	initng_command_unregister(&GET_PID_OF);
 	initng_command_unregister(&START_ON_NEW);
@@ -663,6 +663,6 @@ void module_unload(void)
 	initng_command_unregister(&NEW_INIT);
 	initng_command_unregister(&RUN);
 
-	D_("libstcmd.so.0.0 unloaded!\n");
+	D_("libstcmd.so.0.0 unloaded!\r\n");
 
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/stdout/initng_stdout.c ./plugins/stdout/initng_stdout.c
--- /tmp/initng-0.6.10.2/plugins/stdout/initng_stdout.c	2007-03-04 04:53:22.000000000 +0100
+++ ./plugins/stdout/initng_stdout.c	2016-07-13 12:08:47.769159760 +0200
@@ -97,7 +97,7 @@ static int setup_output(s_event * event)
 
 	if (!(s_stdout || s_stderr || s_stdall || s_stdin))
 	{
-		D_("This plugin won't do anything, because no opt set!\n");
+		D_("This plugin won't do anything, because no opt set!\r\n");
 		return (TRUE);
 	}
 
@@ -143,23 +143,23 @@ static int setup_output(s_event * event)
 
 	/* print fail messages, if the files did not open */
 	if (f_stdall && fd_stdall < 2)
-		F_("StdALL: %s, fd %i\n", f_stdall, fd_stdall);
+		F_("StdALL: %s, fd %i\r\n", f_stdall, fd_stdall);
 	if (f_stdout && fd_stdout < 2)
-		F_("StdOUT: %s, fd %i\n", f_stdout, fd_stdout);
+		F_("StdOUT: %s, fd %i\r\n", f_stdout, fd_stdout);
 	if (f_stderr && fd_stderr < 2)
-		F_("StdERR: %s, fd %i\n", f_stderr, fd_stderr);
+		F_("StdERR: %s, fd %i\r\n", f_stderr, fd_stderr);
 	if (f_stdin && fd_stdin < 2)
-		F_("StdIN: %s, fd %i\n", f_stdin, fd_stdin);
+		F_("StdIN: %s, fd %i\r\n", f_stdin, fd_stdin);
 
 #ifdef DEBUG
 	if (f_stdall)
-		D_("StdALL: %s, fd %i\n", f_stdall, fd_stdall);
+		D_("StdALL: %s, fd %i\r\n", f_stdall, fd_stdall);
 	if (f_stdout)
-		D_("StdOUT: %s, fd %i\n", f_stdout, fd_stdout);
+		D_("StdOUT: %s, fd %i\r\n", f_stdout, fd_stdout);
 	if (f_stderr)
-		D_("StdERR: %s, fd %i\n", f_stderr, fd_stderr);
+		D_("StdERR: %s, fd %i\r\n", f_stderr, fd_stderr);
 	if (f_stdin)
-		D_("StdIN:  %s, fd %i\n", f_stdin, fd_stdin);
+		D_("StdIN:  %s, fd %i\r\n", f_stdin, fd_stdin);
 #endif
 
 	/* if fd succeeded to open */
@@ -202,10 +202,10 @@ int module_init(int api_version)
 {
 	S_;
 
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -222,7 +222,7 @@ void module_unload(void)
 {
 	S_;
 
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 
 	initng_service_data_type_unregister(&STDOUT);
 	initng_service_data_type_unregister(&STDERR);
diff -rupN /tmp/initng-0.6.10.2/plugins/suid/initng_suid.c ./plugins/suid/initng_suid.c
--- /tmp/initng-0.6.10.2/plugins/suid/initng_suid.c	2016-07-11 14:45:42.419276000 +0200
+++ ./plugins/suid/initng_suid.c	2016-07-13 12:08:47.769159760 +0200
@@ -108,7 +108,7 @@ static int do_suid(s_event * event)
 	}
 	else if (username)
 	{
-		F_("USER \"%s\" not found!\n", username);
+		F_("USER \"%s\" not found!\r\n", username);
 		ret += 2;
 	}
 
@@ -116,7 +116,7 @@ static int do_suid(s_event * event)
 		gid = group->gr_gid;
 	else if (groupname)
 	{
-		F_("GROUP \"%s\" not found!\n", groupname);
+		F_("GROUP \"%s\" not found!\r\n", groupname);
 		ret += 1;
 	}
 
@@ -149,10 +149,10 @@ static int do_suid(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -163,7 +163,7 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_service_data_type_unregister(&SUID);
 	initng_service_data_type_unregister(&SGID);
 	initng_event_hook_unregister(&EVENT_AFTER_FORK, &do_suid);
diff -rupN /tmp/initng-0.6.10.2/plugins/syncron/initng_syncron.c ./plugins/syncron/initng_syncron.c
--- /tmp/initng-0.6.10.2/plugins/syncron/initng_syncron.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/syncron/initng_syncron.c	2016-07-13 12:08:47.769159760 +0200
@@ -52,7 +52,7 @@ static int resolv_SSR(void)
 	SERVICE_START_RUN = initng_active_state_find("SERVICE_START_RUN");
 	if (!SERVICE_START_RUN)
 	{
-		F_("Could not resolve SERVICE_START_RUN, is service type loaded?");
+		F_("Could not resolve SERVICE_START_RUN, is service type loaded?\r\n");
 		return (FALSE);
 
 	}
@@ -95,7 +95,7 @@ static int check_syncronicly_service(s_e
 			{
 				if (strcmp(service_syncron, current_syncron) == 0)
 				{
-					D_("Service %s has to wait for %s\n", service->name,
+					D_("Service %s has to wait for %s\r\n", service->name,
 					   current->name);
 					/* refuse to change status */
 					return (FAIL);
@@ -143,10 +143,10 @@ int module_init(int api_version)
 
 	SERVICE_START_RUN = NULL;
 
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -162,7 +162,7 @@ int module_init(int api_version)
 		}
 	check = FALSE;
 	/* Notice this is only added if we don't have --synchronously */
-	D_("Adding synchron\n");
+	D_("Adding synchron\r\n");
 	initng_event_hook_register(&EVENT_START_DEP_MET,
 								&check_syncronicly_service);
 
diff -rupN /tmp/initng-0.6.10.2/plugins/syslog/initng_syslog.c ./plugins/syslog/initng_syslog.c
--- /tmp/initng-0.6.10.2/plugins/syslog/initng_syslog.c	2007-11-05 07:41:57.000000000 +0100
+++ ./plugins/syslog/initng_syslog.c	2016-07-13 17:56:23.467034583 +0200
@@ -39,6 +39,10 @@
 
 INITNG_PLUGIN_MACRO;
 
+s_entry FORWARD_TO_SYSLOG = { "forward_to_syslog", SET, NULL,
+	"Specify if messages received by initng will be forwarded to syslog."
+};
+
 static int syslog_print_system_state(s_event * event);
 static int syslog_print_status_change(s_event * event);
 static void check_syslog(void);
@@ -161,36 +165,9 @@ static int syslog_print_status_change(s_
 
 	assert(service->name);
 
-	if (IS_UP(service))
-	{
-		check_syslog();
-		initng_log(LOG_NOTICE, NULL, "Service %s is up.\n", service->name);
-		return (TRUE);
-	}
-
-	if (IS_DOWN(service))
-	{
-		initng_log(LOG_NOTICE, NULL, "Service %s has been stopped.\n",
-				   service->name);
-		return (TRUE);
-	}
 	if (IS_FAILED(service))
 	{
-		initng_log(LOG_NOTICE, NULL, "Service %s FAILED.\n", service->name);
-		return (TRUE);
-	}
-
-	if (IS_STOPPING(service))
-	{
-		initng_log(LOG_NOTICE, NULL, "Service %s is stopping.\n",
-				   service->name);
-		return (TRUE);
-	}
-
-	if (IS_STARTING(service))
-	{
-		initng_log(LOG_NOTICE, NULL, "Service %s is starting.\n",
-				   service->name);
+		initng_log(LOG_ERR, NULL, "Service %s FAILED.", service->name);
 		return (TRUE);
 	}
 
@@ -210,7 +187,7 @@ static int syslog_print_system_state(s_e
 	switch (*state)
 	{
 		case STATE_UP:
-			initng_log(LOG_NOTICE, NULL, "System is up and running!\n");
+			initng_log(LOG_NOTICE, NULL, "System is up and running!");
 			/*
 			 * if syslogd have not been started yet, its no ida,
 			 * to spend memory for the buffert anyway.
@@ -218,28 +195,28 @@ static int syslog_print_system_state(s_e
 			free_buffert();
 			return (TRUE);
 		case STATE_STARTING:
-			initng_log(LOG_NOTICE, NULL, "System is starting up.\n");
+			initng_log(LOG_NOTICE, NULL, "System is starting up.");
 			return (TRUE);
 		case STATE_STOPPING:
-			initng_log(LOG_NOTICE, NULL, "System is going down.\n");
+			initng_log(LOG_NOTICE, NULL, "System is going down.");
 			return (TRUE);
 		case STATE_ASE:
-			initng_log(LOG_NOTICE, NULL, "Last service exited.\n");
+			initng_log(LOG_NOTICE, NULL, "Last service exited.");
 			return (TRUE);
 		case STATE_EXIT:
-			initng_log(LOG_NOTICE, NULL, "Initng is exiting.\n");
+			initng_log(LOG_NOTICE, NULL, "Initng is exiting.");
 			return (TRUE);
 		case STATE_RESTART:
-			initng_log(LOG_NOTICE, NULL, "Initng is restarting.\n");
+			initng_log(LOG_NOTICE, NULL, "Initng is restarting.");
 			return (TRUE);
 		case STATE_HALT:
-			initng_log(LOG_NOTICE, NULL, "System is halting.\n");
+			initng_log(LOG_NOTICE, NULL, "System is halting.");
 			return (TRUE);
 		case STATE_POWEROFF:
-			initng_log(LOG_NOTICE, NULL, "System is power-off.\n");
+			initng_log(LOG_NOTICE, NULL, "System is power-off.");
 			return (TRUE);
 		case STATE_REBOOT:
-			initng_log(LOG_NOTICE, NULL, "System is rebooting.\n");
+			initng_log(LOG_NOTICE, NULL, "System is rebooting.");
 			return (TRUE);
 		default:
 			return (TRUE);
@@ -252,7 +229,6 @@ static int syslog_fetch_output(s_event *
 	s_event_buffer_watcher_data * data;
 	char log[201];
 	int pos = 0;
-	int i;
 
 	assert(event->event_type == &EVENT_BUFFER_WATCHER);
 	assert(event->data);
@@ -262,28 +238,34 @@ static int syslog_fetch_output(s_event *
 	assert(data->service);
 	assert(data->service->name);
 
-	/* print every line, ending with a '\n' as an own syslog */
-	while (data->buffer_pos[pos])
+	/* only apply if forward to syslog */
+	if (!is(&FORWARD_TO_SYSLOG, data->service))
+		return (TRUE);
+
+	memset(log, 0, sizeof log);
+
+	/* print every line as an own syslog */
+	for(pos = 0; data->buffer_pos[pos]; pos++)
 	{
-		i = 0;
-		/* count the number of char before '\n' */
-		while (data->buffer_pos[pos + i] && data->buffer_pos[pos + i] != '\n' && i < 200)
-			i++;
-
-		/* copy that many chars to our temporary log array */
-		strncpy(log, &data->buffer_pos[pos], i);
-		log[i] = '\0';
-
-		/* send it to syslog */
-		initng_log(LOG_NOTICE, data->service->name, "%s", log);
-
-		/* step forward */
-		pos += i;
-
-		/* and skip the newline if any */
-		if (data->buffer_pos[pos])
-			pos++;
+		/* end of line ? */
+		if(data->buffer_pos[pos] == '\n')
+		{
+			/* send it to syslog */
+			initng_log(LOG_ALERT, data->service->name, "%s", log);
+
+			/* clean log array */
+			memset(log, 0, sizeof log);
+
+			/* skip new line */
+			continue;
+		}
+
+		/* skip carriage return */
+		if(data->buffer_pos[pos] == '\r')
+			continue;
 
+		/* copy char to our temporary log array */
+		strncat(log, &data->buffer_pos[pos], 1);
 	}
 	return (TRUE);
 }
@@ -311,10 +293,10 @@ static int syslog_print_error(s_event *
 	{
 		case MSG_FAIL:
 #ifdef DEBUG
-			syslog(LOG_EMERG, "\"%s\", %s() #%i FAIL: %s", data->file, data->func, data->line,
+			syslog(LOG_ERR, "\"%s\", %s() #%i FAIL: %s", data->file, data->func, data->line,
 				   tempspace);
 #else
-			syslog(LOG_EMERG, "FAIL: %s", tempspace);
+			syslog(LOG_ERR, "FAIL: %s", tempspace);
 #endif
 			break;
 		case MSG_WARN:
@@ -322,7 +304,7 @@ static int syslog_print_error(s_event *
 			syslog(LOG_WARNING, "\"%s\", %s() #%i WARN: %s", data->file, data->func, data->line,
 				   tempspace);
 #else
-			syslog(LOG_EMERG, "WARN: %s", tempspace);
+			syslog(LOG_WARNING, "WARN: %s", tempspace);
 #endif
 			break;
 		default:
@@ -340,17 +322,17 @@ int module_init(int api_version)
 {
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
 	/* Don't clutter syslog in fake mode */
 	if (getpid() != 1 || g.i_am != I_AM_INIT)
 	{
-		D_("Pid is not 1, (%i), or g.i_am_init not set and the syslog plugin won't load when running in fake mode, to prevent cluttering up the log-files.\n", getpid());
+		D_("Pid is not 1, (%i), or g.i_am_init not set and the syslog plugin won't load when running in fake mode, to prevent cluttering up the log-files.\r\n", getpid());
 		return (TRUE);
 	}
-	D_("Initializing syslog plugin\n");
+	D_("Initializing syslog plugin\r\n");
 
 	INIT_LIST_HEAD(&log_list.list);
 	check_syslog();
@@ -358,6 +340,7 @@ int module_init(int api_version)
 	setlogmask(LOG_UPTO(LOG_NOTICE));
 	openlog("InitNG", 0, LOG_LOCAL1);
 
+	initng_service_data_type_register(&FORWARD_TO_SYSLOG);
 	initng_event_hook_register(&EVENT_IS_CHANGE, &syslog_print_status_change);
 	initng_event_hook_register(&EVENT_SYSTEM_CHANGE, &syslog_print_system_state);
 	initng_event_hook_register(&EVENT_BUFFER_WATCHER, &syslog_fetch_output);
@@ -372,10 +355,11 @@ void module_unload(void)
 	/* Don't clutter syslog in fake mode */
 	if (g.i_am != I_AM_INIT)
 	{
-		D_("The syslog plugin won't load when running in fake mode, to prevent cluttering up the log-files.\n");
+		D_("The syslog plugin won't load when running in fake mode, to prevent cluttering up the log-files.\r\n");
 		return;
 	}
 
+	initng_service_data_type_unregister(&FORWARD_TO_SYSLOG);
 	initng_event_hook_unregister(&EVENT_IS_CHANGE, &syslog_print_status_change);
 	initng_event_hook_unregister(&EVENT_SYSTEM_CHANGE, &syslog_print_system_state);
 	initng_event_hook_unregister(&EVENT_BUFFER_WATCHER, &syslog_fetch_output);
diff -rupN /tmp/initng-0.6.10.2/plugins/sysreq/initng_sysreq.c ./plugins/sysreq/initng_sysreq.c
--- /tmp/initng-0.6.10.2/plugins/sysreq/initng_sysreq.c	2007-05-19 22:32:58.000000000 +0200
+++ ./plugins/sysreq/initng_sysreq.c	2016-07-13 12:08:47.769159760 +0200
@@ -53,11 +53,11 @@ static int sysreq(s_event * event)
 	if (*signal != SIGWINCH)
 		return (TRUE);
 
-	printf(" %-36s   %-15s (I)\n", "Service", "State");
-	printf(" ----------------------------------------------------------\n");
+	printf(" %-36s   %-15s (I)\r\n", "Service", "State");
+	printf(" ----------------------------------------------------------\r\n");
 	while_active_db(current)
 	{
-		printf(" %-36s : %-15s (%i)\n", current->name,
+		printf(" %-36s : %-15s (%i)\r\n", current->name,
 			   current->current_state->state_name,
 			   current->current_state->is);
 	}
@@ -67,10 +67,10 @@ static int sysreq(s_event * event)
 
 int module_init(int api_version)
 {
-	D_("module_init();\n");
+	D_("module_init();\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
@@ -80,6 +80,6 @@ int module_init(int api_version)
 
 void module_unload(void)
 {
-	D_("module_unload();\n");
+	D_("module_unload();\r\n");
 	initng_event_hook_unregister(&EVENT_SIGNAL, &sysreq);
 }
diff -rupN /tmp/initng-0.6.10.2/plugins/unneeded/initng_unneeded.c ./plugins/unneeded/initng_unneeded.c
--- /tmp/initng-0.6.10.2/plugins/unneeded/initng_unneeded.c	2007-01-10 23:36:32.000000000 +0100
+++ ./plugins/unneeded/initng_unneeded.c	2016-07-13 12:08:47.769159760 +0200
@@ -107,27 +107,27 @@ static int cmd_stop_unneeded(char *arg)
 
 int module_init(int api_version)
 {
-	D_("module_init(unneeded);\n");
+	D_("module_init(unneeded);\r\n");
 	if (api_version != API_VERSION)
 	{
-		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\n", API_VERSION, api_version);
+		F_("This module is compiled for api_version %i version and initng is compiled on %i version, won't load this module!\r\n", API_VERSION, api_version);
 		return (FALSE);
 	}
 
 	initng_command_register(&STOP_UNNEEDED);
 
-	D_("libunneeded.so.0.0 loaded!\n");
+	D_("libunneeded.so.0.0 loaded!\r\n");
 	return (TRUE);
 }
 
 
 void module_unload(void)
 {
-	D_("module_unload(unneeded);\n");
+	D_("module_unload(unneeded);\r\n");
 
 	initng_command_unregister(&STOP_UNNEEDED);
 
 
-	D_("libunneeded.so.0.0 unloaded!\n");
+	D_("libunneeded.so.0.0 unloaded!\r\n");
 
 }
diff -rupN /tmp/initng-0.6.10.2/src/initng_active_db.c ./src/initng_active_db.c
--- /tmp/initng-0.6.10.2/src/initng_active_db.c	2006-06-08 18:32:44.000000000 +0200
+++ ./src/initng_active_db.c	2016-07-13 12:08:47.769159760 +0200
@@ -49,7 +49,7 @@ active_db_h *initng_active_db_find_by_ex
 {
 	active_db_h *current = NULL;
 
-	D_("(%s);\n", (char *) service);
+	D_("(%s);\r\n", (char *) service);
 
 	assert(service);
 
@@ -75,7 +75,7 @@ active_db_h *initng_active_db_find_by_na
 	assert(service);
 	active_db_h *current = NULL;
 
-	D_("(%s);\n", (char *) service);
+	D_("(%s);\r\n", (char *) service);
 
 	/* first give the exact find a shot */
 	if ((current = initng_active_db_find_by_exact_name(service)))
@@ -108,7 +108,7 @@ int reload_service_cache(data_head * hea
 {
 	active_db_h *service = NULL;
 
-	/*printf("reload_service_cache();\n"); */
+	/*printf("reload_service_cache();\r\n"); */
 	if (head->res)
 		return (TRUE);
 
@@ -128,7 +128,7 @@ int reload_service_cache(data_head * hea
 		return (TRUE);
 	}
 
-	D_("Failed to reload service_cache for %s\n", service->name);
+	D_("Failed to reload service_cache for %s\r\n", service->name);
 	service->from_service = &NO_CACHE;
 	return (FALSE);
 }
@@ -144,7 +144,7 @@ active_db_h *initng_active_db_find_in_na
 
 	assert(service);
 
-	D_("(%s);\n", (char *) service);
+	D_("(%s);\r\n", (char *) service);
 
 	/* first search by name */
 	if ((current = initng_active_db_find_by_name(service)))
@@ -224,7 +224,7 @@ int initng_active_db_register(active_db_
 	if ((current = initng_active_db_find_by_name(add_this->name)))
 	{
 		/* TODO, should add_this bee freed? */
-		W_("active_db_add(%s): duplicate here\n", add_this->name);
+		W_("active_db_add(%s): duplicate here\r\n", add_this->name);
 		return (FALSE);
 	}
 
@@ -246,7 +246,7 @@ active_db_h *initng_active_db_new(const
 	new_active = (active_db_h *) i_calloc(1, sizeof(active_db_h));	/* Allocate memory for a new active */
 	if (!new_active)						/* out of memory? */
 	{
-		F_("Unable to allocate active, out of memory?\n");
+		F_("Unable to allocate active, out of memory?\r\n");
 		return (NULL);
 	}
 
@@ -257,7 +257,7 @@ active_db_h *initng_active_db_new(const
 	new_active->name = i_strdup(name);
 	if (!new_active->name)
 	{
-		F_("Unable to set name, out of memory?\n");
+		F_("Unable to set name, out of memory?\r\n");
 		return (NULL);
 	}
 
@@ -294,7 +294,7 @@ void initng_active_db_free(active_db_h *
 	assert(pf);
 	assert(pf->name);
 
-	D_("(%s);\n", pf->name);
+	D_("(%s);\r\n", pf->name);
 
 	/* look if there are plug-ins, that is interested to now, this is freeing */
 	initng_common_mark_service(pf, &FREEING);
@@ -466,7 +466,7 @@ int initng_active_db_percent_started(voi
 		/* count others */
 		other++;
 	}
-	D_("active_db_percent_started(): up: %i   starting: %i  other: %i\n", up,
+	D_("active_db_percent_started(): up: %i   starting: %i  other: %i\r\n", up,
 	   starting, other);
 
 	/* if no one starting */
@@ -476,7 +476,7 @@ int initng_active_db_percent_started(voi
 	if (up > 0)
 	{
 		tmp = 100 * (float) up / (float) (starting + up);
-		D_("active_db_percent_started(): up/starting: %f percent: %i\n\n",
+		D_("active_db_percent_started(): up/starting: %f percent: %i\r\n\r\n",
 		   (float) up / (float) starting, (int) tmp);
 		return ((int) tmp);
 	}
@@ -515,7 +515,7 @@ int initng_active_db_percent_stopped(voi
 		other++;
 	}
 
-	D_("active_db_percent_stopped(): down: %i   stopping: %i  other: %i\n",
+	D_("active_db_percent_stopped(): down: %i   stopping: %i  other: %i\r\n",
 	   down, stopping, other);
 
 	/* if no one stopping */
@@ -525,7 +525,7 @@ int initng_active_db_percent_stopped(voi
 	if (down > 0)
 	{
 		tmp = 100 * (float) down / (float) (stopping + down);
-		D_("active_db_percent_stopped(): down/stopping: %f percent: %i\n\n",
+		D_("active_db_percent_stopped(): down/stopping: %f percent: %i\r\n\r\n",
 		   (float) down / (float) stopping, (int) tmp);
 		return ((int) tmp);
 	}
diff -rupN /tmp/initng-0.6.10.2/src/initng_active_state.c ./src/initng_active_state.c
--- /tmp/initng-0.6.10.2/src/initng_active_state.c	2006-05-18 12:30:22.000000000 +0200
+++ ./src/initng_active_state.c	2016-07-13 12:08:47.769159760 +0200
@@ -34,11 +34,11 @@ int initng_active_state_register(a_state
 	/* look for duplicates */
 	if (initng_active_state_find(state->state_name) != NULL)
 	{
-		F_("There exists a state with this state_name (%s) already, please check this!\n", state->state_name);
+		F_("There exists a state with this state_name (%s) already, please check this!\r\n", state->state_name);
 		return (FALSE);
 	}
 
-	D_("adding %s.\n", state->state_name);
+	D_("adding %s.\r\n", state->state_name);
 	/* add this state, to the big list of states */
 	list_add(&(state->list), &(g.states.list));
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_common.c ./src/initng_common.c
--- /tmp/initng-0.6.10.2/src/initng_common.c	2007-01-03 00:34:46.000000000 +0100
+++ ./src/initng_common.c	2016-07-13 12:08:47.769159760 +0200
@@ -83,12 +83,12 @@ active_db_h *initng_common_load_to_activ
 	active_db_h *current = NULL;
 
 	assert(service_name);
-	D_("load_to_active(%s); \n", service_name);
+	D_("load_to_active(%s); \r\n", service_name);
 
 	/* check the blacklist db */
 	if (initng_common_service_blacklisted(service_name))
 	{
-		F_("load_to_active(%s): Service BLACKLISTED.\n", service_name);
+		F_("load_to_active(%s): Service BLACKLISTED.\r\n", service_name);
 		return (NULL);
 	}
 
@@ -97,7 +97,7 @@ active_db_h *initng_common_load_to_activ
 	/* Make sure there isn't any process with this name running */
 	if ((a_new = initng_active_db_find_by_name(service_name)))
 	{
-		F_("load_to_active(%s): Service with same name %s exists! \n",
+		F_("load_to_active(%s): Service with same name %s exists! \r\n",
 		   service_name);
 		return (NULL);
 	}
@@ -106,7 +106,7 @@ active_db_h *initng_common_load_to_activ
 	/* if not create a new active entry, out of memory? */
 	if (!(a_new = initng_active_db_new(service_name)))
 	{
-		D_("load_to_active(%s): Unable to allocate process, out of memory?\n",
+		D_("load_to_active(%s): Unable to allocate process, out of memory?\r\n",
 		   service_name);
 		return (NULL);
 	}
@@ -114,7 +114,7 @@ active_db_h *initng_common_load_to_activ
 	/* this actually loads service from disk */
 	if (!initng_common_get_service(a_new) || !(a_new->from_service))
 	{
-		D_("load_to_active(%s): Can't get service!\n", service_name);
+		D_("load_to_active(%s): Can't get service!\r\n", service_name);
 		if (a_new)
 			initng_active_db_free(a_new);
 		return (NULL);
@@ -123,7 +123,7 @@ active_db_h *initng_common_load_to_activ
 	/* Mark this service as state LOADING, plug-ins may hook here */
 	if (!initng_common_mark_service(a_new, &LOADING))
 	{
-		W_("Failed to mark service LOADING.\n");
+		W_("Failed to mark service LOADING.\r\n");
 		if (a_new)
 			initng_active_db_free(a_new);
 		return (NULL);
@@ -134,7 +134,7 @@ active_db_h *initng_common_load_to_activ
 	   a_new->from_service->type != TYPE_DAEMON &&
 	   a_new->from_service->type != TYPE_RUNLEVEL)
 	   {
-	   F_("load_to_active(%s): service is not a service type!\n",
+	   F_("load_to_active(%s): service is not a service type!\r\n",
 	   service_name);
 	   if (a_new)
 	   active_db_free(a_new);
@@ -159,7 +159,7 @@ active_db_h *initng_common_load_to_activ
 			if (initng_depend_deep(a_new, current)
 				&& initng_depend_deep(current, a_new))
 			{
-				F_("load_to_active(%s): not loading service %s, because it has a circular dependency on %s\n", service_name, a_new->name, current->name);
+				F_("load_to_active(%s): not loading service %s, because it has a circular dependency on %s\r\n", service_name, a_new->name, current->name);
 				initng_active_db_free(a_new);
 				return NULL;
 			}
@@ -171,7 +171,7 @@ active_db_h *initng_common_load_to_activ
 		return (a_new);
 
 	/* fail by default */
-	F_("active_db_add() FAILED!\n");
+	F_("active_db_add() FAILED!\r\n");
 	if (a_new)
 		initng_active_db_free(a_new);
 	return (NULL);
@@ -188,12 +188,12 @@ int initng_common_get_service(active_db_
 
 	assert(service);
 	assert(service->name);
-	D_("get_service(%s);\n", service->name);
+	D_("get_service(%s);\r\n", service->name);
 
 	/* check if service is set already */
 	if (service->from_service)
 	{
-		D_("get_service(%s): already have a service!\n", service->name);
+		D_("get_service(%s): already have a service!\r\n", service->name);
 		return (TRUE);
 	}
 
@@ -201,7 +201,7 @@ int initng_common_get_service(active_db_
 	if (!(service->from_service = initng_common_parse_service(service->name)))
 	{
 		/* or fail */
-		D_("get_service(%s): Can't get source.. \n", service->name);
+		D_("get_service(%s): Can't get source.. \r\n", service->name);
 		return (FALSE);
 	}
 
@@ -209,7 +209,7 @@ int initng_common_get_service(active_db_
 	service->type = service->from_service->type;
 	service->data.res = &service->from_service->data;
 
-	D_(" get_service(%s): got service from initng dynamic parsers.\n",
+	D_(" get_service(%s): got service from initng dynamic parsers.\r\n",
 	   service->name);
 
 	/* will continue here only, if initng_modules_parse did succeed */
@@ -266,7 +266,7 @@ int initng_common_get_service(active_db_
 	/* compare the first i chars */
 	if (strncmp(service->from_service->name, service->name, i) != 0)
 	{
-		D_("Name %s ..\n", service->name);
+		D_("Name %s ..\r\n", service->name);
 		char *new_name = (char *) i_calloc(strlen(service->name) + i + 3,
 										   sizeof(char));
 
@@ -286,7 +286,7 @@ int initng_common_get_service(active_db_
 		/* ok update new name */
 		free(service->name);
 		service->name = new_name;
-		D_(" Is now: %s \n", service->name);
+		D_(" Is now: %s \r\n", service->name);
 	}
 
 	/* return happily */
@@ -300,7 +300,7 @@ service_cache_h *initng_common_parse_ser
 {
 	service_cache_h *service = NULL;
 
-	D_("initng_common_parse_service(%s);\n", name);
+	D_("initng_common_parse_service(%s);\r\n", name);
 
 	/* first check service cache */
 	service = initng_service_cache_find_by_name(name);
@@ -356,7 +356,7 @@ int initng_common_mark_service(active_db
 	/* Test if already set */
 	if (service->current_state == state)
 	{
-		D_("state %s is already set on %s!\n",
+		D_("state %s is already set on %s!\r\n",
 		   state->state_name, service->name);
 
 		/* clear next_state */
@@ -364,7 +364,7 @@ int initng_common_mark_service(active_db
 		return (TRUE);
 	}
 
-	D_("Going to mark service %s from %s to %s\n", service->name,
+	D_("Going to mark service %s from %s to %s\r\n", service->name,
 	   service->current_state->state_name, state->state_name);
 
 	service->next_state = state;
@@ -382,7 +382,7 @@ void initng_common_state_lock(active_db_
 	assert(service->name);
 
 	service->state_lock++;
-	D_("Locked state of %s (level: %d)\n", service->name, service->state_lock);
+	D_("Locked state of %s (level: %d)\r\n", service->name, service->state_lock);
 }
 
 int initng_common_state_unlock(active_db_h * service)
@@ -397,7 +397,7 @@ int initng_common_state_unlock(active_db
 		/* Test if locked more than one time */
 		if (--service->state_lock)
 		{
-			D_("State of %s is still locked (level: %d)\n", service->name, service->state_lock);
+			D_("State of %s is still locked (level: %d)\r\n", service->name, service->state_lock);
 			return (FALSE);
 		}
 	}
@@ -406,7 +406,7 @@ int initng_common_state_unlock(active_db
 	if (!service->next_state)
 		return (FALSE);
 
-	D_(" %-20s : %10s -> %-10s\n", service->name,
+	D_(" %-20s : %10s -> %-10s\r\n", service->name,
 	   service->current_state->state_name, service->next_state->state_name);
 
 	/* Fill last entries */
@@ -435,7 +435,7 @@ int initng_common_state_unlock(active_db
 	/* clear next_state */
 	service->next_state = NULL;
 
-	D_("Unlocked state of %s\n", service->name);
+	D_("Unlocked state of %s\r\n", service->name);
 
 	return (TRUE);
 }
diff -rupN /tmp/initng-0.6.10.2/src/initng_control_command.c ./src/initng_control_command.c
--- /tmp/initng-0.6.10.2/src/initng_control_command.c	2006-05-18 12:24:55.000000000 +0200
+++ ./src/initng_control_command.c	2016-07-13 12:08:47.769159760 +0200
@@ -40,7 +40,7 @@ int initng_command_register(s_command *
 	{
 		if (current == cmd || current->command_id == cmd->command_id)
 		{
-			F_("Can't add command: %c, %s, it exists already!\n",
+			F_("Can't add command: %c, %s, it exists already!\r\n",
 			   current->command_id, current->description);
 			return (FALSE);
 		}
@@ -95,7 +95,7 @@ int initng_command_execute_arg(char cid,
 	/* make sure it found it. */
 	if (!cmd)
 	{
-		D_("Did not find command %c.\n", cid);
+		D_("Did not find command %c.\r\n", cid);
 		return (FALSE);
 	}
 
@@ -103,7 +103,7 @@ int initng_command_execute_arg(char cid,
 	if (cmd->com_type != INT_COMMAND && cmd->com_type != VOID_COMMAND
 		&& cmd->com_type != TRUE_OR_FALSE_COMMAND)
 	{
-		W_("Command %c is not an INT_COMMAND, VOID_COMMAND or TRUE_OR_FALSE_COMMAND.\n", cid);
+		W_("Command %c is not an INT_COMMAND, VOID_COMMAND or TRUE_OR_FALSE_COMMAND.\r\n", cid);
 		return (FALSE);
 	}
 
@@ -111,7 +111,7 @@ int initng_command_execute_arg(char cid,
 
 	if (!cmd->u.int_command_void_call)
 	{
-		W_("Command %c missing u.int_command_call or u.int_command_void_call.\n", cid);
+		W_("Command %c missing u.int_command_call or u.int_command_void_call.\r\n", cid);
 		return (FALSE);
 	}
 
@@ -119,12 +119,12 @@ int initng_command_execute_arg(char cid,
 	/* check with arguments */
 	if (!arg && cmd->opt_type == REQUIRES_OPT)
 	{
-		F_("Command %c needs an opt!\n", cid);
+		F_("Command %c needs an opt!\r\n", cid);
 		return (FALSE);
 	}
 	if (arg && cmd->opt_type == NO_OPT)
 	{
-		F_("Command %c don't uses any options!\n", cid);
+		F_("Command %c don't uses any options!\r\n", cid);
 		return (FALSE);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_depend.c ./src/initng_depend.c
--- /tmp/initng-0.6.10.2/src/initng_depend.c	2007-02-20 14:26:38.000000000 +0100
+++ ./src/initng_depend.c	2016-07-13 12:08:47.773159760 +0200
@@ -135,7 +135,7 @@ int initng_any_depends_on(active_db_h *
 {
 	active_db_h *current = NULL;
 
-	D_("initng_any_depends_on(%s);\n", service->name);
+	D_("initng_any_depends_on(%s);\r\n", service->name);
 
 	while_active_db(current)
 	{
@@ -149,13 +149,13 @@ int initng_any_depends_on(active_db_h *
 			/* if current depends on service */
 			if (initng_depend_deep(current, service) == TRUE)
 			{
-				D_("Service %s depends on %s\n", current->name,
+				D_("Service %s depends on %s\r\n", current->name,
 				   service->name);
 				return (TRUE);
 			}
 		}
 	}
-	D_("None found depending on %s.\n", service->name);
+	D_("None found depending on %s.\r\n", service->name);
 	return (FALSE);
 }
 
@@ -284,7 +284,7 @@ int initng_depend_start_dep_met(active_d
 		count++;
 		if (service->depend_cache >= count)
 		{
-			D_("Dep %s is ok allredy for %s.\n", current->t.s, service->name);
+			D_("Dep %s is ok allredy for %s.\r\n", current->t.s, service->name);
 			continue;
 		}
 
@@ -292,11 +292,11 @@ int initng_depend_start_dep_met(active_d
 		/* tell the user what we got */
 #ifdef DEBUG
 		if (current->type == &REQUIRE)
-			D_(" %s requires %s\n", service->name, current->t.s);
+			D_(" %s requires %s\r\n", service->name, current->t.s);
 		else if (current->type == &NEED)
-			D_(" %s needs %s\n", service->name, current->t.s);
+			D_(" %s needs %s\r\n", service->name, current->t.s);
 		else if (current->type == &USE)
-			D_(" %s uses %s\n", service->name, current->t.s);
+			D_(" %s uses %s\r\n", service->name, current->t.s);
 #endif
 
 		/* fix the variables */
@@ -314,7 +314,7 @@ int initng_depend_start_dep_met(active_d
 			}
 			else if (current->type == &REQUIRE)
 			{
-				F_("%s required dep \"%s\" could not start!\n", service->name,
+				F_("%s required dep \"%s\" could not start!\r\n", service->name,
 				   str);
 				initng_common_mark_service(service, &REQ_NOT_FOUND);
 				/* if its not yet found, this dep is not reached */
@@ -334,7 +334,7 @@ int initng_depend_start_dep_met(active_d
 		{
 			if (verbose)
 			{
-				F_("Could not start service %s because it depends on service %s that is still starting.\n", service->name, dep->name);
+				F_("Could not start service %s because it depends on service %s that is still starting.\r\n", service->name, dep->name);
 			}
 			fix_free(str, current->t.s);
 			return (FALSE);
@@ -345,7 +345,7 @@ int initng_depend_start_dep_met(active_d
 		{
 			if (verbose)
 			{
-				F_("Could not start service %s because it depends on service %s that is failed.\n", service->name, dep->name);
+				F_("Could not start service %s because it depends on service %s that is failed.\r\n", service->name, dep->name);
 			}
 			fix_free(str, current->t.s);
 			return (FAIL);
@@ -369,14 +369,14 @@ int initng_depend_start_dep_met(active_d
 		/* if its not starting or up, return FAIL */
 		if (!IS_UP(dep))
 		{
-			F_("Could not start service %s because it depends on service %s has state %s\n", service->name, dep->name, dep->current_state->state_name);
+			F_("Could not start service %s because it depends on service %s has state %s\r\n", service->name, dep->name, dep->current_state->state_name);
 			fix_free(str, current->t.s);
 			return (FALSE);
 		}
 
 		/* GOT HERE MEENS THAT ITS OK */
 		service->depend_cache = count;
-		D_("Dep %s is ok for %s.\n", current->t.s, service->name);
+		D_("Dep %s is ok for %s.\r\n", current->t.s, service->name);
 		/* continue; */
 	}
 
@@ -391,14 +391,14 @@ int initng_depend_start_dep_met(active_d
 		{
 			if (verbose)
 			{
-				F_("Service %s can not be started because a plugin (EVENT_START_DEP_MET) says so.\n", service->name);
+				F_("Service %s can not be started because a plugin (EVENT_START_DEP_MET) says so.\r\n", service->name);
 			}
 
 			return (FALSE);
 		}
 	}
 
-	D_("dep met for %s\n", service->name);
+	D_("dep met for %s\r\n", service->name);
 
 	/* reset the count cache */
 	service->depend_cache = 0;
@@ -458,10 +458,10 @@ int initng_depend_stop_dep_met(active_db
 #ifdef DEBUG
 		/* else RETURN */
 		if (verbose)
-			D_("still waiting for service %s state %s\n", currentA->name,
+			D_("still waiting for service %s state %s\r\n", currentA->name,
 			   currentA->current_state->state_name);
 		else
-			D_("still waiting for service %s state %s\n", currentA->name,
+			D_("still waiting for service %s state %s\r\n", currentA->name,
 			   currentA->current_state->state_name);
 #endif
 
@@ -486,7 +486,7 @@ int initng_depend_stop_dep_met(active_db
 		{
 			if (verbose)
 			{
-				F_("Service %s can not be started because a plugin (START_DEP_MET) says so.\n", service->name);
+				F_("Service %s can not be started because a plugin (START_DEP_MET) says so.\r\n", service->name);
 			}
 
 			return (FALSE);
@@ -510,7 +510,7 @@ int initng_depend_start_deps(active_db_h
 	assert(service);
 	assert(service->name);
 #ifdef DEBUG
-	D_("initng_depend_start_deps(%s);\n", service->name);
+	D_("initng_depend_start_deps(%s);\r\n", service->name);
 #endif
 
 	/* walk all possible entrys, use get_next with NULL becouse we want both REQUIRE and NEED */
@@ -525,7 +525,7 @@ int initng_depend_start_deps(active_db_h
 			continue;
 
 		/* tell the user what we got */
-		D_(" %s %s %s\n", service->name,
+		D_(" %s %s %s\r\n", service->name,
 		   current->type == &REQUIRE ? "requires" : "needs", current->t.s);
 
 		/* fix the variables */
@@ -535,11 +535,11 @@ int initng_depend_start_deps(active_db_h
 		/* look if it exits already */
 		if ((dep = initng_active_db_find_by_exact_name(str)))
 		{
-			D_("No need to LOAD \"%s\" == \"%s\", state %s it is already loaded!\n", str, dep->name, dep->current_state->state_name);
+			D_("No need to LOAD \"%s\" == \"%s\", state %s it is already loaded!\r\n", str, dep->name, dep->current_state->state_name);
 			/* start the service if its down */
 			if (IS_DOWN(dep))
 			{
-				D_("Service %s is down, starting.\n", dep->name);
+				D_("Service %s is down, starting.\r\n", dep->name);
 				initng_handler_start_service(dep);
 			}
 
@@ -547,14 +547,14 @@ int initng_depend_start_deps(active_db_h
 			continue;
 		}
 
-		D_("Starting new_service becouse not found: %s\n", str);
+		D_("Starting new_service becouse not found: %s\r\n", str);
 		/* if we where not succeded to start this new one */
 		if (!initng_handler_start_new_service_named(str))
 		{
 			/* if its NEED */
 			if (current->type == &NEED)
 			{
-				D_("service \"%s\" needs service \"%s\", that could not be found!\n", service->name, str);
+				D_("service \"%s\" needs service \"%s\", that could not be found!\r\n", service->name, str);
 				fix_free(str, current->t.s);
 				continue;
 				/* else its REQUIRE */
@@ -562,7 +562,7 @@ int initng_depend_start_deps(active_db_h
 			else
 			{
 
-				F_("%s required dep \"%s\" could not start!\n", service->name,
+				F_("%s required dep \"%s\" could not start!\r\n", service->name,
 				   str);
 				initng_common_mark_service(service, &REQ_NOT_FOUND);
 				fix_free(str, current->t.s);
@@ -573,7 +573,7 @@ int initng_depend_start_deps(active_db_h
 		/* continue ; */
 	}
 
-	D_("initng_depend_start_deps(%s): DONE-TRUE\n", service->name);
+	D_("initng_depend_start_deps(%s): DONE-TRUE\r\n", service->name);
 
 	/* if we got here, its a sucess */
 	return (TRUE);
diff -rupN /tmp/initng-0.6.10.2/src/initng_env_variable.c ./src/initng_env_variable.c
--- /tmp/initng-0.6.10.2/src/initng_env_variable.c	2007-02-20 14:26:38.000000000 +0100
+++ ./src/initng_env_variable.c	2016-07-13 12:08:47.773159760 +0200
@@ -232,7 +232,7 @@ char **new_environ(active_db_h * s)
 #ifdef DEBUG
 	for (nr = 0; env[nr]; nr++)
 	{
-		D_("environ[%i] = \"%s\"\n", nr, env[nr]);
+		D_("environ[%i] = \"%s\"\r\n", nr, env[nr]);
 	}
 #endif
 
@@ -247,7 +247,7 @@ void free_environ(char **tf)
 {
 	int i = 0;
 
-	D_("free_environ();\n");
+	D_("free_environ();\r\n");
 	assert(tf);
 	for (i = 0; tf[i]; tf++)
 	{
@@ -372,14 +372,14 @@ static const char *get_data_env_int(cons
 {
 	s_data *tmp = NULL;
 
-	/*D_("get_data_env_int(%s, %i)\n", from, len); */
+	/*D_("get_data_env_int(%s, %i)\r\n", from, len); */
 
 	while ((tmp = d_get_next(&ENV, s, tmp)))
 	{
 		/* then do a full match */
 		if (strncasecmp(from, tmp->vn, len) == 0 && tmp->vn[len] == 0)
 		{
-			/*D_("match: %s\n", tmp->t.s); */
+			/*D_("match: %s\r\n", tmp->t.s); */
 			return (tmp->t.s);
 		}
 	}
@@ -455,11 +455,11 @@ char *fix_variables(const char *from, ac
 	if (!var_point)
 		return ((char *) from);
 
-	/*printf("Fix2: \"%s\"\n", from);
+	/*printf("Fix2: \"%s\"\r\n", from);
 	   sleep(1); */
 
 
-	/*D_("fix_variables(%s): %s\n", s->name, from); */
+	/*D_("fix_variables(%s): %s\r\n", s->name, from); */
 
 	const char *var_start;
 	const char *var_stop;
@@ -494,7 +494,7 @@ char *fix_variables(const char *from, ac
 	/* if we got any to compare */
 	if (var_len < 1)
 	{
-		F_("No var length.\n");
+		F_("No var length.\r\n");
 		return (NULL);
 	}
 
@@ -554,7 +554,7 @@ char *fix_variables(const char *from, ac
 			/* if conteht after the $ char, is the same as var_start */
 			if (strncasecmp(check, var_start, var_len) == 0)
 			{
-				F_("Circular ENV variables found, this wont work!\n");
+				F_("Circular ENV variables found, this wont work!\r\n");
 				return (NULL);
 			}
 		}
@@ -575,7 +575,7 @@ char *fix_variables(const char *from, ac
 	strncat(ret, rep, rep_len);				/* the replacement word */
 	strcat(ret, var_stop);					/* the rest of the string */
 
-	/*printf("Got: \"%s\"\n", ret); */
+	/*printf("Got: \"%s\"\r\n", ret); */
 
 	/* check if there is more of '$' chars */
 	if (strchr(ret, '$'))
@@ -621,7 +621,7 @@ char *fix_variables2(const char *from, s
 	if (!var_point)
 		return ((char *) from);
 
-	/*printf("Fix: \"%s\"\n", from);
+	/*printf("Fix: \"%s\"\r\n", from);
 	   sleep(1); */
 
 	/* check if its escaped, if it is, take next */
@@ -633,7 +633,7 @@ char *fix_variables2(const char *from, s
 		return ((char *) from);
 
 
-	/*D_("fix_variables(%s): %s\n", s->name, from); */
+	/*D_("fix_variables(%s): %s\r\n", s->name, from); */
 
 	const char *var_start;
 	const char *var_stop;
@@ -668,7 +668,7 @@ char *fix_variables2(const char *from, s
 	/* if we got any to compare */
 	if (var_len < 1)
 	{
-		F_("No var length.\n");
+		F_("No var length.\r\n");
 		return (NULL);
 	}
 
@@ -728,7 +728,7 @@ char *fix_variables2(const char *from, s
 			/* if conteht after the $ char, is the same as var_start */
 			if (strncasecmp(check, var_start, var_len) == 0)
 			{
-				F_("Circular ENV variables found, this wont work!\n");
+				F_("Circular ENV variables found, this wont work!\r\n");
 				return (NULL);
 			}
 		}
@@ -749,7 +749,7 @@ char *fix_variables2(const char *from, s
 	strncat(ret, rep, rep_len);				/* the replacement word */
 	strcat(ret, var_stop);					/* the rest of the string */
 
-	/*printf("Got: \"%s\"\n", ret); */
+	/*printf("Got: \"%s\"\r\n", ret); */
 
 	/* check if there is more of '$' chars */
 	if (strchr(ret, '$'))
@@ -844,7 +844,7 @@ char *fix_variables2(const char *from, s
 				}
 			default:
 				{
-					D_("Don't know how to set a variable with %s:%i\n",
+					D_("Don't know how to set a variable with %s:%i\r\n",
 					   entry->opt_name, entry->opt_type);
 					break;
 				}
diff -rupN /tmp/initng-0.6.10.2/src/initng_error.c ./src/initng_error.c
--- /tmp/initng-0.6.10.2/src/initng_error.c	2007-01-21 23:40:31.000000000 +0100
+++ ./src/initng_error.c	2016-07-13 12:08:47.773159760 +0200
@@ -53,17 +53,17 @@ static void initng_failsafe_print_error(
 		case MSG_FAIL:
 			if (file && func)
 				fprintf(stderr,
-						"\n\n FAILSAFE ERROR ** \"%s\", %s() line %i:\n",
+						"\r\n\r\n FAILSAFE ERROR ** \"%s\", %s() line %i:\r\n",
 						file, func, line);
-			fprintf(stderr, " %.2i:%.2i:%.2i -- FAIL:\t", ts->tm_hour,
+			fprintf(stderr, " %.2i:%.2i:%.2i -- FAIL:    ", ts->tm_hour,
 					ts->tm_min, ts->tm_sec);
 			break;
 		case MSG_WARN:
 			if (file && func)
 				fprintf(stderr,
-						"\n\n FAILSAFE ERROR ** \"%s\", %s() line %i:\n",
+						"\r\n\r\n FAILSAFE ERROR ** \"%s\", %s() line %i:\r\n",
 						file, func, line);
-			fprintf(stderr, " %.2i:%.2i:%.2i -- WARN:\t", ts->tm_hour,
+			fprintf(stderr, " %.2i:%.2i:%.2i -- WARN:    ", ts->tm_hour,
 					ts->tm_min, ts->tm_sec);
 			break;
 		default:
@@ -151,10 +151,10 @@ static void initng_verbose_print(void)
 	if (lock_error_printing == 1)
 		return;
 
-	W_("This words will i look for in debug: \n");
+	W_("This words will i look for in debug: \r\n");
 	for (i = 0; i < MAX_VERBOSES; i++)
 		if (g.verbose_this[i])
-			W_("  * \"%s\"\n", g.verbose_this[i]);
+			W_("  * \"%s\"\r\n", g.verbose_this[i]);
 }
 
 int initng_error_verbose_add(const char *string)
@@ -172,7 +172,7 @@ int initng_error_verbose_add(const char
 
 	if (i >= MAX_VERBOSES - 1)
 	{
-		F_("Can't add another \"%s\" debug trace\n", string);
+		F_("Can't add another \"%s\" debug trace\r\n", string);
 		return (FALSE);
 	}
 
@@ -241,7 +241,7 @@ void initng_error_print_func(const char
 	{
 		if (last_file != file || last_func != func)
 		{
-			fprintf(stderr, "\n\n ** \"%s\", %s():\n", file, func);
+			fprintf(stderr, "\r\n\r\n ** \"%s\", %s():\r\n", file, func);
 		}
 
 		last_file = file;
@@ -312,7 +312,7 @@ int initng_error_print_debug(const char
 	/* print the function name, if not set */
 	if (last_file != file || last_func != func)
 	{
-		fprintf(stderr, "\n\n ** \"%s\", %s():\n", file, func);
+		fprintf(stderr, "\r\n\r\n ** \"%s\", %s():\r\n", file, func);
 	}
 
 	last_file = file;
@@ -328,7 +328,7 @@ int initng_error_print_debug(const char
 	ts = localtime(&t);
 
 
-	fprintf(stderr, " %.2i:%.2i:%.2i -- l:%i\t", ts->tm_hour,
+	fprintf(stderr, " %.2i:%.2i:%.2i -- l:%i    ", ts->tm_hour,
 			ts->tm_min, ts->tm_sec, line);
 
 	msgs++;
diff -rupN /tmp/initng-0.6.10.2/src/initng_event.c ./src/initng_event.c
--- /tmp/initng-0.6.10.2/src/initng_event.c	2007-01-03 02:13:29.000000000 +0100
+++ ./src/initng_event.c	2016-07-13 12:08:47.773159760 +0200
@@ -34,7 +34,7 @@ int initng_event_send(s_event *event)
 	assert(event);
 	assert(event->event_type);
 
-	D_("%s event triggered\n", event->event_type->name);
+	D_("%s event triggered\r\n", event->event_type->name);
 
 	while_list(current, &event->event_type->hooks)
 	{
@@ -42,13 +42,13 @@ int initng_event_send(s_event *event)
 
 		if (ret == HANDLED)
 		{
-			D_("%s event handled by %s\n", event->event_type->name, current->from_file);
+			D_("%s event handled by %s\r\n", event->event_type->name, current->from_file);
 			return (HANDLED);
 		}
 
 		if (ret == FAIL)
 		{
-			D_("%s event failed on %s\n", event->event_type->name, current->from_file);
+			D_("%s event failed on %s\r\n", event->event_type->name, current->from_file);
 			return (FAIL);
 		}
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_event_hook.c ./src/initng_event_hook.c
--- /tmp/initng-0.6.10.2/src/initng_event_hook.c	2006-12-30 14:06:56.000000000 +0100
+++ ./src/initng_event_hook.c	2016-07-13 12:08:47.773159760 +0200
@@ -37,7 +37,7 @@ int initng_event_hook_register_real(cons
 	assert(hook);
 	assert(t);
 
-	D_("\n\nAdding event hook type %i from file %s\n", t,
+	D_("\r\n\r\nAdding event hook type %i from file %s\r\n", t,
 	   from_file);
 
 	/* allocate space for new call */
@@ -62,7 +62,7 @@ void initng_event_hook_unregister_real(c
 	assert(hook);
 	assert(t);
 
-	D_("Deleting event hook from file %s, func %s, line %i.\n", from_file,
+	D_("Deleting event hook from file %s, func %s, line %i.\r\n", from_file,
 	   func, line);
 
 	while_list_safe(current, &t->hooks, safe)
@@ -80,6 +80,6 @@ void initng_event_hook_unregister_real(c
 		return;
 	}
 
-	F_("Could not find event hook to delete, file: %s, func:%s, line %i!!!!\n",
+	F_("Could not find event hook to delete, file: %s, func:%s, line %i!!!!\r\n",
 	   from_file, func, line);
 }
diff -rupN /tmp/initng-0.6.10.2/src/initng_event_types.c ./src/initng_event_types.c
--- /tmp/initng-0.6.10.2/src/initng_event_types.c	2006-10-10 03:25:35.000000000 +0200
+++ ./src/initng_event_types.c	2016-07-13 12:08:47.773159760 +0200
@@ -56,9 +56,9 @@ void initng_event_type_register(s_event_
 		while_service_event_types(current) {
 			if (current == ent) {
 				if (ent->name) {
-					F_("Option %s, already added!\n", ent->name);
+					F_("Option %s, already added!\r\n", ent->name);
 				} else {
-					F_("Option, already added!\n");
+					F_("Option, already added!\r\n");
 				}
 
 				return;
@@ -66,7 +66,7 @@ void initng_event_type_register(s_event_
 			if (current->name && ent->name
 				&& strcmp(current->name, ent->name) == 0)
 			{
-				F_("option %s, name taken.\n");
+				F_("option %s, name taken.\r\n");
 				return;
 			}
 		}
@@ -77,7 +77,7 @@ void initng_event_type_register(s_event_
 	list_add(&ent->list, &g.event_db.list);
 #ifdef DEBUG
 	if (ent->name)
-		D_(" \"%s\" added to option_db!\n", ent->name);
+		D_(" \"%s\" added to option_db!\r\n", ent->name);
 #endif
 }
 
@@ -116,7 +116,7 @@ s_event_type *initng_event_type_find(con
 
 	S_;
 	assert(string);
-	D_("looking for %s.\n", string);
+	D_("looking for %s.\r\n", string);
 	while_event_types(current)
 	{
 		if (current->name && strcmp(current->name, string) == 0)
diff -rupN /tmp/initng-0.6.10.2/src/initng_execute.c ./src/initng_execute.c
--- /tmp/initng-0.6.10.2/src/initng_execute.c	2007-03-04 04:53:22.000000000 +0100
+++ ./src/initng_execute.c	2016-07-13 12:08:47.773159760 +0200
@@ -52,13 +52,13 @@ int initng_execute_launch(active_db_h *
 	assert(service);
 	assert(type);
 
-	D_("start_launch(%s, %s);\n", service->name, type->name);
+	D_("start_launch(%s, %s);\r\n", service->name, type->name);
 
 	/* Try to get the current one */
 	process = initng_process_db_get(type, service);
 	if (process != NULL)
 	{
-		F_("There exists an \"%s\" process in \"%s\" already.\n",
+		F_("There exists an \"%s\" process in \"%s\" already.\r\n",
 		   process->pt->name, service->name);
 		/*assert(NULL); */
 		return (FALSE);
@@ -68,7 +68,7 @@ int initng_execute_launch(active_db_h *
 	process = initng_process_db_new(type);
 	if (!process)
 	{
-		F_("(%s): unable to allocate start_process!\n", service->name);
+		F_("(%s): unable to allocate start_process!\r\n", service->name);
 		return (FALSE);
 	}
 
@@ -99,10 +99,10 @@ int initng_execute_launch(active_db_h *
 		return (TRUE);
 
 	if (ret == FAIL)
-		F_("initng_execute(%s): FAILED LAUNCHING, returned FAIL\n",
+		F_("initng_execute(%s): FAILED LAUNCHING, returned FAIL\r\n",
 		   service->name);
 	else
-		D_("initng_execute(%s): FAILED LAUNCHING, noting font to launch.\n",
+		D_("initng_execute(%s): FAILED LAUNCHING, noting font to launch.\r\n",
 		   service->name);
 
 	/* on failure remove the process from list, and free it */
diff -rupN /tmp/initng-0.6.10.2/src/initng_fd.c ./src/initng_fd.c
--- /tmp/initng-0.6.10.2/src/initng_fd.c	2007-03-04 04:53:22.000000000 +0100
+++ ./src/initng_fd.c	2016-07-13 12:08:47.773159760 +0200
@@ -117,12 +117,12 @@ void initng_fd_process_read_input(active
 	int read_ret = 0;
 	char *tmp;
 
-	D_("\ninitng_fd_process_read_input(%s, %s);\n", service->name,
+	D_("\r\ninitng_fd_process_read_input(%s, %s);\r\n", service->name,
 	   p->pt->name);
 
 	if (pi->pipe[0] <= 0)
 	{
-		F_("FIFO, can't be read! NOT OPEN!\n");
+		F_("FIFO, can't be read! NOT OPEN!\r\n");
 		return;
 	}
 
@@ -147,11 +147,11 @@ void initng_fd_process_read_input(active
 		/* OBSERVE, i_realloc may change the path to the data, so dont set buffer_pos to early */
 
 		/* Make sure there is room for 100 more chars */
-		D_(" %i (needed buffersize) > %i(current buffersize)\n", pi->buffer_len + 100, pi->buffer_allocated);
+		D_(" %i (needed buffersize) > %i(current buffersize)\r\n", pi->buffer_len + 100, pi->buffer_allocated);
 		if (pi->buffer_len + 100 >= pi->buffer_allocated)
 		{
 			/* do a realloc */
-			D_("Changing size of buffer %p from %i to: %i bytes.\n", pi->buffer, pi->buffer_allocated,
+			D_("Changing size of buffer %p from %i to: %i bytes.\r\n", pi->buffer, pi->buffer_allocated,
 			   pi->buffer_allocated + 100 + 1 );
 			tmp = i_realloc(pi->buffer,
 							(pi->buffer_allocated + 100 + 1) * sizeof(char));
@@ -159,7 +159,7 @@ void initng_fd_process_read_input(active
 			/* make sure realloc suceeded */
 			if (tmp)
 			{
-				D_("pi->buffer changes from %p to %p.\n", pi->buffer, tmp);
+				D_("pi->buffer changes from %p to %p.\r\n", pi->buffer, tmp);
 				pi->buffer = tmp;
 				pi->buffer_allocated += 100;
 
@@ -171,16 +171,16 @@ void initng_fd_process_read_input(active
 			}
 			else
 			{
-				F_("realloc failed, possibly out of memory!\n");
+				F_("realloc failed, possibly out of memory!\r\n");
 				return;
 			}
 		}
 
 		/* read the data */
-		D_("Trying to read 100 chars:\n");
+		D_("Trying to read 100 chars:\r\n");
 		read_ret = read(pi->pipe[0], &pi->buffer[pi->buffer_len], 100);
-		/*printf("read_ret = %i  : \"%.100s\"\n", read_ret, read_pos); */
-		D_("And got %i chars...\n", read_ret);
+		/*printf("read_ret = %i  : \"%.100s\"\r\n", read_ret, read_pos); */
+		D_("And got %i chars...\r\n", read_ret);
 
 		/* make sure read does not return -1 */
 		if (read_ret <= 0)
@@ -196,7 +196,7 @@ void initng_fd_process_read_input(active
 	while (read_ret >= 100 || errno == EINTR);
 
 
-	D_("Done reading (read_ret=%i) (errno == %i).\n", read_ret, errno);
+	D_("Done reading (read_ret=%i) (errno == %i).\r\n", read_ret, errno);
 
 	/* make sure there is any */
 	if (pi->buffer_len > old_content_offset)
@@ -224,7 +224,7 @@ void initng_fd_process_read_input(active
 	 */
 	if (read_ret == 0)
 	{
-		D_("Closing fifos for %s.\n", service->name);
+		D_("Closing fifos for %s.\r\n", service->name);
 		if (pi->pipe[0] > 0)
 			close(pi->pipe[0]);
 		if (pi->pipe[1] > 0)
@@ -263,7 +263,7 @@ void initng_fd_process_read_input(active
 		}
 		else
 		{
-			F_("realloc failed, possibly out of memory!\n");
+			F_("realloc failed, possibly out of memory!\r\n");
 		}
 
 		/* Even if realloc failed, the buffer is still valid
@@ -272,7 +272,7 @@ void initng_fd_process_read_input(active
 		pi->buffer[9000] = '\0';			/* shortened by 1000 chars */
 	}
 
-	D_("function done...");
+	D_("function done...\r\n");
 }
 
 /*
@@ -354,7 +354,7 @@ void initng_fd_plugin_poll(int timeout)
 					/* expensive test to make sure the pipe is open, before adding */
 					if (!STILL_OPEN(current_pipe->pipe[0]))
 					{
-						D_("%i is not open anymore.\n",
+						D_("%i is not open anymore.\r\n",
 						   current_pipe->pipe[0]);
 						current_pipe->pipe[0] = -1;
 						continue;
@@ -371,7 +371,7 @@ void initng_fd_plugin_poll(int timeout)
 					/* expensive test to make sure the pipe is open, before adding */
 					if (!STILL_OPEN(current_pipe->pipe[1]))
 					{
-						D_("%i is not open anymore.\n",
+						D_("%i is not open anymore.\r\n",
 						   current_pipe->pipe[1]);
 						current_pipe->pipe[1] = -1;
 						continue;
@@ -387,7 +387,7 @@ void initng_fd_plugin_poll(int timeout)
 					/* expensive test to make sure the pipe is open, before adding */
 					if (!STILL_OPEN(current_pipe->pipe[1]))
 					{
-						D_("%i is not open anymore.\n",
+						D_("%i is not open anymore.\r\n",
 						   current_pipe->pipe[1]);
 						current_pipe->pipe[1] = -1;
 						continue;
@@ -409,11 +409,11 @@ void initng_fd_plugin_poll(int timeout)
 	/* check if there are any set */
 	if (added <= 0)
 	{
-		D_("No file descriptors set.\n");
+		D_("No file descriptors set.\r\n");
 		sleep(timeout);
 		return;
 	}
-	D_("%i file descriptors added.\n", added);
+	D_("%i file descriptors added.\r\n", added);
 
 
 	/* make the select */
@@ -423,18 +423,18 @@ void initng_fd_plugin_poll(int timeout)
 	/* error - Truly a interrupt */
 	if (retval < 0)
 	{
-		D_("Select returned %i\n", retval);
+		D_("Select returned %i\r\n", retval);
 		return;
 	}
 
 	/* none was found */
 	if (retval == 0)
 	{
-		D_("There was no data found on any added fd.\n");
+		D_("There was no data found on any added fd.\r\n");
 		return;
 	}
 
-	D_("%d fd's active\n", retval);
+	D_("%d fd's active\r\n", retval);
 
 	/* If a fsck is running select will always return one file handler active, we give it 0.1 seconds to get some more data into the buffer. */
 	sleep(0.1);
@@ -484,7 +484,7 @@ void initng_fd_plugin_poll(int timeout)
 					&& current_pipe->pipe[0] > 2
 					&& FD_ISSET(current_pipe->pipe[0], &readset))
 				{
-					D_("BUFFERED_OUT_PIPE: Will read from %s->start_process on fd #%i\n", currentA->name, current_pipe->pipe[0]);
+					D_("BUFFERED_OUT_PIPE: Will read from %s->start_process on fd #%i\r\n", currentA->name, current_pipe->pipe[0]);
 
 					/* Do the actual read from pipe */
 					initng_fd_process_read_input(currentA, currentP,
@@ -538,7 +538,7 @@ void initng_fd_plugin_poll(int timeout)
 
 	if (retval != 0)
 	{
-		F_("There is a missed pipe or fd that we missed to poll!\n");
+		F_("There is a missed pipe or fd that we missed to poll!\r\n");
 	}
 
 	return;
diff -rupN /tmp/initng-0.6.10.2/src/initng_fork.c ./src/initng_fork.c
--- /tmp/initng-0.6.10.2/src/initng_fork.c	2006-12-28 23:05:21.000000000 +0100
+++ ./src/initng_fork.c	2016-07-13 12:08:47.773159760 +0200
@@ -58,7 +58,7 @@ void initng_fork_aforkhooks(active_db_h
 	data.service = service;
 
 	if (initng_event_send(&event) == FAIL) {
-		F_("Some plugin did fail in after fork launch.\n");
+		F_("Some plugin did fail in after fork launch.\r\n");
 		_exit(1);
 	}
 }
@@ -78,14 +78,14 @@ pid_t initng_fork(active_db_h * service,
 	{
 		if (current_pipe->dir == IN_AND_OUT_PIPE)
 		{
-			/*printf("calling socketpair:\n"); */
+			/*printf("calling socketpair:\r\n"); */
 			/* create an two directional pipe with socketpair */
 			if (socketpair(AF_UNIX, SOCK_STREAM, 0, current_pipe->pipe) < 0)
 			{
-				F_("Fail call socketpair: \"%s\"\n", strerror(errno));
+				F_("Fail call socketpair: \"%s\"\r\n", strerror(errno));
 				return (-1);
 			}
-			/* printf("parent: fd%i fork: fd%i\n", current_pipe->pipe[1], current_pipe->pipe[0]); */
+			/* printf("parent: fd%i fork: fd%i\r\n", current_pipe->pipe[1], current_pipe->pipe[0]); */
 
 		}
 		else
@@ -93,7 +93,7 @@ pid_t initng_fork(active_db_h * service,
 			/* create an one directional pipe with pipe */
 			if (pipe(current_pipe->pipe) != 0)
 			{
-				F_("Failed adding pipe ! %s\n", strerror(errno));
+				F_("Failed adding pipe ! %s\r\n", strerror(errno));
 				return (-1);
 			}
 		}
@@ -107,10 +107,10 @@ pid_t initng_fork(active_db_h * service,
 	{
 		if (try_count > 30)
 		{									/* Already tried 30 times = no more try */
-			F_("GIVING UP TRY TO FORK, FATAL for service.\n");
+			F_("GIVING UP TRY TO FORK, FATAL for service.\r\n");
 			return (pid_fork);
 		}
-		F_("FAILED TO FORK! try no# %i, this can be FATAL!\n", try_count);
+		F_("FAILED TO FORK! try no# %i, this can be FATAL!\r\n", try_count);
 		usleep(++try_count * 2000);			/* Sleep a while before trying again */
 	}
 
@@ -170,14 +170,14 @@ pid_t initng_fork(active_db_h * service,
 					else if (current_pipe->dir == IN_AND_OUT_PIPE)
 					{
 						/* in a unidirectional socket, there is pipe[0] that is used in the child */
-						/*printf("dup2(%i, %i);\n", current_pipe->pipe[0], current_pipe->targets[i]); */
+						/*printf("dup2(%i, %i);\r\n", current_pipe->pipe[0], current_pipe->targets[i]); */
 						dup2(current_pipe->pipe[0], current_pipe->targets[i]);
 					}
 					else
 						continue;
 
 					/* IMPORTANT Tell the os not to close the new target on execve */
-					/*printf("Put non close: fd%i\n", current_pipe->targets[i]); */
+					/*printf("Put non close: fd%i\r\n", current_pipe->targets[i]); */
 					fcntl(current_pipe->targets[i], F_SETFD, 0);
 				}
 			}
@@ -217,7 +217,7 @@ pid_t initng_fork(active_db_h * service,
 			else if (current_pipe->dir == IN_AND_OUT_PIPE)
 			{
 				/* in an unidirectional pipe, pipe[0] is fork, and pipe[1] is parent */
-				/*printf("parent closing: fd%i\n", current_pipe->pipe[0]); */
+				/*printf("parent closing: fd%i\r\n", current_pipe->pipe[0]); */
 				if (current_pipe->pipe[0] > 0)
 					close(current_pipe->pipe[0]);
 				current_pipe->pipe[0] = -1;
diff -rupN /tmp/initng-0.6.10.2/src/initng_global.c ./src/initng_global.c
--- /tmp/initng-0.6.10.2/src/initng_global.c	2007-03-06 05:42:42.000000000 +0100
+++ ./src/initng_global.c	2016-07-13 12:08:47.773159760 +0200
@@ -86,7 +86,7 @@ void initng_global_new(int argc, char *a
 	{
 		g.maxproclen += strlen(env[i]) + 1;
 	}
-	D_("Maximum length for our process name is %d\n", g.maxproclen);
+	D_("Maximum length for our process name is %d\r\n", g.maxproclen);
 
 	/*
 	 * initialize global data storage
@@ -184,7 +184,7 @@ static void initng_global_parse_argv(cha
 
 		if (strcmp(opt, "hot_reload") == 0)
 		{
-			D_(" Will start after a hot reload ...\n");
+			D_(" Will start after a hot reload ...\r\n");
 			g.hot_reload = TRUE;
 		}
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_global.h ./src/initng_global.h
--- /tmp/initng-0.6.10.2/src/initng_global.h	2007-02-02 13:22:29.000000000 +0100
+++ ./src/initng_global.h	2016-07-13 12:08:47.773159760 +0200
@@ -123,6 +123,6 @@ void initng_global_new(int argc, char *a
 void initng_global_free(void);
 
 /* fast macros to set entrys in g */
-#define initng_global_set_sleep(sec) { D_("Sleep set: %i seconds.\n", sec); if(g.sleep_seconds==0||sec<g.sleep_seconds) g.sleep_seconds=sec; }
+#define initng_global_set_sleep(sec) { D_("Sleep set: %i seconds.\r\n", sec); if(g.sleep_seconds==0||sec<g.sleep_seconds) g.sleep_seconds=sec; }
 
 #endif
diff -rupN /tmp/initng-0.6.10.2/src/initng_handler.c ./src/initng_handler.c
--- /tmp/initng-0.6.10.2/src/initng_handler.c	2006-06-08 23:06:00.000000000 +0200
+++ ./src/initng_handler.c	2016-07-13 12:08:47.773159760 +0200
@@ -143,18 +143,18 @@ int initng_handler_start_service(active_
 	assert(service_to_start->name);
 	assert(service_to_start->current_state);
 
-	D_("start_service(%s);\n", service_to_start->name);
+	D_("start_service(%s);\r\n", service_to_start->name);
 
 	if (!service_to_start->type)
 	{
-		F_("Type for service %s not set.\n", service_to_start->name);
+		F_("Type for service %s not set.\r\n", service_to_start->name);
 		return (FALSE);
 	}
 
 	/* check system state, if we can launch. */
 	if (g.sys_state != STATE_STARTING && g.sys_state != STATE_UP)
 	{
-		F_("Can't start service %s, when system status is: %i !\n",
+		F_("Can't start service %s, when system status is: %i !\r\n",
 		   service_to_start->name, g.sys_state);
 		return (FALSE);
 	}
@@ -162,42 +162,42 @@ int initng_handler_start_service(active_
 	/* else, mark the service for restarting and stop it */
 	if (is(&RESTARTING, service_to_start))
 	{
-		D_("Cant manually start a service that is restarting.\n");
+		D_("Cant manually start a service that is restarting.\r\n");
 		return (FALSE);
 	}
 
 	/* it might already be starting */
 	if (IS_STARTING(service_to_start) || IS_WAITING(service_to_start))
 	{
-		D_("service %s is starting already.\n", service_to_start->name);
+		D_("service %s is starting already.\r\n", service_to_start->name);
 		return (TRUE);
 	}
 
 	/* if it failed */
 	if (IS_FAILED(service_to_start))
 	{
-		D_("Service %s failed and must be reset before it can be started again!\n", service_to_start->name);
+		D_("Service %s failed and must be reset before it can be started again!\r\n", service_to_start->name);
 		return (FALSE);
 	}
 
 	/* it might already be up */
 	if (IS_UP(service_to_start))
 	{
-		D_("service %s is already up!\n", service_to_start->name);
+		D_("service %s is already up!\r\n", service_to_start->name);
 		return (TRUE);
 	}
 	
 	/* if new, and not got a stopped state yet, its no idea to bug this process */
 	if (IS_NEW(service_to_start))
 	{
-		D_("service %s is so fresh so we cant start it.\n", service_to_start->name);
+		D_("service %s is so fresh so we cant start it.\r\n", service_to_start->name);
 		return (TRUE);
 	}
 
 	/* it must be down or stopping to start it */
 	if (!(IS_DOWN(service_to_start) || IS_STOPPING(service_to_start)))
 	{
-		W_("Can't set a service with status %s, to start\n",
+		W_("Can't set a service with status %s, to start\r\n",
 		   service_to_start->current_state->state_name);
 		return (FALSE);
 	}
@@ -205,7 +205,7 @@ int initng_handler_start_service(active_
 	/* This will run this functuin (start_service) for all dependecys this service have. */
 	if (initng_depend_start_deps(service_to_start) != TRUE)
 	{
-		D_("Could not start %s, because a required dependency could not be found.\n");
+		D_("Could not start %s, because a required dependency could not be found.\r\n");
 		return (FALSE);
 	}
 
@@ -225,18 +225,18 @@ int initng_handler_stop_service(active_d
 	assert(service_to_stop->name);
 	assert(service_to_stop->current_state);
 
-	D_("stop_service(%s);\n", service_to_stop->name);
+	D_("stop_service(%s);\r\n", service_to_stop->name);
 
 	if (!service_to_stop->type)
 	{
-		F_("Service %s type is missing!\n", service_to_stop->name);
+		F_("Service %s type is missing!\r\n", service_to_stop->name);
 		return (FALSE);
 	}
 
 	/* check so it not failed */
 	if (IS_FAILED(service_to_stop))
 	{
-		D_("Service %s is set filed, and cant be stopped.\n",
+		D_("Service %s is set filed, and cant be stopped.\r\n",
 		   service_to_stop->name);
 		return (TRUE);
 	}
@@ -244,21 +244,21 @@ int initng_handler_stop_service(active_d
 	/* IF service is stopping, do nothing. */
 	if (IS_STOPPING(service_to_stop))
 	{
-		D_("service %s is stopping already!\n", service_to_stop->name);
+		D_("service %s is stopping already!\r\n", service_to_stop->name);
 		return (TRUE);
 	}
 
 	/* check if its currently already down */
 	if (IS_DOWN(service_to_stop))
 	{
-		D_("Service %s is down already.\n", service_to_stop->name);
+		D_("Service %s is down already.\r\n", service_to_stop->name);
 		return (TRUE);
 	}
 
 	/* must be up or starting, to stop */
 	if (!(IS_UP(service_to_stop) || IS_STARTING(service_to_stop)))
 	{
-		W_("Service %s is not up but %s, and cant be stopped.\n",
+		W_("Service %s is not up but %s, and cant be stopped.\r\n",
 		   service_to_stop->name, service_to_stop->current_state->state_name);
 
 		return (FALSE);
@@ -267,7 +267,7 @@ int initng_handler_stop_service(active_d
 	/* if stop_service code is included in type, use it. */
 	if (!service_to_stop->type->stop_service)
 	{
-		W_("Service %s Type %s  has no stopper, will return FALSE!\n",
+		W_("Service %s Type %s  has no stopper, will return FALSE!\r\n",
 		   service_to_stop->name, service_to_stop->type->name);
 		return (FALSE);
 	}
@@ -289,7 +289,7 @@ int initng_handler_restart_service(activ
 
 	if (!IS_UP(service_to_restart))
 	{
-		D_("Can only restart a running service %s. ( now_state : %s )\n",
+		D_("Can only restart a running service %s. ( now_state : %s )\r\n",
 		   service_to_restart->name,
 		   service_to_restart->current_state->state_name);
 		return (FALSE);
@@ -315,7 +315,7 @@ active_db_h *initng_handler_start_new_se
 {
 	active_db_h *to_load = NULL;
 
-	D_(" start_new_service_named(%s);\n", service);
+	D_(" start_new_service_named(%s);\r\n", service);
 
 	assert(service);
 
@@ -324,7 +324,7 @@ active_db_h *initng_handler_start_new_se
 	{
 		if (!IS_DOWN(to_load))
 		{
-			D_("Service %s exits already, and is not stopped!\n",
+			D_("Service %s exits already, and is not stopped!\r\n",
 			   to_load->name);
 			return (to_load);
 		}
@@ -354,7 +354,7 @@ active_db_h *initng_handler_start_new_se
 #endif
 
 	/* the function calling this function will print out an error */
-	D_("Unable to load active for service %s\n", service);
+	D_("Unable to load active for service %s\r\n", service);
 	return (NULL);
 
 }
diff -rupN /tmp/initng-0.6.10.2/src/initng_interrupt.c ./src/initng_interrupt.c
--- /tmp/initng-0.6.10.2/src/initng_interrupt.c	2006-12-28 23:05:21.000000000 +0100
+++ ./src/initng_interrupt.c	2016-07-13 12:08:47.773159760 +0200
@@ -160,7 +160,7 @@ static void handle(active_db_h * service
 	/* If the rough state has changed */
 	if (service->last_rought_state != state->is)
 	{
-		D_("An is change from %i to %i for %s.\n",
+		D_("An is change from %i to %i for %s.\r\n",
 		   service->last_rought_state, state->is, service->name);
 
 		initng_common_state_lock(service);
@@ -209,7 +209,7 @@ static void handle(active_db_h * service
 	if (service->current_state->state_init)
 		(*service->current_state->state_init) (service);
 
-	D_("service %s is now %s.\n", service->name,
+	D_("service %s is now %s.\r\n", service->name,
 	   service->current_state->state_name);
 }
 
@@ -218,7 +218,7 @@ int initng_interrupt(void)
 	active_db_h *service, *safe = NULL;
 	int interrupt = FALSE;
 
-	/*D_(" ** INTERRUPT **\n"); */
+	/*D_(" ** INTERRUPT **\r\n"); */
 
 	/* check what services that changed state */
 	while_active_db_interrupt_safe(service, safe)
diff -rupN /tmp/initng-0.6.10.2/src/initng_kill_handler.c ./src/initng_kill_handler.c
--- /tmp/initng-0.6.10.2/src/initng_kill_handler.c	2006-06-08 18:32:44.000000000 +0200
+++ ./src/initng_kill_handler.c	2016-07-13 12:08:47.773159760 +0200
@@ -57,7 +57,7 @@ void initng_kill_handler_killed_by_pid(p
 	process_h *process = NULL;
 	pipe_h *current_pipe = NULL;
 
-	D_("handle_killed_by_pid(%i);\n", kpid);
+	D_("handle_killed_by_pid(%i);\r\n", kpid);
 
 	/* don't do anything on this pid */
 	if (kpid <= 1)
@@ -66,21 +66,21 @@ void initng_kill_handler_killed_by_pid(p
 	/* Look in process database for a match */
 	if (!(service = initng_active_db_find_by_pid(kpid)))
 	{
-		D_("handle_killed_by_pid(%i): No match in active_db!\n", kpid);
+		D_("handle_killed_by_pid(%i): No match in active_db!\r\n", kpid);
 		return;
 	}
 
-	D_("handle_killed_by_pid(%i): found service \"%s\"...\n", kpid,
+	D_("handle_killed_by_pid(%i): found service \"%s\"...\r\n", kpid,
 	   service->name);
 
 	/* Get the process pointer from the service */
 	if (!(process = initng_process_db_get_by_pid(kpid, service)))
 	{
-		W_("Could not fetch process, even when initng_active_db_find_by_pid() saw it here!\n");
+		W_("Could not fetch process, even when initng_active_db_find_by_pid() saw it here!\r\n");
 		return;
 	}
 
-	D_("(%i), found process type: %s\n", kpid, process->pt->name);
+	D_("(%i), found process type: %s\r\n", kpid, process->pt->name);
 
 
 	/* set r_code */
@@ -114,7 +114,7 @@ void initng_kill_handler_killed_by_pid(p
 	/* Check if a plugin wants to override handle_killed behavior */
 	if (initng_plugin_callers_handle_killed(service, process))
 	{
-		D_("Plugin did handle this kill.\n");
+		D_("Plugin did handle this kill.\r\n");
 		return;
 	}
 
@@ -122,12 +122,12 @@ void initng_kill_handler_killed_by_pid(p
 	/* launch a kill_handler if any */
 	if (process->pt && process->pt->kill_handler)
 	{
-		D_("Launching process->pt->kill_handler\n");
+		D_("Launching process->pt->kill_handler\r\n");
 		(*process->pt->kill_handler) (service, process);
 	}
 	else
 	{
-		D_("service %s pid %i p_type %s died with unknown handler, freeing process!\n", service->name, kpid, process->pt->name);
+		D_("service %s pid %i p_type %s died with unknown handler, freeing process!\r\n", service->name, kpid, process->pt->name);
 		initng_process_db_free(process);
 	}
 }
diff -rupN /tmp/initng-0.6.10.2/src/initng_load_module.c ./src/initng_load_module.c
--- /tmp/initng-0.6.10.2/src/initng_load_module.c	2006-06-08 18:32:44.000000000 +0200
+++ ./src/initng_load_module.c	2016-07-13 12:08:47.777159760 +0200
@@ -130,7 +130,7 @@ static int initng_load_module_needs_are_
 		{
 			if (!initng_load_module_is_loaded(*needs))
 			{
-				F_("Plugin \"%s\" (%s) requires plugin \"%s\" to work, unlodading %s.\n", m->module_name, m->module_filename, *needs, m->module_name);
+				F_("Plugin \"%s\" (%s) requires plugin \"%s\" to work, unlodading %s.\r\n", m->module_name, m->module_filename, *needs, m->module_name);
 				retval = FALSE;
 			}
 			needs++;
@@ -155,7 +155,7 @@ m_h *initng_load_module_open(const char
 	/* allocate, the new module info struct */
 	if (!(m = (m_h *) i_calloc(1, sizeof(m_h))))
 	{
-		F_("Unable to allocate memory, for new module description.\n");
+		F_("Unable to allocate memory, for new module description.\r\n");
 		return (NULL);
 	}
 
@@ -165,7 +165,7 @@ m_h *initng_load_module_open(const char
 	/* check that file exists */
 	if (stat(module_path, &st) != 0)
 	{
-		F_("Module \"%s\" not found\n", module_path);
+		F_("Module \"%s\" not found\r\n", module_path);
 		free(m);
 		return (NULL);
 	}
@@ -179,12 +179,12 @@ m_h *initng_load_module_open(const char
 	 * */
 	if (m->module_dlhandle == NULL)
 	{
-		F_("Error opening module %s; %s\n", module_name, dlerror());
+		F_("Error opening module %s; %s\r\n", module_name, dlerror());
 		free(m);
 		return (NULL);
 	}
 
-	D_("Success opening module \"%s\"\n", module_name);
+	D_("Success opening module \"%s\"\r\n", module_name);
 
 	/* match api_version */
 	{
@@ -193,7 +193,7 @@ m_h *initng_load_module_open(const char
 		plugin_api = dlsym(m->module_dlhandle, "plugin_api_version");
 		if (!plugin_api)
 		{
-			F_("Symbol \"plugin_api_version\" not found, the macro INITNG_PLUGIN_MACRO is not added to plugin %s :: %s\n", module_path, dlerror());
+			F_("Symbol \"plugin_api_version\" not found, the macro INITNG_PLUGIN_MACRO is not added to plugin %s :: %s\r\n", module_path, dlerror());
 			initng_load_module_close_and_free(m);
 			return (NULL);
 		}
@@ -201,11 +201,11 @@ m_h *initng_load_module_open(const char
 		/* match the API version */
 		if (*plugin_api != API_VERSION)
 		{
-			F_("Plugin %s has wrong api version, this meens that its compiled with another version of initng core.\n", module_path);
+			F_("Plugin %s has wrong api version, this meens that its compiled with another version of initng core.\r\n", module_path);
 			initng_load_module_close_and_free(m);
 			return (NULL);
 		}
-		D_("Plugin %s ver match: %i\n", module_path, *plugin_api);
+		D_("Plugin %s ver match: %i\r\n", module_path, *plugin_api);
 	}
 
 	/* get initialization function */
@@ -214,7 +214,7 @@ m_h *initng_load_module_open(const char
 	if (m->module_init == NULL)
 	{
 		errmsg = dlerror();
-		F_("Error reading module_init(); %s\n", errmsg);
+		F_("Error reading module_init(); %s\r\n", errmsg);
 		initng_load_module_close_and_free(m);
 		return (NULL);
 	}
@@ -225,7 +225,7 @@ m_h *initng_load_module_open(const char
 	if (m->module_unload == NULL)
 	{
 		errmsg = dlerror();
-		F_("Error reading module_unload(); %s\n", errmsg);
+		F_("Error reading module_unload(); %s\r\n", errmsg);
 		initng_load_module_close_and_free(m);
 		return (NULL);
 	}
@@ -253,7 +253,7 @@ void initng_load_module_close_and_free(m
 	/* free module name */
 	if (m->module_name)
 	{
-		/*printf("Free: %s\n", m->module_name); */
+		/*printf("Free: %s\r\n", m->module_name); */
 		free(m->module_name);
 		m->module_name = NULL;
 	}
@@ -318,7 +318,7 @@ m_h *initng_load_module(const char *modu
 	/* look for duplicates */
 	if (initng_load_module_is_loaded(module_name))
 	{
-		F_("Module \"%s\" already loaded, won't load it twice\n",
+		F_("Module \"%s\" already loaded, won't load it twice\r\n",
 		   module_name);
 
 		/* free module_name if duped */
@@ -372,7 +372,7 @@ m_h *initng_load_module(const char *modu
 				/* make sure this succeded */
 				if (!new_m)
 				{
-					F_("Unable to load module \"%s\"\n", module);
+					F_("Unable to load module \"%s\"\r\n", module);
 					/* free, these are duped in initng_load_module_open(a,b) */
 					if (module_name != module)
 						free(module_name);
@@ -390,7 +390,7 @@ m_h *initng_load_module(const char *modu
 	/* see if we have our dependencies met */
 	if (!initng_load_module_needs_are_loaded(new_m))
 	{
-		F_("Not loading module \"%s\", missing needed module(s)\n",
+		F_("Not loading module \"%s\", missing needed module(s)\r\n",
 		   module_path);
 		initng_load_module_close_and_free(new_m);
 		return (NULL);
@@ -399,11 +399,11 @@ m_h *initng_load_module(const char *modu
 	/* run module_init */
 	new_m->initziated = (*new_m->module_init) (API_VERSION);
 
-	D_("for module \"%s\" return: %i\n", module_path, new_m->initziated);
+	D_("for module \"%s\" return: %i\r\n", module_path, new_m->initziated);
 
 	if (new_m->initziated < 1)
 	{
-		F_("Module %s did not load correctly (module_init() returned %i)\n",
+		F_("Module %s did not load correctly (module_init() returned %i)\r\n",
 		   module_path, new_m->initziated);
 		/* XXX: used to be here, but why? */
 		/* sleep(1); */
@@ -443,7 +443,7 @@ static int initng_load_module_is_needed(
 		{
 			if (strcmp(module_name, *needs) == 0)
 			{
-				F_("Module \"%s\" needed by \"%s\"\n", module_name,
+				F_("Module \"%s\" needed by \"%s\"\r\n", module_name,
 				   m->module_name);
 				retval = TRUE;
 			}
@@ -474,14 +474,14 @@ int initng_unload_module_named(const cha
 
 	assert(name != NULL);
 
-	D_("initng_load_module_named(%s);\n", name);
+	D_("initng_load_module_named(%s);\r\n", name);
 
 
 
 
 	if (!initng_load_module_is_loaded(name))
 	{
-		F_("Not unloading module \"%s\", it is not loaded\n", name);
+		F_("Not unloading module \"%s\", it is not loaded\r\n", name);
 		return FALSE;
 	}
 
@@ -515,7 +515,7 @@ int initng_load_module_load_all(const ch
 	/* open plugin dir */
 	if ((files = scandir(plugin_path, &filelist, 0, alphasort)) < 1)
 	{
-		F_("Unable to open plugin directory %s.\n", plugin_path);
+		F_("Unable to open plugin directory %s.\r\n", plugin_path);
 		return (FALSE);
 	}
 
@@ -534,7 +534,7 @@ int initng_load_module_load_all(const ch
 			/* search the plugin name, for blacklisted */
 			if (initng_common_service_blacklisted(module_name))
 			{
-				F_("Plugin %s blacklisted.\n", module_name);
+				F_("Plugin %s blacklisted.\r\n", module_name);
 				free(module_name);
 				module_name = NULL;
 				free(filelist[i]);
@@ -570,7 +570,7 @@ int initng_load_module_load_all(const ch
 #ifdef DEBUG
 			if (filelist[i]->d_name[0] != '.')
 			{
-				D_("Won't load module \"%s\", doesn't match \"*.so\" pattern.\n", filelist[i]->d_name);
+				D_("Won't load module \"%s\", doesn't match \"*.so\" pattern.\r\n", filelist[i]->d_name);
 			}
 #endif
 		}
@@ -595,14 +595,14 @@ int initng_load_module_load_all(const ch
 
 		/* if we did find find a module with needs loaded, try to load it */
 		current->initziated = (*current->module_init) (API_VERSION);
-		D_("for module \"%s\" return: %i\n", current->module_name,
+		D_("for module \"%s\" return: %i\r\n", current->module_name,
 		   current->initziated);
 
 		/* check if it was initialized correctly */
 		if (current->initziated != TRUE)
 		{
 			if (g.i_am == I_AM_INIT || g.i_am == I_AM_FAKE_INIT)
-				F_("Module %s did not load correctly (module_init() returned %i)\n", current->module_name, current->initziated);
+				F_("Module %s did not load correctly (module_init() returned %i)\r\n", current->module_name, current->initziated);
 			initng_load_module_close_and_free(current);
 		}
 
@@ -631,7 +631,7 @@ void initng_unload_module_unload_all(voi
 	/* reset the list, to make sure its empty */
 	INIT_LIST_HEAD(&g.module_db.list);
 
-	D_("initng_load_module_close_all()\n");
+	D_("initng_load_module_close_all()\r\n");
 }
 
 /* 
@@ -651,12 +651,12 @@ void initng_unload_module_unload_marked(
 		{
 			if (initng_load_module_is_needed(m->module_name))
 			{
-				F_("Not unloading module \"%s\", it is needed\n",
+				F_("Not unloading module \"%s\", it is needed\r\n",
 				   m->module_name);
 				m->marked_for_removal = FALSE;
 				continue;
 			}
-			D_("now unloading marked module %s.\n", m->module_name);
+			D_("now unloading marked module %s.\r\n", m->module_name);
 
 			initng_unload_module(m);
 		}
diff -rupN /tmp/initng-0.6.10.2/src/initng_main.c ./src/initng_main.c
--- /tmp/initng-0.6.10.2/src/initng_main.c	2007-03-07 01:20:20.000000000 +0100
+++ ./src/initng_main.c	2016-07-13 12:08:47.777159760 +0200
@@ -96,14 +96,14 @@ void initng_main_when_out(void)
 		if (IS_FAILED(current))
 		{
 			failing++;
-			printf("\n [%i] service \"%s\" marked \"%s\"\n", failing,
+			printf("\r\n [%i] service \"%s\" marked \"%s\"\r\n", failing,
 				   current->name, current->current_state->state_name);
 		}
 	}
 	if (failing > 0)
 	{
-		printf("\n\n All %i services listed above, are marked with a failure.\n", failing);
-		printf(" Will sleep for 15 seconds before reboot/halt so you can see them.\n\n");
+		printf("\r\n\r\n All %i services listed above, are marked with a failure.\r\n", failing);
+		printf(" Will sleep for 15 seconds before reboot/halt so you can see them.\r\n\r\n");
 		sleep(15);
 	}
 
@@ -111,7 +111,7 @@ void initng_main_when_out(void)
 
 	if (g.i_am == I_AM_INIT && getpid() != 1)
 	{
-		F_("I AM NOT INIT, THIS CANT BE HAPPENING!\n");
+		F_("I AM NOT INIT, THIS CANT BE HAPPENING!\r\n");
 		sleep(3);
 		return;
 	}
@@ -123,19 +123,19 @@ void initng_main_when_out(void)
 	switch (g.when_out)
 	{
 		case THEN_QUIT:
-			P_(" ** Now Quiting **\n");
+			P_(" ** Now Quiting **\r\n");
 			initng_main_exit(0);
 			break;
 		case THEN_SULOGIN:
-			P_(" ** Now SuLogin\n");
+			P_(" ** Now SuLogin\r\n");
 			/* break here leads to su_login below */
 			break;
 		case THEN_RESTART:
-			P_(" ** Now restarting\n");
+			P_(" ** Now restarting\r\n");
 			initng_main_restart();
 			break;
 		case THEN_NEW_INIT:
-			P_(" ** Launching new init\n");
+			P_(" ** Launching new init\r\n");
 			initng_main_new_init();
 			break;
 		case THEN_REBOOT:
@@ -170,7 +170,7 @@ static void initng_hard(h_then t)
 			initng_main_set_sys_state(STATE_POWEROFF);
 			break;
 		default:
-			F_("initng_hard can only handle STATE_REBOOT, STATE_POWEROFF, or STATE_HALT for now.\n");
+			F_("initng_hard can only handle STATE_REBOOT, STATE_POWEROFF, or STATE_HALT for now.\r\n");
 			return;
 	}
 
@@ -201,7 +201,7 @@ static void initng_hard(h_then t)
 
 	if (errno == EBUSY)
 	{
-		F_("Failed to remount / ro, EBUSY\n");
+		F_("Failed to remount / ro, EBUSY\r\n");
 	}
 
 	/* check so that / is mounted read only, by trying to open a file */
@@ -209,7 +209,7 @@ static void initng_hard(h_then t)
 	{
 		fclose(test);
 		unlink("/initng_write_testfile");
-		F_("/ IS NOT REMOUNTED READ-ONLY, WONT REBOOT/HALT BECAUSE THE FILE SYSTEM CAN BREAK!\n");
+		F_("/ IS NOT REMOUNTED READ-ONLY, WONT REBOOT/HALT BECAUSE THE FILE SYSTEM CAN BREAK!\r\n");
 		return;
 	}
 
@@ -271,7 +271,7 @@ void initng_main_su_login(void)
 		if (get_ordered_context_list("root", 0, &contextlist) > 0)
 		{
 			if (setexeccon(contextlist[0]) != 0)
-				fprintf(stderr, "setexeccon failed\n");
+				fprintf(stderr, "setexeccon failed\r\n");
 			freeconary(contextlist);
 		}
 	}
@@ -279,11 +279,11 @@ void initng_main_su_login(void)
 	/* sulogin nicely 2 times */
 	if (local_sulogin_count <= TRY_TIMES)
 	{
-		printf("This is a sulogin offer,\n"
-			   "you will be able to login for %i times (now %i),\n"
-			   "and on return initng will try continue where it was,\n"
-			   "if the times go out, initng will launch\n"
-			   "/sbin/initng-segfault on next su_login request.\n\n",
+		printf("This is a sulogin offer,\r\n"
+			   "you will be able to login for %i times (now %i),\r\n"
+			   "and on return initng will try continue where it was,\r\n"
+			   "if the times go out, initng will launch\r\n"
+			   "/sbin/initng-segfault on next su_login request.\r\n\r\n",
 			   TRY_TIMES, local_sulogin_count);
 		sulogin_pid = fork();
 
@@ -303,7 +303,7 @@ void initng_main_su_login(void)
 			execve(sulogin_argv[0], (char **) sulogin_argv,
 				   (char **) sulogin_env);
 
-			printf("Unable to execute /sbin/sulogin!\n");
+			printf("Unable to execute /sbin/sulogin!\r\n");
 			_exit(1);
 		}
 
@@ -348,7 +348,7 @@ void initng_main_start_extra_services(vo
 		if (initng_handler_start_new_service_named(g.Argv[i] + 1))
 			a_count++;
 		else
-			F_(" Requested service \"%s\", could not be executed!\n",
+			F_(" Requested service \"%s\", could not be executed!\r\n",
 			   g.Argv[i]);
 	}
 }
@@ -365,10 +365,10 @@ void initng_main_new_init(void)
 	}
 	if (!g.new_init || !g.new_init[0])
 	{
-		F_(" g.new_init is not set!\n");
+		F_(" g.new_init is not set!\r\n");
 		return;
 	}
-	P_("\n\n\n          Launching new init (%s)\n\n", g.new_init[0]);
+	P_("\r\n\r\n\r\n          Launching new init (%s)\r\n\r\n", g.new_init[0]);
 	execve(g.new_init[0], g.new_init, environ);
 }
 
@@ -389,7 +389,7 @@ void initng_main_restart(void)
 	strcpy(argv[0], "runlevel=");
 	strcat(argv[0], g.runlevel);
 	argv[1] = NULL;
-	P_("\n\n\n          R E S T A R T I N G,  (Really hot reboot)\n\n");
+	P_("\r\n\r\n\r\n          R E S T A R T I N G,  (Really hot reboot)\r\n\r\n");
 	execve("/sbin/initng", argv, environ);
 }
 
@@ -400,7 +400,7 @@ void initng_main_set_sys_state(h_sys_sta
 	if (state == g.sys_state)
 		return;
 
-	D_("set_sys_state(): %% Setting state to: %i %% \n", state);
+	D_("set_sys_state(): %% Setting state to: %i %% \r\n", state);
 	g.sys_state = state;
 
 	/*
@@ -415,7 +415,7 @@ void initng_main_set_sys_state(h_sys_sta
 
 void initng_main_exit(int i)
 {
-	D_("exit_initng();\n");
+	D_("exit_initng();\r\n");
 
 	/* First set the system state to exit */
 	initng_main_set_sys_state(STATE_EXIT);
@@ -467,7 +467,7 @@ void initng_main_segfault(void)
 				(int) time(NULL));
 		if (WriteCoreDump(buf) == 0)
 		{
-			printf("Dumped core to %s\n", buf);
+			printf("Dumped core to %s\r\n", buf);
 		}
 	}
 #else
@@ -510,16 +510,16 @@ void initng_main_segfault(void)
 
 #ifdef 	WCOREDUMP
 			if (WIFSIGNALED(ret) && WCOREDUMP(ret))
-				printf("Core dumped!\n");
+				printf("Core dumped!\r\n");
 			else
-				printf("Failed to dump core\n");
+				printf("Failed to dump core\r\n");
 #else
 			if (!WIFSIGNALED(ret))
-				printf("Failed to dump core\n");
+				printf("Failed to dump core\r\n");
 #endif
 		}
 		else
-			printf("Failed to fork and dump core\n");
+			printf("Failed to fork and dump core\r\n");
 	}
 #endif /* false */
 #endif /* !HAVE_COREDUMPER */
@@ -583,7 +583,7 @@ void initng_main_segfault(void)
 			{
 				/* else tell the user, it dont succeded to start a replacement */
 				fprintf(stderr,
-						"/sbin/initng-segfault did not exist, will die!\n");
+						"/sbin/initng-segfault did not exist, will die!\r\n");
 			}
 		}
 
@@ -593,7 +593,7 @@ void initng_main_segfault(void)
 	while (1)
 	{
 		sleep(10);
-		fprintf(stderr, "INITNG_SEGFAULT\n");
+		fprintf(stderr, "INITNG_SEGFAULT\r\n");
 	}
 }
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_open_read_close.c ./src/initng_open_read_close.c
--- /tmp/initng-0.6.10.2/src/initng_open_read_close.c	2006-05-18 12:30:22.000000000 +0200
+++ ./src/initng_open_read_close.c	2016-07-13 12:08:47.777159760 +0200
@@ -53,7 +53,7 @@ int open_read_close(const char *filename
 
 	if (conf_file == -1)
 	{
-		D_("open_read_close(%s) error %d opening file; %s\n",
+		D_("open_read_close(%s) error %d opening file; %s\r\n",
 		   filename, errno, strerror(errno));
 
 		bailout(&conf_file, buffer);
@@ -62,7 +62,7 @@ int open_read_close(const char *filename
 
 	if (fstat(conf_file, &stat_buf) == -1)
 	{
-		D_("open_read_close(%s) error %s getting file size; %s\n",
+		D_("open_read_close(%s) error %s getting file size; %s\r\n",
 		   filename, errno, strerror(errno));
 
 		bailout(&conf_file, buffer);
@@ -79,7 +79,7 @@ int open_read_close(const char *filename
 
 	if (res == -1)
 	{
-		F_("open_read_close(%s): Error %d reading file; %s\n",
+		F_("open_read_close(%s): Error %d reading file; %s\r\n",
 		   filename, errno, strerror(errno));
 
 		bailout(&conf_file, buffer);
@@ -88,7 +88,7 @@ int open_read_close(const char *filename
 
 	if (res != stat_buf.st_size)
 	{
-		F_("open_read_close(%s): read %d instead of %d bytes\n",
+		F_("open_read_close(%s): read %d instead of %d bytes\r\n",
 		   filename, (int) res, (int) stat_buf.st_size);
 
 		bailout(&conf_file, buffer);
@@ -99,7 +99,7 @@ int open_read_close(const char *filename
 
 	if (close(conf_file) < 0)
 	{
-		F_("open_read_close(%s): Error %d closing file; %s\n",
+		F_("open_read_close(%s): Error %d closing file; %s\r\n",
 		   filename, errno, strerror(errno));
 
 		bailout(&conf_file, buffer);
diff -rupN /tmp/initng-0.6.10.2/src/initng_process_db.c ./src/initng_process_db.c
--- /tmp/initng-0.6.10.2/src/initng_process_db.c	2006-06-07 11:16:04.000000000 +0200
+++ ./src/initng_process_db.c	2016-07-13 12:08:47.777159760 +0200
@@ -64,7 +64,7 @@ process_h *initng_process_db_new(ptype_h
 	new_p = (process_h *) i_calloc(1, sizeof(process_h));	/* Allocate memory for a new process */
 	if (!new_p)
 	{
-		F_("Unable to allocate process!\n");
+		F_("Unable to allocate process!\r\n");
 		return (NULL);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_service_cache.c ./src/initng_service_cache.c
--- /tmp/initng-0.6.10.2/src/initng_service_cache.c	2006-05-18 15:49:04.000000000 +0200
+++ ./src/initng_service_cache.c	2016-07-13 12:08:47.777159760 +0200
@@ -56,7 +56,7 @@ int initng_service_cache_register(servic
 	found = initng_service_cache_find_by_exact_name(s->name);
 	if (found)
 	{
-		W_("Service %s already in db, please look there before parsing\nTo flush your file cache do ngc -R\n", s->name);
+		W_("Service %s already in db, please look there before parsing\r\nTo flush your file cache do ngc -R\r\n", s->name);
 		return (FALSE);
 	}
 
@@ -79,13 +79,13 @@ service_cache_h *initng_service_cache_co
 
 	assert(s);
 	assert(name);
-	D_("copy_service(%s);\n", s->name);
+	D_("copy_service(%s);\r\n", s->name);
 
 	/* allocate new service */
 	new_serv = (service_cache_h *) i_calloc(1, sizeof(service_cache_h));
 	if (!new_serv)
 	{
-		F_("Could not allocate space, for new copy of service!\n");
+		F_("Could not allocate space, for new copy of service!\r\n");
 		return (NULL);
 	}
 
@@ -117,10 +117,10 @@ service_cache_h *initng_service_cache_ne
 	service_cache_h *new_s = NULL;
 
 	assert(name);
-	D_("default_service();\n");
+	D_("default_service();\r\n");
 	if (!(new_s = (service_cache_h *) i_calloc(1, sizeof(service_cache_h))))
 	{
-		F_("OUT OF MEMORY default_service().\n");
+		F_("OUT OF MEMORY default_service().\r\n");
 		return (NULL);
 	}
 
@@ -147,7 +147,7 @@ service_cache_h *initng_service_cache_fi
 {
 	service_cache_h *current = NULL;
 
-	D_("(%s);\n", service);
+	D_("(%s);\r\n", service);
 
 	assert(service);
 
@@ -174,7 +174,7 @@ service_cache_h *initng_service_cache_fi
 	assert(service);
 	service_cache_h *current = NULL;
 
-	D_("(%s);\n", service);
+	D_("(%s);\r\n", service);
 
 	/* first give the exact find a shot */
 	if ((current = initng_service_cache_find_by_exact_name(service)))
@@ -198,7 +198,7 @@ service_cache_h *initng_service_cache_fi
 		 */
 		if (service_match(service, current->name))
 		{
-			D_("(%s, %s) MATCH\n", service, current->name);
+			D_("(%s, %s) MATCH\r\n", service, current->name);
 			return (current);
 		}
 
@@ -266,7 +266,7 @@ static void initng_service_cache_clear_f
 int initng_service_cache_free(service_cache_h * to_free)
 {
 	assert(to_free);
-	D_("service_db_free(%s);\n", to_free->name);
+	D_("service_db_free(%s);\r\n", to_free->name);
 
 	/* obious this one cant be free */
 	if (to_free == &NO_CACHE)
diff -rupN /tmp/initng-0.6.10.2/src/initng_service_data_types.c ./src/initng_service_data_types.c
--- /tmp/initng-0.6.10.2/src/initng_service_data_types.c	2006-06-08 18:33:11.000000000 +0200
+++ ./src/initng_service_data_types.c	2016-07-13 12:08:47.777159760 +0200
@@ -58,16 +58,16 @@ void initng_service_data_type_register(s
 			if (current == ent)
 			{
 				if (ent->opt_name)
-					F_("Option %s, already added!\n", ent->opt_name);
+					F_("Option %s, already added!\r\n", ent->opt_name);
 				else
-					F_("Option, already added!\n");
+					F_("Option, already added!\r\n");
 
 				return;
 			}
 			if (current->opt_name && ent->opt_name
 				&& strcmp(current->opt_name, ent->opt_name) == 0)
 			{
-				F_("option %s, name taken.\n");
+				F_("option %s, name taken.\r\n");
 				return;
 			}
 		}
@@ -78,7 +78,7 @@ void initng_service_data_type_register(s
 	list_add(&ent->list, &g.option_db.list);
 #ifdef DEBUG
 	if (ent->opt_name)
-		D_(" \"%s\" added to option_db!\n", ent->opt_name);
+		D_(" \"%s\" added to option_db!\r\n", ent->opt_name);
 #endif
 }
 
@@ -144,7 +144,7 @@ s_entry *initng_service_data_type_find(c
 
 	S_;
 	assert(string);
-	D_("looking for %s.\n", string);
+	D_("looking for %s.\r\n", string);
 	while_service_data_types(current)
 	{
 		if (current->opt_name && strcmp(current->opt_name, string) == 0)
diff -rupN /tmp/initng-0.6.10.2/src/initng_signal.c ./src/initng_signal.c
--- /tmp/initng-0.6.10.2/src/initng_signal.c	2006-05-18 12:30:22.000000000 +0200
+++ ./src/initng_signal.c	2016-07-13 12:08:47.777159760 +0200
@@ -71,20 +71,20 @@ void initng_signal_handle_sigchild(void)
 		/* Error */
 		if (killed < 0)
 		{
-			W_("Error, waitpid returned pid %d (%s)\n", killed,
+			W_("Error, waitpid returned pid %d (%s)\r\n", killed,
 			   strerror(errno));
 			return;
 		}
 
-		D_("sigchild(): PID %i KILLED WITH:\n"
-		   "WEXITSTATUS %i\n"
-		   "WIFEXITED %i\n"
-		   "WIFSIGNALED %i\n"
-		   "WTERMSIG %i\n"
-		   "WCOREDUMP %i\n"
-		   "WIFSTOPPED %i\n"
-		   "WSTOPSIG %i\n"
-		   "\n",
+		D_("sigchild(): PID %i KILLED WITH:\r\n"
+		   "WEXITSTATUS %i\r\n"
+		   "WIFEXITED %i\r\n"
+		   "WIFSIGNALED %i\r\n"
+		   "WTERMSIG %i\r\n"
+		   "WCOREDUMP %i\r\n"
+		   "WIFSTOPPED %i\r\n"
+		   "WSTOPSIG %i\r\n"
+		   "\r\n",
 		   killed,
 		   WEXITSTATUS(status),
 		   WIFEXITED(status),
@@ -94,7 +94,7 @@ void initng_signal_handle_sigchild(void)
 
 		/*if(WTERMSIG(status))
 		   {
-		   printf("Service segfaulted!\n");
+		   printf("Service segfaulted!\r\n");
 		   } */
 
 		/*
@@ -109,7 +109,7 @@ void initng_signal_handle_sigchild(void)
 static void sigsegv(int sig)
 {
 	(void) sig;
-	printf("SEGFAULTED!\n");
+	printf("SEGFAULTED!\r\n");
 	initng_main_segfault();
 }
 
@@ -120,7 +120,7 @@ static void set_signal(int sig)
 {
 	int i;
 
-	/*printf("signal: %i\n", sig); */
+	/*printf("signal: %i\r\n", sig); */
 	for (i = 0; i < SIGNAL_STACK; i++)
 	{
 		/* check if this signaltype is already on the list of signals */
@@ -130,12 +130,12 @@ static void set_signal(int sig)
 		/* else add this on a free spot */
 		if (signals_got[i] == -1)
 		{
-			/*printf("signals_got[%i]=%i\n", i, sig); */
+			/*printf("signals_got[%i]=%i\r\n", i, sig); */
 			signals_got[i] = sig;
 			return;
 		}
 	}
-	F_("SIGNAL STACK FULL!\n");
+	F_("SIGNAL STACK FULL!\r\n");
 }
 
 /*
@@ -145,7 +145,7 @@ void initng_signal_enable(void)
 {
 	int i;
 
-	D_("enable_signals();\n");
+	D_("enable_signals();\r\n");
 
 	/* clear interrupt cache */
 	/* TODO FIGUREITOUT - Catch signals */
@@ -198,7 +198,7 @@ void initng_signal_enable(void)
  */
 void initng_signal_disable(void)
 {
-	D_("disable_signals();\n");
+	D_("disable_signals();\r\n");
 
 	/* create a signal set */
 	sigemptyset(&sa.sa_mask);
diff -rupN /tmp/initng-0.6.10.2/src/initng_string_tools.c ./src/initng_string_tools.c
--- /tmp/initng-0.6.10.2/src/initng_string_tools.c	2007-03-04 05:59:09.000000000 +0100
+++ ./src/initng_string_tools.c	2016-07-13 12:08:47.777159760 +0200
@@ -304,12 +304,12 @@ int service_match(const char *string, co
 
 	assert(string);
 	assert(pattern);
-	D_("matching string: \"%s\", to pattern: \"%s\"\n", string, pattern);
+	D_("matching string: \"%s\", to pattern: \"%s\"\r\n", string, pattern);
 
 	/* do pattern matching only if service name does not contain wildcards */
 	if (strchr(string, '*') || strchr(string, '?'))
 	{
-		F_("The string \"%s\" contains wildcards line '*' and '?'!\n",
+		F_("The string \"%s\" contains wildcards line '*' and '?'!\r\n",
 		   string);
 		return (FALSE);
 	}
@@ -333,7 +333,7 @@ int service_match(const char *string, co
 	while ((tmp = strchr(++tmp, '/')))
 		patternslash++;
 
-	/*D_("service_match(%s, %s): %i, %i\n", string, pattern, stringslash, patternslash); */
+	/*D_("service_match(%s, %s): %i, %i\r\n", string, pattern, stringslash, patternslash); */
 
 	/* use fnmatch that shud serve us well as these matches looks like filename matching */
 	return (stringslash == patternslash);
@@ -397,7 +397,7 @@ int mprintf(char **p, const char *format
 	int len = 0;				/* will contain lent for current string */
 	int add_len = 0;			/* This mutch more strings are we gonna alloc for */
 
-	/*printf("\n\nmprintf(%s);\n", format); */
+	/*printf("\r\n\r\nmprintf(%s);\r\n", format); */
 
 	/* count old chars */
 	if (*p)
@@ -416,7 +416,7 @@ int mprintf(char **p, const char *format
 	 * have room.
 	 * Also have a check that it succeds.
 	 */
-	/*printf("Changing size to %i\n", len + add_len); */
+	/*printf("Changing size to %i\r\n", len + add_len); */
 	if (!(*p = realloc(*p, ((len + add_len) * sizeof(char)))))
 		return (-1);
 
@@ -432,16 +432,16 @@ int mprintf(char **p, const char *format
 		/* check if that was enouth */
 		if (done > -1 && done < add_len)
 		{
-			/*printf("GOOD: done : %i, len: %i\n", done, add_len); */
+			/*printf("GOOD: done : %i, len: %i\r\n", done, add_len); */
 
 			/* Ok return happily */
 			return (done);
 		}
-		/*printf("BAD: done : %i, len: %i\n", done, add_len); */
+		/*printf("BAD: done : %i, len: %i\r\n", done, add_len); */
 
 		/* try increase it a bit. */
 		add_len = (done < 0 ? add_len * 2 : done + 1);
-		/*printf("Changing size to %i\n", len + add_len); */
+		/*printf("Changing size to %i\r\n", len + add_len); */
 		if (!(*p = realloc(*p, ((len + add_len) * sizeof(char)))))
 			return (-1);
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_struct_data.c ./src/initng_struct_data.c
--- /tmp/initng-0.6.10.2/src/initng_struct_data.c	2006-06-01 12:53:55.000000000 +0200
+++ ./src/initng_struct_data.c	2016-07-13 12:08:47.777159760 +0200
@@ -65,7 +65,7 @@ s_data *d_get_next_var(s_entry * type, c
 	/* Check that vn is sent, when needed */
 	if (!vn && type && type->opt_type >= 50)
 	{
-		F_("The vn variable is missing for a type %i (%s): %s!\n",
+		F_("The vn variable is missing for a type %i (%s): %s!\r\n",
 		   type->opt_type, type->opt_name);
 		return (NULL);
 	}
@@ -73,7 +73,7 @@ s_data *d_get_next_var(s_entry * type, c
 	/* check that vn is not set, when not needed */
 	if (vn && type && type->opt_type < 50)
 	{
-		F_("The vn %s is set, but not needed for type %i, %s\n", vn,
+		F_("The vn %s is set, but not needed for type %i, %s\r\n", vn,
 		   type->opt_type, type->opt_name);
 		return (NULL);
 	}
@@ -186,7 +186,7 @@ void d_set_string_var(s_entry * type, ch
 
 	if (!type)
 	{
-		F_("Type can't be zero!\n");
+		F_("Type can't be zero!\r\n");
 		return;
 	}
 
@@ -194,14 +194,14 @@ void d_set_string_var(s_entry * type, ch
 
 	if (!vn && type->opt_type >= 50)
 	{
-		F_("The vn variable is missing for a type %i %s, trying to set \"%s\"!\n", type->opt_type, type->opt_name, string);
+		F_("The vn variable is missing for a type %i %s, trying to set \"%s\"!\r\n", type->opt_type, type->opt_name, string);
 		return;
 	}
 
 
 	if (!IT(STRING))
 	{
-		F_(" \"%s\" is not an STRING type, sleeping 1 sec ..\n",
+		F_(" \"%s\" is not an STRING type, sleeping 1 sec ..\r\n",
 		   type->opt_name);
 		sleep(1);
 		return;
@@ -241,7 +241,7 @@ void d_set_another_string_var(s_entry *
 
 	if (!type)
 	{
-		F_("Type can't be zero!\n");
+		F_("Type can't be zero!\r\n");
 		return;
 	}
 
@@ -249,13 +249,13 @@ void d_set_another_string_var(s_entry *
 
 	if (!vn && type->opt_type >= 50)
 	{
-		F_("The vn variable is missing for a type %i %s, trying to set string: \"%s\"!\n", type->opt_type, type->opt_name, string);
+		F_("The vn variable is missing for a type %i %s, trying to set string: \"%s\"!\r\n", type->opt_type, type->opt_name, string);
 		return;
 	}
 
 	if (!IT(STRINGS))
 	{
-		F_(" \"%s\" is not an strings type!\n", type->opt_name);
+		F_(" \"%s\" is not an strings type!\r\n", type->opt_name);
 		return;
 	}
 
@@ -277,7 +277,7 @@ void d_set_int_var(s_entry * type, char
 
 	if (!type)
 	{
-		F_("Type can't be zero!\n");
+		F_("Type can't be zero!\r\n");
 		return;
 	}
 
@@ -285,7 +285,7 @@ void d_set_int_var(s_entry * type, char
 
 	if (!vn && type->opt_type >= 50)
 	{
-		F_("The vn variable is missing for a type %i %s!\n", type->opt_type,
+		F_("The vn variable is missing for a type %i %s!\r\n", type->opt_type,
 		   type->opt_name);
 		return;
 	}
@@ -293,7 +293,7 @@ void d_set_int_var(s_entry * type, char
 
 	if (!IT(INT))
 	{
-		F_(" \"%s\" is not an int type!\n", type->opt_name);
+		F_(" \"%s\" is not an int type!\r\n", type->opt_name);
 		return;
 	}
 
@@ -354,7 +354,7 @@ void d_set_var(s_entry * type, char *vn,
 
 	if (!type)
 	{
-		F_("Type can't be zero!\n");
+		F_("Type can't be zero!\r\n");
 		return;
 	}
 
@@ -362,14 +362,14 @@ void d_set_var(s_entry * type, char *vn,
 
 	if (!vn && type->opt_type >= 50)
 	{
-		F_("The vn variable is missing for a type %i %s!\n", type->opt_type,
+		F_("The vn variable is missing for a type %i %s!\r\n", type->opt_type,
 		   type->opt_name);
 		return;
 	}
 
 	if (!IT(SET))
 	{
-		F_("It has to be an SET type to d_set!\n");
+		F_("It has to be an SET type to d_set!\r\n");
 		return;
 	}
 
@@ -432,7 +432,7 @@ void d_remove_var(s_entry * type, const
 
 	if (!type)
 	{
-		F_("Type can't be zero!\n");
+		F_("Type can't be zero!\r\n");
 		return;
 	}
 
diff -rupN /tmp/initng-0.6.10.2/src/initng_toolbox.c ./src/initng_toolbox.c
--- /tmp/initng-0.6.10.2/src/initng_toolbox.c	2006-05-18 12:30:22.000000000 +0200
+++ ./src/initng_toolbox.c	2016-07-13 12:08:47.777159760 +0200
@@ -35,11 +35,11 @@ void *i_calloc(size_t nmemb, size_t size
 {
 	void *alloced;
 
-	/*D_("function %s() line %i allocating %i bytes\n", func, line,
+	/*D_("function %s() line %i allocating %i bytes\r\n", func, line,
 	   nmemb * size); */
 	while ((alloced = calloc(nmemb, size)) == NULL)
 	{
-		F_("Out of memory, trying again in 1 second\n");
+		F_("Out of memory, trying again in 1 second\r\n");
 		sleep(1);
 	}
 	return alloced;
@@ -52,7 +52,7 @@ void *i_realloc2(void *ptr, size_t size,
 
 	while ((alloced = realloc(ptr, size)) == NULL)
 	{
-		F_("%s(): line %i Out of memory, trying again in 1 second\n",
+		F_("%s(): line %i Out of memory, trying again in 1 second\r\n",
 		   func, line);
 		sleep(1);
 	}
@@ -66,7 +66,7 @@ char *i_strdup2(const char *s, const cha
 
 	while ((alloced = strdup(s)) == NULL)
 	{
-		F_("%s(): line %i Out of memory, trying again in 1 second\n",
+		F_("%s(): line %i Out of memory, trying again in 1 second\r\n",
 		   func, line);
 		sleep(1);
 	}
@@ -80,7 +80,7 @@ char *i_strndup2(const char *s, size_t n
 
 	while ((alloced = strndup(s, n)) == NULL)
 	{
-		F_("%s(): line %i Out of memory, trying again in 1 second\n",
+		F_("%s(): line %i Out of memory, trying again in 1 second\r\n",
 		   func, line);
 		sleep(1);
 	}
@@ -117,12 +117,12 @@ int initng_toolbox_set_proc_title(const
 	{
 		memset(g.Argv0, 0, g.maxproclen);	/* clear */
 		strcpy(g.Argv0, buf);				/* copy */
-		D_("g.Argv0: %s\n", g.Argv0);
+		D_("g.Argv0: %s\r\n", g.Argv0);
 	}
 	else
 	{
 		len = 0;
-		D_("Cant reset own argv[0].\n");
+		D_("Cant reset own argv[0].\r\n");
 	}
 
 	free(buf);
diff -rupN /tmp/initng-0.6.10.2/src/main.c ./src/main.c
--- /tmp/initng-0.6.10.2/src/main.c	2007-03-24 05:12:56.000000000 +0100
+++ ./src/main.c	2016-07-13 12:08:47.777159760 +0200
@@ -120,13 +120,13 @@ static int load_policy(int *enforce)
 	{
 		if (errno == ENODEV)
 		{
-			fprintf(stderr, "SELinux not supported by kernel: %s\n",
+			fprintf(stderr, "SELinux not supported by kernel: %s\r\n",
 					strerror(errno));
 			*enforce = 0;
 		}
 		else
 		{
-			fprintf(stderr, "Failed to mount %s: %s\n", SELINUXMNT,
+			fprintf(stderr, "Failed to mount %s: %s\r\n", SELINUXMNT,
 					strerror(errno));
 		}
 		return ret;
@@ -140,14 +140,14 @@ static int load_policy(int *enforce)
 	policy_version = security_policyvers();
 	if (policy_version < 0)
 	{
-		fprintf(stderr, "Can't get policy version: %s\n", strerror(errno));
+		fprintf(stderr, "Can't get policy version: %s\r\n", strerror(errno));
 		goto UMOUNT;
 	}
 
 	orig_enforce = rc = security_getenforce();
 	if (rc < 0)
 	{
-		fprintf(stderr, "Can't get SELinux enforcement flag: %s\n",
+		fprintf(stderr, "Can't get SELinux enforcement flag: %s\r\n",
 				strerror(errno));
 		goto UMOUNT;
 	}
@@ -166,7 +166,7 @@ static int load_policy(int *enforce)
 			rc = security_setenforce(0);
 			if (rc < 0)
 			{
-				fprintf(stderr, "Can't disable SELinux: %s\n",
+				fprintf(stderr, "Can't disable SELinux: %s\r\n",
 						strerror(errno));
 				goto UMOUNT;
 			}
@@ -182,7 +182,7 @@ static int load_policy(int *enforce)
 			rc = security_setenforce(seconfig);
 			if (rc < 0)
 			{
-				fprintf(stderr, "Can't set SELinux enforcement flag: %s\n",
+				fprintf(stderr, "Can't set SELinux enforcement flag: %s\r\n",
 						strerror(errno));
 				goto UMOUNT;
 			}
@@ -201,7 +201,7 @@ static int load_policy(int *enforce)
 		fd = open(policy_file, O_RDONLY);
 		if (fd < 0)
 		{
-			fprintf(stderr, "Can't open '%s.%d':  %s\n",
+			fprintf(stderr, "Can't open '%s.%d':  %s\r\n",
 					selinux_binary_policy_path(), policy_version,
 					strerror(errno));
 			goto UMOUNT;
@@ -210,7 +210,7 @@ static int load_policy(int *enforce)
 
 	if (fstat(fd, &sb) < 0)
 	{
-		fprintf(stderr, "Can't stat '%s':  %s\n",
+		fprintf(stderr, "Can't stat '%s':  %s\r\n",
 				policy_file, strerror(errno));
 		goto UMOUNT;
 	}
@@ -218,7 +218,7 @@ static int load_policy(int *enforce)
 	map = mmap(NULL, sb.st_size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
 	if (map == MAP_FAILED)
 	{
-		fprintf(stderr, "Can't map '%s':  %s\n",
+		fprintf(stderr, "Can't map '%s':  %s\r\n",
 				policy_file, strerror(errno));
 		goto UMOUNT;
 	}
@@ -230,7 +230,7 @@ static int load_policy(int *enforce)
 	if (ret < 0)
 	{
 		fprintf(stderr,
-				"Warning!  Error while reading user configuration from %s/{local.users,system.users}:  %s\n",
+				"Warning!  Error while reading user configuration from %s/{local.users,system.users}:  %s\r\n",
 				selinux_users_path(), strerror(errno));
 		data = map;
 		data_size = sb.st_size;
@@ -246,21 +246,21 @@ static int load_policy(int *enforce)
 		if (errno == ENOENT || errno == EINVAL)
 		{
 			/* No booleans file or stale booleans in the file; non-fatal. */
-			fprintf(stderr, "Warning!  Error while setting booleans:  %s\n",
+			fprintf(stderr, "Warning!  Error while setting booleans:  %s\r\n",
 					strerror(errno));
 		}
 		else
 		{
-			fprintf(stderr, "Error while setting booleans:  %s\n",
+			fprintf(stderr, "Error while setting booleans:  %s\r\n",
 					strerror(errno));
 			goto UMOUNT;
 		}
 	}
-	fprintf(stderr, "Loading security policy\n");
+	fprintf(stderr, "Loading security policy\r\n");
 	ret = security_load_policy(data, data_size);
 	if (ret < 0)
 	{
-		fprintf(stderr, "security_load_policy failed\n");
+		fprintf(stderr, "security_load_policy failed\r\n");
 	}
 
   UMOUNT:
@@ -278,12 +278,12 @@ static void setup_console(void)
 	int fd;						/* /dev/console */
 	struct termios tty;
 
-	D_("MAIN_SET_I_AM_INIT_STUFF\n");
+	D_("MAIN_SET_I_AM_INIT_STUFF\r\n");
 
 	/* change dir to / */
 	while (chdir("/") < 0)
 	{
-		F_("Cant chdir to \"/\"\n");
+		F_("Cant chdir to \"/\"\r\n");
 		initng_main_su_login();
 	}
 
@@ -312,13 +312,13 @@ static void setup_console(void)
 	/* Try to open the console, but don't control it */
 	if (fd > 0)
 	{
-		D_("Opened " INITNG_CONSOLE ". Setting terminal options.\n");
+		D_("Opened " INITNG_CONSOLE ". Setting terminal options.\r\n");
 		ioctl(fd, KDSIGACCEPT, SIGWINCH);	/* Accept signals from 'kbd' */
 		close(fd);							/* Like Ctrl + Alt + Delete signal? */
 	}
 	else
 	{
-		D_("Failed to open " INITNG_CONSOLE ". Setting options anyway.\n");
+		D_("Failed to open " INITNG_CONSOLE ". Setting options anyway.\r\n");
 		ioctl(0, KDSIGACCEPT, SIGWINCH);	/* Accept signals from 'kbd' */
 	}
 
@@ -331,7 +331,7 @@ static void setup_console(void)
 	 */
 	if ((fd = open("/dev/console", O_RDWR | O_NOCTTY)) < 0)
 	{
-		F_("main(): can't open /dev/console.\n");
+		F_("main(): can't open /dev/console.\r\n");
 	}
 
 	(void) tcgetattr(fd, &tty);
@@ -390,10 +390,10 @@ int main(int argc, char *argv[], char *e
 	/* maby initng is launched only for getting the version */
 	if (argv[1] && strcmp(argv[1], "--version") == 0)
 	{
-		fprintf(stderr, INITNG_VERSION "\n");
+		fprintf(stderr, INITNG_VERSION "\r\n");
 		usleep(100);
-		fprintf(stdout, "api_ver=%i.\n", API_VERSION);
-		fprintf(stdout, "created by " INITNG_CREATOR "\n\n");
+		fprintf(stdout, "api_ver=%i.\r\n", API_VERSION);
+		fprintf(stdout, "created by " INITNG_CREATOR "\r\n\r\n");
 		exit(0);
 	}
 
@@ -406,7 +406,7 @@ int main(int argc, char *argv[], char *e
 
 	if (getuid() != 0)
 	{
-		W_("Initng is designed to run as root user, a lot of functionality will not work correctly.\n");
+		W_("Initng is designed to run as root user, a lot of functionality will not work correctly.\r\n");
 	}
 
 	/* if this is real init */
@@ -445,7 +445,7 @@ int main(int argc, char *argv[], char *e
 					/* SELinux in enforcing mode but load_policy failed */
 					/* At this point, we probably can't open /dev/console, so log() won't work */
 					fprintf(stderr,
-						"Enforcing mode requested but no policy loaded. Halting now.\n");
+						"Enforcing mode requested but no policy loaded. Halting now.\r\n");
 					exit(1);
 				}
 			}
@@ -469,12 +469,12 @@ int main(int argc, char *argv[], char *e
 	else if (g.i_am == I_AM_FAKE_INIT)
 	{
 		/* when last service stopped, quit initng */
-		W_("Initng is running in fake-mode, fake-default runlevel will be started instead.\n");
+		W_("Initng is running in fake-mode, fake-default runlevel will be started instead.\r\n");
 		g.when_out = THEN_QUIT;
 		initng_main_set_runlevel(RUNLEVEL_PREFIX "fake-default");
 	}
 
-	D_("MAIN_LOAD_MODULES\n");
+	D_("MAIN_LOAD_MODULES\r\n");
 	/* Load modules, if fails - launch sulogin and then try again */
 	if (!initng_load_module_load_all(INITNG_PLUGIN_DIR)
 		&& !initng_load_module_load_all("/lib/initng")
@@ -492,9 +492,9 @@ int main(int argc, char *argv[], char *e
 		if (retval != TRUE)
 		{
 			if (retval == FALSE)
-				F_("No plugin handled hot_reload!\n");
+				F_("No plugin handled hot_reload!\r\n");
 			else
-				F_("Hot reload failed!\n");
+				F_("Hot reload failed!\r\n");
 
 			/* if the hot reload failed, we're probably in big trouble */
 			initng_main_su_login();
@@ -523,16 +523,16 @@ int main(int argc, char *argv[], char *e
 		/* try load the default service, if it fails - launch sulogin and try again */
 		if (!initng_handler_start_new_service_named(g.runlevel))
 		{
-			F_("Failed to load runlevel (%s)!\n", g.runlevel);
+			F_("Failed to load runlevel (%s)!\r\n", g.runlevel);
 			initng_main_su_login();
 		}
 	}
 
-	D_("MAIN_GOING_MAIN_LOOP\n");
+	D_("MAIN_GOING_MAIN_LOOP\r\n");
 	/* %%%%%%%%%%%%%%%   MAIN LOOP   %%%%%%%%%%%%%%% */
 	for (;;)
 	{
-		D_("MAIN_LOOP: %i\n", loop_counter++);
+		D_("MAIN_LOOP: %i\r\n", loop_counter++);
 		int interrupt = FALSE;
 
 		/* Update current time, save this in global so we don't need to call time() that often. */
@@ -546,7 +546,7 @@ int main(int argc, char *argv[], char *e
 		if ((g.now.tv_sec - last.tv_sec) >= 3600
 			|| (g.now.tv_sec - last.tv_sec) < 0)
 		{
-			D_(" Clock skew, time have changed over one hour, in one mainloop, compensating %i seconds.\n", (g.now.tv_sec - last.tv_sec));
+			D_(" Clock skew, time have changed over one hour, in one mainloop, compensating %i seconds.\r\n", (g.now.tv_sec - last.tv_sec));
 			initng_active_db_compensate_time(g.now.tv_sec - last.tv_sec);
 			initng_plugin_callers_compensate_time(g.now.tv_sec - last.tv_sec);
 			last.tv_sec += (g.now.tv_sec - last.tv_sec);
@@ -600,7 +600,7 @@ int main(int argc, char *argv[], char *e
 		if (g.modules_to_unload == TRUE)
 		{
 			g.modules_to_unload = FALSE;
-			D_("There is modules to unload!\n");
+			D_("There is modules to unload!\r\n");
 			initng_unload_module_unload_marked();
 		}
 
@@ -629,7 +629,7 @@ int main(int argc, char *argv[], char *e
 		if (initng_main_ready_to_quit() == TRUE)
 		{
 			initng_main_set_sys_state(STATE_ASE);
-			P_(" *** Last service has quit. ***\n");
+			P_(" *** Last service has quit. ***\r\n");
 			initng_main_when_out();
 			continue;
 		}
@@ -656,7 +656,7 @@ int main(int argc, char *argv[], char *e
 			{
 				int time_to_next = g.next_alarm - g.now.tv_sec;
 
-				D_("g.next_alarm is set!, will trigger in %i sec.\n",
+				D_("g.next_alarm is set!, will trigger in %i sec.\r\n",
 				   time_to_next);
 				if (time_to_next < closest_timeout)
 					closest_timeout = time_to_next;
@@ -666,7 +666,7 @@ int main(int argc, char *argv[], char *e
 			if (closest_timeout > 0 && interrupt == FALSE)
 			{
 				/* do a poll == the same as sleep but also watch fds */
-				D_("Will sleep for %i seconds.\n", closest_timeout);
+				D_("Will sleep for %i seconds.\r\n", closest_timeout);
 				initng_fd_plugin_poll(closest_timeout);
 			}
 		}
diff -rupN /tmp/initng-0.6.10.2/tools/itool.c ./tools/itool.c
--- /tmp/initng-0.6.10.2/tools/itool.c	2007-02-02 13:22:29.000000000 +0100
+++ ./tools/itool.c	2016-07-13 12:08:47.777159760 +0200
@@ -95,7 +95,7 @@ static service_cache_h *parse_path(char
 
 int main(int argc, char *argv[], char *env[])
 {
-	/*printf("argc: %i argv[0]: %s argv[1]: %s argv[2]: %s\n", argc, argv[0],
+	/*printf("argc: %i argv[0]: %s argv[1]: %s argv[2]: %s\r\n", argc, argv[0],
 	   argv[1], argv[2]); */
 
 	/* initialise global variables */
@@ -105,7 +105,7 @@ int main(int argc, char *argv[], char *e
 	/* Load all plugins */
 	if (!initng_load_module_load_all(INITNG_PLUGIN_DIR))
 	{
-		printf("could not load all modules\n");
+		printf("could not load all modules\r\n");
 		exit(1);
 	}
 
@@ -125,7 +125,7 @@ int main(int argc, char *argv[], char *e
 				{
 					printf("%s ", serv->name);
 				}
-				putchar('\n');
+				printf( "\r\n");
 				goto end;
 			}
 
@@ -133,7 +133,7 @@ int main(int argc, char *argv[], char *e
 			{
 				char *out = service_db_print_all(serv->name);
 
-				printf("%s\n", out);
+				printf("%s\r\n", out);
 				free(out);
 				goto end;
 			}
@@ -153,7 +153,7 @@ int main(int argc, char *argv[], char *e
 		/* This will parse file */
 		initng_common_get_service(active);
 
-		printf("Executing service %s type %s\n", active->name, argv[3]);
+		printf("Executing service %s type %s\r\n", active->name, argv[3]);
 
 
 		/* Now launch! (will fork) */
diff -rupN /tmp/initng-0.6.10.2/tools/itype.c ./tools/itype.c
--- /tmp/initng-0.6.10.2/tools/itype.c	2006-05-18 12:24:55.000000000 +0200
+++ ./tools/itype.c	2016-07-13 12:08:47.777159760 +0200
@@ -96,23 +96,23 @@ int main(int argc, char *argv[], char *e
 	if (!argv[1] || argc != 3)
 	{
 		if (argc >= 2)
-			printf("Usage: %s %s [start] [stop] [restart] [status] [zap]\n",
+			printf("Usage: %s %s [start] [stop] [restart] [status] [zap]\r\n",
 				   argv[0], argv[1]);
 		else
-			printf("Usage: itype i_file.i [start] [stop] [restart] [status] [zap]\n");
+			printf("Usage: itype i_file.i [start] [stop] [restart] [status] [zap]\r\n");
 		exit(1);
 	}
-	/*printf("argc: %i argv[0]: %s argv[1]: %s argv[2]: %s\n", argc, argv[0], argv[1], argv[2]); */
+	/*printf("argc: %i argv[0]: %s argv[1]: %s argv[2]: %s\r\n", argc, argv[0], argv[1], argv[2]); */
 
 
 	fixed_path = get_serv(argv[1]);
 	if (!fixed_path)
 	{
-		printf("unkown service\n");
+		printf("unkown service\r\n");
 		exit(1);
 	}
 
-	/*printf("Service: %s\n", fixed_path); */
+	/*printf("Service: %s\r\n", fixed_path); */
 
 	/* usage "/etc/initng/test.i start" */
 	if (strcmp(argv[2], "start") == 0)
@@ -160,7 +160,7 @@ int main(int argc, char *argv[], char *e
 	}
 
 	{
-		printf("Usage: %s %s [start] [stop] [restart] [status] [zap]\n",
+		printf("Usage: %s %s [start] [stop] [restart] [status] [zap]\r\n",
 			   argv[0], argv[1]);
 	}
   end:
diff -rupN /tmp/initng-0.6.10.2/tools/killalli5.c ./tools/killalli5.c
--- /tmp/initng-0.6.10.2/tools/killalli5.c	2016-07-11 14:45:42.423276000 +0200
+++ ./tools/killalli5.c	2016-07-13 12:08:47.777159760 +0200
@@ -257,7 +257,7 @@ static int readproc(void)
 				{
 					p->sid = 0;
 					nsyslog(LOG_ERR,
-							"can't get program name from %s\n", path);
+							"can't get program name from %s", path);
 					free(p);
 					continue;
 				}
@@ -283,7 +283,7 @@ static int readproc(void)
 					   "%*u %lu %lu", &p->sid, &startcode, &endcode) != 3)
 			{
 				p->sid = 0;
-				nsyslog(LOG_ERR, "can't read sid from %s\n", path);
+				nsyslog(LOG_ERR, "can't read sid from %s", path);
 				free(p);
 				continue;
 			}
@@ -517,7 +517,7 @@ __attribute__ ((format(printf, 2, 3)))
 	{
 		fprintf(stderr, "%s: ", progname);
 		vfprintf(stderr, fmt, args);
-		fprintf(stderr, "\n");
+		fprintf(stderr, "\r\n");
 	}
 
 	va_end(args);
@@ -548,14 +548,14 @@ static int main_pidof(int argc, char **a
 		switch (opt)
 		{
 			case '?':
-				nsyslog(LOG_ERR, "invalid options on command line!\n");
+				nsyslog(LOG_ERR, "invalid options on command line!");
 				closelog();
 				exit(1);
 			case 'o':
 				if (oind >= PIDOF_OMITSZ - 1)
 				{
 					nsyslog(LOG_ERR, "omit pid buffer size %d "
-							"exceeded!\n", PIDOF_OMITSZ);
+							"exceeded!", PIDOF_OMITSZ);
 					closelog();
 					exit(1);
 				}
@@ -564,7 +564,7 @@ static int main_pidof(int argc, char **a
 				else if ((opid[oind] = atoi(optarg)) < 1)
 				{
 					nsyslog(LOG_ERR,
-							"illegal omit pid value (%s)!\n", optarg);
+							"illegal omit pid value (%s)!", optarg);
 					closelog();
 					exit(1);
 				}
@@ -619,7 +619,7 @@ static int main_pidof(int argc, char **a
 			}
 		}
 	}
-	printf("\n");
+	printf("\r\n");
 	closelog();
 	return (first ? 1 : 0);
 }
@@ -769,42 +769,42 @@ int main(int argc, char **argv)
 	{
 		if (p->pid == 1)
 		{
-			/*printf(" Process 1-%i, is init.\n", p->sid); */
+			/*printf(" Process 1-%i, is init.\r\n", p->sid); */
 			p->mark = 1;
 			continue;
 		}
 
 		if (p->pid == pid)
 		{
-			/*printf(" Process %i-%i, %s is me.\n", p->pid, p->sid, p->argv0); */
+			/*printf(" Process %i-%i, %s is me.\r\n", p->pid, p->sid, p->argv0); */
 			p->mark = 1;
 			continue;
 		}
 
 		if (p->sid == sid)
 		{
-			/*printf(" Process %i-%i, %s is my sessionid.\n", p->pid, p->sid, p->argv0); */
+			/*printf(" Process %i-%i, %s is my sessionid.\r\n", p->pid, p->sid, p->argv0); */
 			p->mark = 1;
 			continue;
 		}
 
 		if (p->kernel)
 		{
-			/*printf(" Process %i, is kernel or zombie.\n", p->pid); */
+			/*printf(" Process %i, is kernel or zombie.\r\n", p->pid); */
 			p->mark = 1;
 			continue;
 		}
 
 		if (strncmp(p->argv0, "bash_helper", 11) == 0)
 		{
-			/*printf(" Process %i-%i, %s is an initng run script!\n", p->pid, p->sid, p->argv0); */
+			/*printf(" Process %i-%i, %s is an initng run script!\r\n", p->pid, p->sid, p->argv0); */
 			p->mark = 1;
 			continue;
 		}
 
 		if (ignorelist && strstr(ignorelist, p->argv0))
 		{
-			/*printf(" Process %i-%i, %s is ignored from ignorelist.\n", p->pid, p->sid, p->argv0); */
+			/*printf(" Process %i-%i, %s is ignored from ignorelist.\r\n", p->pid, p->sid, p->argv0); */
 			p->mark = 1;
 			continue;
 		}
@@ -823,7 +823,7 @@ int main(int argc, char **argv)
 			{
 				if (q->mark == 0 && q->sid == p->sid)
 				{
-					/*printf(" Process %i-%i, %s won't be killed, because it has same sid as %i, %s.\n",
+					/*printf(" Process %i-%i, %s won't be killed, because it has same sid as %i, %s.\r\n",
 					   q->pid, q->sid, q->argv0, p->pid, p->argv0); */
 					q->mark = 1;
 				}
@@ -838,7 +838,7 @@ int main(int argc, char **argv)
 		if (p->mark)
 			continue;
 
-		printf(" Killing (%i) process %i, %s\n", sig, p->pid, p->argv0);
+		printf(" Killing (%i) process %i, %s\r\n", sig, p->pid, p->argv0);
 		kill(p->pid, sig);
 	}
 
diff -rupN /tmp/initng-0.6.10.2/tools/mountpoint.c ./tools/mountpoint.c
--- /tmp/initng-0.6.10.2/tools/mountpoint.c	2006-04-05 23:11:19.000000000 +0200
+++ ./tools/mountpoint.c	2016-07-13 12:08:47.777159760 +0200
@@ -39,7 +39,7 @@ int dostat(char *path, struct stat *st,
 	if (n != 0)
 	{
 		if (!quiet)
-			fprintf(stderr, "mountpoint: %s: %s\n", path, strerror(errno));
+			fprintf(stderr, "mountpoint: %s: %s\r\n", path, strerror(errno));
 		return -1;
 	}
 	return 0;
@@ -47,7 +47,7 @@ int dostat(char *path, struct stat *st,
 
 void usage(void)
 {
-	fprintf(stderr, "Usage: mountpoint [-q] [-d] [-x] path\n");
+	fprintf(stderr, "Usage: mountpoint [-q] [-d] [-x] path\r\n");
 	exit(1);
 }
 
@@ -93,19 +93,19 @@ int main(int argc, char **argv)
 #endif
 		{
 			if (quiet)
-				printf("\n");
+				printf("\r\n");
 			else
-				fprintf(stderr, "mountpoint: %s: not a block device\n", path);
+				fprintf(stderr, "mountpoint: %s: not a block device\r\n", path);
 			return 1;
 		}
-		printf("%u:%u\n", major(st.st_rdev), minor(st.st_rdev));
+		printf("%u:%u\r\n", major(st.st_rdev), minor(st.st_rdev));
 		return 0;
 	}
 
 	if (!S_ISDIR(st.st_mode))
 	{
 		if (!quiet)
-			fprintf(stderr, "mountpoint: %s: not a directory\n", path);
+			fprintf(stderr, "mountpoint: %s: not a directory\r\n", path);
 		return 1;
 	}
 
@@ -119,9 +119,9 @@ int main(int argc, char **argv)
 									  && st.st_ino == st2.st_ino);
 
 	if (!quiet && !showdev)
-		printf("%s is %sa mountpoint\n", path, r ? "" : "not ");
+		printf("%s is %sa mountpoint\r\n", path, r ? "" : "not ");
 	if (showdev)
-		printf("%u:%u\n", major(st.st_dev), minor(st.st_dev));
+		printf("%u:%u\r\n", major(st.st_dev), minor(st.st_dev));
 
 	return r ? 0 : 1;
 }
diff -rupN /tmp/initng-0.6.10.2/tools/sulogin.c ./tools/sulogin.c
--- /tmp/initng-0.6.10.2/tools/sulogin.c	2016-07-11 14:45:42.423276000 +0200
+++ ./tools/sulogin.c	2016-07-13 12:08:47.781159760 +0200
@@ -223,7 +223,7 @@ struct passwd *getrootpwent(int try_manu
 	 */
 	if (p == NULL)
 	{
-		fprintf(stderr, "%s: no entry for root\n", F_PASSWD);
+		fprintf(stderr, "%s: no entry for root\r\n", F_PASSWD);
 		return &pwd;
 	}
 	if (valid(pwd.pw_passwd))
@@ -236,7 +236,7 @@ struct passwd *getrootpwent(int try_manu
 	strcpy(pwd.pw_passwd, "");
 	if ((fp = fopen(F_SHADOW, "r")) == NULL)
 	{
-		fprintf(stderr, "%s: root password garbled\n", F_PASSWD);
+		fprintf(stderr, "%s: root password garbled\r\n", F_PASSWD);
 		return &pwd;
 	}
 	while ((p = fgets(sline, 256, fp)) != NULL)
@@ -255,12 +255,12 @@ struct passwd *getrootpwent(int try_manu
 	 */
 	if (p == NULL)
 	{
-		fprintf(stderr, "%s: no entry for root\n", F_SHADOW);
+		fprintf(stderr, "%s: no entry for root\r\n", F_SHADOW);
 		strcpy(pwd.pw_passwd, "");
 	}
 	if (!valid(pwd.pw_passwd))
 	{
-		fprintf(stderr, "%s: root password garbled\n", F_SHADOW);
+		fprintf(stderr, "%s: root password garbled\r\n", F_SHADOW);
 		strcpy(pwd.pw_passwd, "");
 	}
 	return &pwd;
@@ -279,9 +279,9 @@ char *getpasswd(char *crypted)
 	unsigned int i;
 
 	if (crypted[0])
-		printf("Give root password for maintenance\n");
+		printf("Give root password for maintenance\r\n");
 	else
-		printf("Press enter for maintenance\n");
+		printf("Press enter for maintenance\r\n");
 	printf("(or type Control-D to continue): ");
 	fflush(stdout);
 
@@ -312,7 +312,7 @@ char *getpasswd(char *crypted)
 	}
 	alarm(0);
 	tcsetattr(0, TCSANOW, &old);
-	printf("\n");
+	printf("\r\n");
 
 	return ret;
 }
@@ -374,7 +374,7 @@ void sushell(struct passwd *pwd)
 
 void usage(void)
 {
-	fprintf(stderr, "Usage: sulogin [-e] [-p] [-t timeout] [tty device]\n");
+	fprintf(stderr, "Usage: sulogin [-e] [-p] [-t timeout] [tty device]\r\n");
 }
 
 int main(int argc, char **argv)
@@ -410,7 +410,7 @@ int main(int argc, char **argv)
 
 	if (geteuid() != 0)
 	{
-		fprintf(stderr, "sulogin: only root can run sulogin.\n");
+		fprintf(stderr, "sulogin: only root can run sulogin.\r\n");
 		exit(1);
 	}
 
@@ -430,7 +430,7 @@ int main(int argc, char **argv)
 		}
 		else if (!isatty(fd))
 		{
-			fprintf(stderr, "%s: not a tty\n", tty);
+			fprintf(stderr, "%s: not a tty\r\n", tty);
 			close(fd);
 		}
 		else
@@ -474,7 +474,7 @@ int main(int argc, char **argv)
 	 */
 	if ((pwd = getrootpwent(opt_e)) == NULL)
 	{
-		fprintf(stderr, "sulogin: cannot open password database!\n");
+		fprintf(stderr, "sulogin: cannot open password database!\r\n");
 		sleep(2);
 	}
 
@@ -488,7 +488,7 @@ int main(int argc, char **argv)
 		if (pwd->pw_passwd[0] == 0 ||
 			strcmp(crypt(p, pwd->pw_passwd), pwd->pw_passwd) == 0)
 			sushell(pwd);
-		printf("Login incorrect.\n");
+		printf("Login incorrect.\r\n");
 	}
 
 	/*
